[
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nBuilding an App with the Vanilla DOM API (2020)\nAlex Anderson\nUpdated November 18, 2020\n7 minute read\n\nThese days, if you are building a dynamic web app with JavaScript, you are likely using a front-end framework, like React, Angular, Vue, or Svelte. These frameworks provide abstractions on top of the native DOM APIs that ship with browsers to make it easier to create truly dynamic content.\n\nHowever, like all abstractions, they come with their fair share of downsides. They might be a little bit slower than making raw DOM API calls; each of them requires browsers to download a bit of extra code just for the framework; sometimes the abstraction makes it hard to do exactly what you need to.\n\nIn this post, we'll throw out all of those frameworks and go back to the basics. We'll cover everything you need to know to create a dynamic website using just DOM APIs. And I'll include links to MDN Web Doc pages which talk about anything we don't cover.\n\nWhat We'll Build\n\nUsing the Pokémon API, we'll create a page that lets you navigate through each of the Pokémon, showing an image and including back and forward buttons. If you aren't familiar with the Pokémon API, you can learn about it on its website.\n\nWe'll use a very simple HTML file that only has a link to a JavaScript file. Everything else will be created dynamically using JavaScript.\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Raw DOM API Pokedex</title>\n    <meta charset=\"UTF-8\" />\n  </head>\n\n\n  <body>\n    <script src=\"index.js\"></script>\n  </body>\n</html>\n\nWe'll fill out our index.js file with the necessary code to call the Pokémon API and create the DOM elements on the page.\n\nDocument\n\nBefore we get any further, let's talk about document. document is a global object, which means you can access it from any JavaScript file loaded in the browser.\n\nThis is your window into the world of the browser DOM. It represents the root of the webpage, and gives you access to any DOM element on the page using APIs like document.getElementById and (document.querySelector)[https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector]. document also has properties which give you access to the head and body elements, which makes it possible to dynamically add stylesheets to the head or content to the body. Both of these are considered HTML Elements, which are the building blocks of websites.\n\ndocument also gives you APIs to create new elements. Using document.createElement we can create an element that represents any HTML tag. Let's do that now to create an element to wrap our entire app.\n\nconst app = document.createElement(\"div\");\n\nOur app variable contains an HTMLDivElement, which represents that individual DOM element.\n\nHTMLElement\n\nHTMLElement is the base class which all DOM elements, such as head, body, and div extend. They all share several properties and methods, so let's dive into those really quick.\n\nThere are three ways you can change the contents of an element. If the contents are just text, you can set the innerText property of the element.\n\napp.innerText = \"Hello there!\";\n\nA quick and dirty way of adding HTML content to an element is setting the innerHTML property. Note that this isn't particularly performant, and can open you up to cross-site scripting attacks if you are inserting user-provided content. Make sure you sanitize whatever content you put in to keep your users safe.\n\napp.innerHTML = \"<h1>Hello there!</h1>\";\n\nFinally, we can append an HTMLElement to another element using the appendChild method. This is what we will use most of the time as we create our web page.\n\nThis creates a tree structure, where each HTMLElement represents a node that has one parent and zero or more child nodes.\n\nconst header = document.createElement(\"h1\");\nheader.innerText = \"Hello there!\";\napp.appendChild(header);\n\nIf we need to put an element in a specific position on the page, we can use the insertBefore method. This method takes two parameters: the first is the new node, and the second is a child of the node we are adding the child to.\n\nNote that if the new node is already present on the parent node, the new node will be moved to the new position.\n\nconst menubar = document.createElement(\"nav\");\n// Places the menubar element above the header element\napp.insertBefore(menubar, header);\n\nFinally, if we need to get rid of an element, all we have to do is call the remove method on that element.\n\nmenubar.remove();\n\nYou can add and remove classes with the classList API. Adding a class is done by calling app.classList.add('container'); You can use the remove method to take off any classes. And you can see whether an element has a class with the contains method. Let's give our app element a class.\n\napp.classList.add(\"wrapper\");\n\nHTMLElements can be assigned an ID, which allows them to be accessed with document.getElementById and targeted with CSS ID selectors. ID's are assigned using the id property of the element.\n\napp.id = \"app\";\n\nIf we need to find an element on the page, there are several methods we can use. We'll just talk about three of them.\n\ndocument.getElementById lets you grab any element by ID. In the HTML specification, each ID should be unique on the page, which means an ID is only ever assigned to one element. If the element we want has an ID, we can grab it directly.\n\nconst app = document.getElementById('app`)\n\nWe can also take advantage of CSS selectors to get individual elements or lists of elements using document.querySelector and document.querySelectorAll.\n\n// This returns the first element to match the selector\nconst pokeImage = document.querySelector(\"image.poke-image\");\n\n\n// This returns a node list of all of the elements on the page that match this selector.\nconst pokeTypes = document.querySelectorAll(\".poke-type\");\n\nBefore we get back to creating our Pokédex, lets cover one more important document API. Suppose we had this HTML that we wanted to create using the appendChild DOM API.\n\n<p>This is a <strong>water</strong> type Pokémon</p>\n\nHow do we put that strong element in the middle of that text? For this, we'll need one more document method. document.createTextNode lets you create DOM nodes that only contain text without a tag. By appending Text nodes and HTML elements in the correct order, we can recreate this.\n\nconst label = document.createElement(\"p\");\nlabel.appendChild(document.createTextNode(\"This is a \"));\nconst pokeType = document.createElement(\"strong\");\npokeType.innerText = \"water\";\nlabel.appendChild(pokeType);\nlabel.appendChild(document.createTextNode(\"type Pokémon\"));\n\nWith all of that out of the way, let's start building.\n\nFetching Pokémon\n\nWe'll use the fetch API to get the very first Pokémon. As we fetch the Pokémon, we'll show a \"Loading...\" indicator.\n\nconst baseURL = \"https://pokeapi.co/api/v2/pokemon/\";\n\n\nconst app = document.createElement(\"div\");\ndocument.body.appendChild(app);\n\n\nconst loading = document.createElement(\"p\");\nloading.innerText = \"Loading...\";\nloading.classList.add(\"loading\");\n\n\nasync function getPokemon(id) {\n  const response = await fetch(`${baseURL}${id}`);\n  const result = await response.json();\n  return result;\n}\n\n\nasync function init() {\n  app.appendChild(loading);\n  const pokemon = await getPokemon(1);\n  loading.remove();\n}\ninit();\n\nOur loading indicator appears when the page first opens and disappears once the first Pokémon has loaded. Now we need to take the data we got from the Pokémon API and generate a DOM structure. We'll show the Pokémon name, number, image, and types.\n\nfunction createPokemon(pokemon) {\n  const pokemonElement = document.createElement(\"div\");\n  pokemonElement.id = \"pokemonContainer\";\n  pokemonElement.classList.add(\"pokemon-container\");\n\n\n  const pokemonImage = document.createElement(\"img\");\n\n\n  // Get the dream world sprite, falling back on the official artwork and then the default artwork.\n  // Set the src attribute directly on the element.\n  pokemonImage.src =\n    pokemon.sprites?.other?.dream_world?.front_default ||\n    pokemon.sprites?.other?.[\"official-artwork\"]?.front_default ||\n    pokemon.sprites?.front_default;\n  pokemonImage.classList.add(\"pokemon-image\");\n  pokemonElement.appendChild(pokemonImage);\n\n\n  const pokemonInfo = document.createElement(\"div\");\n  pokemonElement.appendChild(pokemonInfo);\n\n\n  const pokemonId = document.createElement(\"p\");\n  pokemonId.classList.add(\"pokemon-id\");\n  pokemonId.innerText = pokemon.id;\n  pokemonInfo.appendChild(pokemonId);\n\n\n  const pokemonName = document.createElement(\"p\");\n  // Capitalize the first character\n  pokemonName.innerText = pokemon.name[0].toUpperCase() + pokemon.name.slice(1);\n  pokemonName.classList.add(\"pokemon-name\");\n  pokemonInfo.appendChild(pokemonName);\n\n\n  const pokemonTypes = document.createElement(\"div\");\n  pokemonTypes.classList.add(\"pokemon-types\");\n  // Loop over all of the types and create a type badge.\n  pokemon.types.forEach((type) => {\n    const typeElement = document.createElement(\"div\");\n    typeElement.classList.add(type.type.name);\n    typeElement.innerText = type.type.name;\n    pokemonTypes.appendChild(typeElement);\n  });\n  pokemonInfo.appendChild(pokemonTypes);\n\n\n  return pokemonElement;\n}\n\nAs an aside, functions like this make it easy to see why using declarative paradigms like React is so popular. Doing the same thing with React would look something like this:\n\nconst Pokemon = ({ pokemon }) => {\n  return (\n    <div className=\"pokemon-container\">\n      <img\n        src={\n          pokemon.sprites?.other?.dream_world?.front_default ||\n          pokemon.sprites?.other?.[\"official-artwork\"]?.front_default ||\n          pokemon.sprites.front_default\n        }\n      />\n      <div>\n        <p className=\"pokemon-id\">{pokemon.id}</p>\n        <p className=\"pokemon-name\">\n          {pokemon.name[0].toUpperCase() + pokemon.name.slice(1)}\n        </p>\n        {pokemon.types.map((type) => (\n          <div key={type.type.name} className={type.type.name}>\n            {type.type.name}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nMuch more concise while still creating exactly the same DOM structure.\n\nAt this point, we can bring it all together to render our single Pokémon.\n\nasync function init() {\n  app.appendChild(loading);\n  const pokemon = await getPokemon(1);\n  loading.remove();\n  app.appendChild(createPokemon(pokemon));\n}\n\nAnd after a moment of loading, we should see Bulbasaur!\n\nEvents\n\nNow that we've loaded our first Pokémon, we need to add buttons to load the other ones. Creating the buttons works exactly the same as regular elements; we'll just use button as our tag name.\n\nfunction createButtons() {\n  const buttonContainer = document.createElement(\"div\");\n  buttonContainer.classList.add(\"button-container\");\n  const prevButton = document.createElement(\"button\");\n  prevButton.innerText = \"Prev.\";\n  buttonContainer.appendChild(prevButton);\n\n\n  const nextButton = document.createElement(\"button\");\n  nextButton.innerText = \"Next\";\n  buttonContainer.appendChild(nextButton);\n\n\n  return buttonContainer;\n}\n\nNow that we have two buttons, how do we give them event handlers? We have two options.\n\nEvery event that we can trigger is available as a property on the element with the prefix 'on'. The event name itself is lowercase, which means our properties are \"onclick\", \"onmousedown\", etc. By assigning a function to these properties, every time the event is triggered, it will call the function.\n\nnextButton.onclick = function handleNextPokemon() {\n  // ...\n};\n\nThe second option involves adding an event listener using the addEventListener method. You might have used this method to add events directly to the document; we're going to use it directly on the button. Instead of appending an 'on' to the front of the event name, we just use the event name as the first parameter; the second parameter is the function that is called when the event is triggered.\n\nnextButton.addEventListener(\"click\", () => {\n  // ...\n});\n\nI personally prefer using addEventListener. It makes it easy to add multiple event listeners to the same element, and has extra options, such as making the event listener stop listening after the first time it is called.\n\nBefore we can go to the next or previous Pokémon, we need to know what the current Pokémon's ID is. You might be thinking that we could just grab it from the pokemonId element, and you'd be right. However, you should using DOM elements as state storage. Since the DOM is globally accessible, and you can mutate any DOM element at any time, it's possible that the DOM element has changed in a way that you weren't anticipating.\n\nThis is another benefit of using a front-end framework. With React, you store your application state either in component state or using the useState hook; your UI is always a function of that state, so the DOM elements that are rendered by React (or any other front-end framework) will be predictable. With Vanilla DOM APIs, you are responsible for making sure your state doesn't get messed up somewhere else in your program.\n\nWe'll create a top level variable to hold the ID of the current Pokémon as a number. We'll also change our getPokemon function so it uses that state variable instead of having us pass a parameter to the function.\n\nlet currentPokemon = 1;\n\n\nasync function getPokemon() {\n  const response = await fetch(`${baseURL}${id}`);\n  const result = await response.json();\n  return result;\n}\n\nThen we can write our event handlers, along with a helper to load and re-create our Pokémon DOM elements...\n\nasync function loadAndRenderPokemon() {\n  // Clear the existing Pokemon.\n  const pokemonElement = document.getElementById(\"pokemonContainer\");\n  pokemonElement.remove();\n\n\n  // Show the loading element\n  app.appendChild(loading);\n\n\n  const pokemon = await getPokemon();\n  loading.remove();\n  app.appendChild(createPokemon(pokemon));\n}\nfunction goPrev() {\n  if (currentPokemon <= 1) return;\n  currentPokemon -= 1;\n  loadAndRenderPokemon();\n}\nfunction goNext() {\n  if (currentPokemon >= 893) return;\n  currentPokemon += 1;\n  loadAndRenderPokemon();\n}\n\n...and add our event listeners to our buttons.\n\nnextButton.addEventListener(\"click\", goNext);\nprevButton.addEventListener(\"click\", goPrev);\n\nOne thing that I'm doing is obliterating the existing Pokémon DOM elements when we load a new Pokémon. For our purposes, that works just fine. However, if you needed to be more performant and use less memory, it would be best to reuse the existing DOM elements and change out the innerText and attributes. I'll leave figuring out how to do that as an exercise for the reader.\n\nThe last thing that we need to do is execute our createButtons function inside of our createPokemon method. Altogether, our JavaScript code should look something like this.\n\nconst baseURL = \"https://pokeapi.co/api/v2/pokemon/\";\n\n\nconst app = document.createElement(\"div\");\napp.id = \"app\";\ndocument.body.appendChild(app);\n\n\nconst loading = document.createElement(\"p\");\nloading.innerText = \"Loading...\";\nloading.classList.add(\"loading\");\nlet currentPokemon = 1;\n\n\nasync function loadAndRenderPokemon() {\n  // Clear the existing Pokemon.\n  const pokemonElement = document.getElementById(\"pokemonContainer\");\n  pokemonElement.remove();\n\n\n  // Show the loading element\n  app.appendChild(loading);\n\n\n  const pokemon = await getPokemon();\n  loading.remove();\n  app.appendChild(createPokemon(pokemon));\n}\nfunction goPrev() {\n  if (currentPokemon <= 1) return;\n  currentPokemon -= 1;\n  loadAndRenderPokemon();\n}\nfunction goNext() {\n  if (currentPokemon >= 893) return;\n  currentPokemon += 1;\n  loadAndRenderPokemon();\n}\nfunction createButtons() {\n  const buttonContainer = document.createElement(\"div\");\n  buttonContainer.classList.add(\"button-container\");\n  const prevButton = document.createElement(\"button\");\n  prevButton.innerText = \"Prev.\";\n  buttonContainer.appendChild(prevButton);\n\n\n  const nextButton = document.createElement(\"button\");\n  nextButton.innerText = \"Next\";\n  buttonContainer.appendChild(nextButton);\n  nextButton.addEventListener(\"click\", goNext);\n  prevButton.addEventListener(\"click\", goPrev);\n\n\n  return buttonContainer;\n}\nasync function getPokemon() {\n  const response = await fetch(`${baseURL}${currentPokemon}`);\n  const result = await response.json();\n  return result;\n}\n\n\nfunction createPokemon(pokemon) {\n  const pokemonElement = document.createElement(\"div\");\n  pokemonElement.id = \"pokemonContainer\";\n  pokemonElement.classList.add(\"pokemon-container\");\n\n\n  const pokemonImage = document.createElement(\"img\");\n\n\n  // Get the dream world sprite, falling back on the official artwork and then the default artwork.\n  // Set the src attribute directly on the element.\n  pokemonImage.src =\n    pokemon.sprites?.other?.dream_world?.front_default ||\n    pokemon.sprites?.other?.[\"official-artwork\"]?.front_default ||\n    pokemon.sprites?.front_default;\n  pokemonImage.classList.add(\"pokemon-image\");\n  pokemonElement.appendChild(pokemonImage);\n\n\n  const pokemonInfo = document.createElement(\"div\");\n  pokemonElement.appendChild(pokemonInfo);\n\n\n  const pokemonId = document.createElement(\"p\");\n  pokemonId.classList.add(\"pokemon-id\");\n  pokemonId.innerText = pokemon.id;\n  pokemonInfo.appendChild(pokemonId);\n\n\n  const pokemonName = document.createElement(\"p\");\n  // Capitalize the first character\n  pokemonName.innerText = pokemon.name[0].toUpperCase() + pokemon.name.slice(1);\n  pokemonName.classList.add(\"pokemon-name\");\n  pokemonInfo.appendChild(pokemonName);\n\n\n  const pokemonTypes = document.createElement(\"div\");\n  pokemonTypes.classList.add(\"pokemon-types\");\n  // Loop over all of the types and create a type badge.\n  pokemon.types.forEach((type) => {\n    const typeElement = document.createElement(\"div\");\n    typeElement.classList.add(type.type.name);\n    typeElement.innerText = type.type.name;\n    pokemonTypes.appendChild(typeElement);\n  });\n  pokemonInfo.appendChild(pokemonTypes);\n  const buttons = createButtons();\n  pokemonElement.appendChild(buttons);\n  return pokemonElement;\n}\n\n\nasync function init() {\n  app.appendChild(loading);\n  const pokemon = await getPokemon(1);\n  loading.remove();\n\n\n  app.appendChild(createPokemon(pokemon));\n}\ninit();\n\nYou can check out the whole project here on CodeSandbox.\n\nCustom Events\n\nWe didn't encounter this problem while we were making our little app, but you might find sometimes that you need to pass events from one place in your app to a completely different place. It would be nice if you could just listen to a custom event on the document,and then fire that custom event from anywhere else in your app.\n\nGuess what? Such a thing does exist, and it's called Custom Events. You can create custom events from anywhere in your app and dispatch them to any element in your page, including document. Any event listeners listening for your custom event will be triggered and receive whatever data you sent them.\n\nHere's an example where we dispatch a friendly greeting event.\n\nconst myElement = document.createElement(\"div\");\n\n\nmyElement.addEventListener(\"greeting\", (event) => {\n  console.log(`Greeting from:${event.detail.name}`);\n});\n\n\n// Elsewhere\nconst greetingEvent = new CustomEvent(\"greeting\", {\n  detail: {\n    name: \"Alex\",\n  },\n});\nmyElement.dispatchEvent(greetingEvent);\n\nWhen we use the CustomEvent constructor, the first argument is the name of the event that the listener needs to subscribe to; the second argument is an object which holds any data we want to send over to the listener.\n\nThere we have it; a small app built with Vanilla DOM APIs. It might already be apparent, but using the Vanilla DOM API can quickly become cumbersome the larger the app becomes. You can also run into other pitfalls, such as naming collisions, multiple functions accessing the same mutable state, and memory leaks from event listeners not being cleaned up. Front-end frameworks take care of these problems for you so you can focus on making a great app.\n\nHopefully this little dive into DOM APIs has given you a better idea how these frameworks might work under the hood. Maybe you'll even use some of these principles as you work with front-end frameworks.\n\nAlex Anderson\n\nSoftware Architect at ui.dev. Hobby Chef. Spaceship Enthusiast. Serial Optimist.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nHow to capitalize the first letter of a string in JavaScript\nTyler McGinnis\nUpdated July 29, 2020\n1 minute read\nNo Time to Read - Copy/Paste - ES6 Solution\nconst capitalize = ([firstLetter, ...restOfWord]) =>\n  firstLetter.toUpperCase() + restOfWord.join(\"\");\nNo Time to Read - Copy/Paste - ES5 Solution\nfunction capitalize(string) {\n  return string[0].toUpperCase() + string.slice(1);\n}\nES6 Explanation\n\nThe first thing we want to do is take the string we're trying to capitalize and separate it into two pieces, the first letter, and everything else. To accomplish this we'll use an ES6 feature called Array Destructuring (which conveniently works on strings as well).\n\nIf you're not familiar with Array Destructuring, check out Object and Array Destructuring in JavaScript\n\nJust as if we were to destructure the string in the body of the function, we can also do it in the function's parameter.\n\nconst capitalize = ([firstLetter, ...restOfWord]) => {};\n\nAt this point we have two variables local to our capitalize function - firstLetter and restOfWord. firstLetter is, well, the first letter of the string argument that was passed into capitalize. restOfWord is an array that contains all of the other characters of the argument.\n\nconst capitalize = ([firstLetter, ...restOfWord]) => {\n  console.log(firstLetter); // 'h'\n  console.log(restOfWord); // [\"e\", \"l\", \"l\", \"o\"]\n};\n\nNow that we've separated our string into the first letter and everything else, the next step is to capitalize the first letter. Lucky for us, all JavaScript strings have access to a .toUpperCase method which we can use.\n\nconst capitalize = ([firstLetter, ...restOfWord]) => {\n  const capitalizedFirstLetter = firstLetter.toUpperCase();\n};\n\nThe final step is to take the capitalized first letter, combine it with the rest of the word, and return the result.\n\nRemember at this point we have two variables, capitalizedFirstLetter which is a string and restOfWord which is an array. If we convert restOfWord back to a string then we can just return the result of adding capitalizedFirstLetter and the string form of restOfWord back together.\n\nTo convert an array into a string, we can use the .join method.\n\nconst capitalize = ([firstLetter, ...restOfWord]) => {\n  const capitalizedFirstLetter = firstLetter.toUpperCase();\n  const restOfWordString = restOfWord.join(\"\");\n};\n\nNow that we have the capitalized first letter and the rest of the word as a string, we can add them together and return the result.\n\nconst capitalize = ([firstLetter, ...restOfWord]) => {\n  const capitalizedFirstLetter = firstLetter.toUpperCase();\n  const restOfWordString = restOfWord.join(\"\");\n  return capitalizedFirstLetter + restOfWordString;\n};\n\nNow to get to our final solution, we can get rid of the variables and use Arrow Function's implicit return.\n\nconst capitalize = ([firstLetter, ...restOfWord]) =>\n  firstLetter.toUpperCase() + restOfWord.join(\"\");\nES5 Explanation\n\nThe ES5 solution follows the same logic as the ES6 solution. We first want to separate the first letter from the rest of the word. In ES5, we can grab the first letter by using bracket notation at the 0 index and we can get the rest of the word by using JavaScript's .slice method.\n\nfunction capitalize(string) {\n  var firstLetter = string[0];\n  var restOfWord = string.slice(1); // start at the 1 index\n}\n\nNow that we've separated the first letter from the rest of the word, we want to capitalize the first letter then combine it with the rest of the word.\n\nfunction capitalize(string) {\n  var firstLetter = string[0];\n  var restOfWord = string.slice(1); // start at the 1 index\n\n\n  return firstLetter.toUpperCase() + restOfWord;\n}\n\nAnd finally, to get to our final solution we can get rid of the variable and do everything in line.\n\nfunction capitalize(string) {\n  return string[0].toUpperCase() + string.slice(1);\n}\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Hooks course with code bnC2e .\n\nLOGIN\nUnderstanding React's useReducer Hook\nTyler McGinnis\nUpdated November 23, 2020\n10 minute read\nTABLE OF CONTENTS\nReduce\nuseReducer\nuseState vs useReducer\nSummary\n\nWe're going to start this post off exactly how you'd expect, by talking about JavaScript's forEach method. forEach lives on Array.prototype and every instance of Array has access to it. It allows you to invoke a provided function once for each element in an array.\n\nconst friends = ['Jake', 'Mikenzi', 'Jacob']\n\n\nfriends.forEach((friend) => addToDOM(friend))\n\nNow, say you had an array of numbers, [2,4,6]. Using forEach to iterate through each number, how would you add all of the numbers together to get a single value, 12? One approach might look like this.\n\nconst nums = [2,4,6]\nlet state = 0\n\n\nfunction sum (value) {\n  state += value\n}\n\n\nnums.forEach(sum)\n\nWith forEach, to add up all of the values, we need to create and manage an intermediate value (state) and modify it on each invocation. As this demonstrates, not only is forEach dependent on the state of our application, but it's also modifying state outside of its own scope - this makes it an impure function. While not always bad, it's best to avoid impure functions when you can. To accomplish the same functionality with a pure function, we can use JavaScript's reduce method.\n\nReduce\n\nReduce (also referred to as fold, accumulate, or compress) is a functional programming pattern that takes a collection (an array or object) as input and returns a single value as output. In JavaScript, the most common use of reduce is the reduce method all Arrays have access to. Applying reduce to our example above, our input would be nums and our output would be the summation of every value in nums.\n\nThe key difference between reduce and forEach is that reduce is able to keep track of the accumulated state internally without relying upon or modifying state outside of its own scope - that's what makes it a pure function. The way it does this is, for each element in the collection, it invokes a reducer function passing it two arguments, the accumulated state and the current element in the collection. What the reducer function returns will be passed as the first argument to the next invocation of the reducer and will eventually result in the final value.\n\nconst nums = [2,4,6]\nconst initialState = 0\n\n\nfunction reducer (state, value) {\n  return state + value\n}\n\n\nconst total = nums.reduce(reducer, initialState)\n\nThe very first time the reducer function is invoked, state will be 0 and value will be 2. Then on the next invocation, state will be whatever the previous invocation returned, which was 0 + 2 and value will be the 2nd element in the array, 4. Then on the next invocation, state will be 6 (2 + 4) and value will be 6. Finally, since are no more elements in the collection to iterate over, the returned value will be 6 + 6 or 12. We can see this in the diagram below.\n\nInitial Value: 0\n\n\nFirst invocation:\n  state: 0\n  value: 2\n\n\nSecond invocation:\n  state: 2\n  value: 4\n\n\nThird invocation:\n  state: 6\n  value: 6\n\n\nNo more elements in the collection, return 6 + 6 which is 12.\n\nHere's what we know so far - reduce is a functional programming pattern that takes a collection as input and returns a single value as output. The way you get to that single value is by invoking a reducer function for every element in the collection.\n\nNow, instead of using this pattern to transform arrays, how can we apply it to creating better UI? What if instead of our input collection being an array, it was a collection of user actions that happened over time? Then, whenever a new user action occurred, we could invoke the reducer function which would get us the new state.\n\nAssuming we had a simple UI that was a button and a counter that incremented every time the button was clicked, here's what the flow might look like using the same reducer logic.\n\nUI: 0 ➕\n\n\nUser clicks ➕, reducer is invoked:\n  state: 0\n  value: 1\n\n\nUI: 1 ➕\n\n\nUser clicks ➕, reducer is invoked:\n  state: 1\n  value: 1\n\n\nUI: 2 ➕\n\n\nUser clicks ➕, reducer is invoked:\n  state: 2\n  value: 1\n\n\nUI: 3 ➕\n\nIt might seem strange, but if you think about reduce in the context of being a functional programming pattern, it makes sense that we can utilize it to create more predictable UIs. Now the question is, how?\n\nuseReducer\n\nReact comes with a built-in Hook called useReducer that allows you to add state to a function component but manage that state using the reducer pattern.\n\nThe API for useReducer is similar to what we saw earlier with reduce; however, there's one big difference. Instead of just returning the state, as we mentioned earlier, we need a way for user actions to invoke our reducer function. Because of this, useReducer returns an array with the first element being the state and the second element being a dispatch function which when called, will invoke the reducer.\n\nconst [state, dispatch] = React.useReducer(\n  reducer,\n  initialState\n)\n\nWhen invoked, whatever you pass to dispatch will be passed as the second argument to the reducer (which we've been calling value). The first argument (which we've been calling state) will be passed implicitly by React and will be whatever the previous state value was. Putting it all together, here's our code.\n\nfunction reducer (state, value) {\n  return state + value\n}\n\n\nfunction Counter () {\n  const [count, dispatch] = React.useReducer(\n    reducer,\n    0\n  )\n\n\n  return (\n    <React.Fragment>\n      <h1>{count}</h1>\n      <button onClick={() => dispatch(1)}>\n        +\n      </button>\n    </React.Fragment>\n  );\n}\n\nThe flow is the exact same as our diagram above. Whenever the + button is clicked, dispatch will be invoked. That will call reducer passing it two arguments, state, which will come implicitly from React, and value, which will be whatever was passed to dispatch. What we return from reducer will become our new count. Finally, because count changed, React will re-render the component, updating the UI.\n\nAt this point, you've seen how useReducer works in its most basic form. What you haven't seen yet is an example of useReducer that resembles anything close to what you'd see in the real-world. To get closer to that, let's add a little bit of functionality to our app. Instead of just incrementing count by 1, let's add two more buttons - one to decrement count and one to reset it to 0.\n\nFor decrementing, all we need to do is pass -1 to dispatch, because math.\n\nfunction reducer (state, value) {\n  return state + value\n}\n\n\nfunction Counter() {\n  const [count, dispatch] = React.useReducer(\n    reducer,\n    0\n  )\n\n\n  return (\n    <React.Fragment>\n      <h1>{count}</h1>\n      <button onClick={() => dispatch(1)}>\n        +\n      </button>\n      <button onClick={() => dispatch(-1)}>\n        -\n      </button>\n    </React.Fragment>\n  )\n}\n\nFor resetting the count to 0, it gets a little trickier.\n\nRight now with how we've set up our reducer function, there's no way to specify different types of actions that can occur to update our state. We only accept a value (which we get from whatever was passed to dispatch) and add that to state.\n\nfunction reducer (state, value) {\n  return state + value\n}\n\nWhat if instead of dispatching the value directly, we dispatch the type of action that occurred? That way, based on the type of action, our reducer can decide how to update the state.\n\nWith the current functionality of our app, we'll have three different action types, increment, decrement, and reset.\n\nreturn (\n  <React.Fragment>\n    <h1>{count}</h1>\n    <button onClick={() => dispatch('increment')}>\n      +\n    </button>\n    <button onClick={() => dispatch('decrement')}>\n      -\n    </button>\n    <button onClick={() => dispatch('reset')}>\n      Reset\n    </button>\n  </React.Fragment>\n)\n\nNow, inside of our reducer, we can change how we update the state based on those action types. Instead of naming our second parameter value, we'll change it to action to better represent what it is.\n\nfunction reducer (state, action) {\n  if (action === 'increment') {\n    return state + 1\n  } else if (action === 'decrement') {\n    return state - 1\n  } else if (action === 'reset') {\n    return 0\n  } else {\n    throw new Error(`This action type isn't supported.`)\n  }\n}\n\n\nfunction Counter() {\n  const [count, dispatch] = React.useReducer(\n    reducer,\n    0\n  )\n\n\n  return (\n    <React.Fragment>\n      <h1>{count}</h1>\n      <button onClick={() => dispatch('increment')}>\n        +\n      </button>\n      <button onClick={() => dispatch('decrement')}>\n        -\n      </button>\n      <button onClick={() => dispatch('reset')}>\n        Reset\n      </button>\n    </React.Fragment>\n  )\n}\n\nThis is where we start to see useReducer shine. You may not have noticed it, but we've completely decoupled the update logic of our count state from our component. We're now mapping actions to state transitions. We're able to separate how the state updates from the action that occurred. We'll dive into the practical benefits of this later on in this post.\n\nLet's add another feature to our app. Instead of incrementing and decrementing count by 1, let's let the user decide via a slider. Imagine we had a Slider component that took in 3 props, min, max, and onChange.\n\n<Slider\n  min={1}\n  max={10}\n  onChange={(value) => }\n/>\n\nThe way we get the value of the slider is via the Slider's onChange prop. Knowing this, and knowing that its the value of the slider that will decide by how much we increment and decrement count, what changes do we need to make to our reducer?\n\nRight now the state for our reducer is an integer which represents the count. This worked previously, but now that we need our reducer to manage another piece of state for our slider value, we'll need to modify it. Instead of being an integer, let's make it an object. This way, any new pieces of state that our reducer needs to manage can go as a property on the object.\n\n0 -> { count: 0, step: 1 }\n\nNow we need to actually update our code. The first change we need to make is for the initial state of our reducer. Instead of 0 (representing count), it'll be our state object.\n\nconst [state, dispatch] = React.useReducer(\n  reducer,\n  { count: 0, step: 1 }\n)\n\nNow, since state is no longer an integer, we'll need to update the reducer to account for that.\n\nfunction reducer (state, action) {\n  if (action === 'increment') {\n    return {\n      count: state.count + 1,\n      step: state.step,\n    }\n  } else if (action === 'decrement') {\n    return {\n      count: state.count - 1,\n      step: state.step,\n    }\n  } else if (action === 'reset') {\n    return {\n      count: 0,\n      step: state.step,\n    }\n  } else {\n    throw new Error(`This action type isn't supported.`)\n  }\n}\n\nNow that our reducer is updated with our new state object, the next thing we need to do is update step whenever the user moves the slider. If you'll remember, we get access to that slider value by passing an onChange function to Slider.\n\n<Slider\n  min={1}\n  max={10}\n  onChange={(value) => }\n/>\n\nNow the question becomes, what do we want to dispatch? Up until this point, we've been able to dispatch the type of action that occurred (increment, decrement, and reset). This worked fine but we're now running into its limitations. Along with the action type, we also need to include some more data. In our case, we want to pass along the value of the slider so we can update our step state. To do this, instead of having our action we dispatch be a string, let's change it to be an object with a type property. Now, we can still dispatch based on the type of action that occurred, but we can also pass along any other data as properties on the action object. We can see this perfectly with what we dispatch from our Slider.\n\n<Slider onChange={(value) => dispatch({\n  type: 'updateStep',\n  step: value\n})} />\n\nWhile we're here, we also need to update all our other dispatches to pass an object with a type property instead of a string.\n\nreturn (\n  <React.Fragment>\n    <Slider onChange={(value) => dispatch({\n      type: 'updateStep',\n      step: value\n    })} />\n    <hr />\n    <h1>{state.count}</h1>\n    <button onClick={() => dispatch({\n      type: 'increment',\n    })}>\n      +\n    </button>\n    <button onClick={() => dispatch({\n      type: 'decrement'\n    })}>\n      -\n    </button>\n    <button onClick={() => dispatch({\n      type: 'reset'\n    })}>\n      Reset\n    </button>\n  </React.Fragment>\n)\n\nFinally, there are three changes we need to make to our reducer. First, we need to account for our new action type, updateStep. Next, we need to account for changing action to be an object instead of a string. Finally, we need to update increment and decrement to adjust the count based on the step property and not just 1.\n\nfunction reducer (state, action) {\n  if (action.type === 'increment') {\n    return {\n      count: state.count + state.step,\n      step: state.step,\n    }\n  } else if (action.type === 'decrement') {\n    return {\n      count: state.count - state.step,\n      step: state.step,\n    }\n  } else if (action.type === 'reset') {\n    return {\n      count: 0,\n      step: state.step,\n    }\n  } else if (action.type === 'updateStep') {\n    return {\n      count: state.count,\n      step: action.step,\n    }\n  } else {\n    throw new Error(`This action type isn't supported.`)\n  }\n}\n\nWith that, we see another subtle but powerful benefit of useReducer you might have missed. Because the reducer function is passed the current state as the first argument, it's simple to update one piece of state based on another piece of state. In fact, I'd go as far as to say whenever updating one piece of state depends on the value of another piece of state, reach for useReducer. In our example, we can see this in how we're updating count based on the value of step.\n\nAt this point, we've seen both how useReducer works and some of the advantages it gives us. Now, let's dive a little deeper into those advantages and answer the question you've most likely been asking.\n\nuseState vs useReducer\n\nFundamentally, useState and useReducer accomplish the same thing - they both allow us to add state to function components. Now the question becomes, when should you use one over the other?\n\nDeclarative state updates\n\nImagine we were creating a component that was responsible for handling the registration flow for our app. In this app, we need to collect three pieces of information from the user - their username, email, and password. For UX purposes, we'll also need a few other pieces of state, loading, error, and registered. Using useState, here's one approach for how we'd accomplish this.\n\nfunction Register() {\n  const [username, setUsername] = React.useState('')\n  const [email, setEmail] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const [loading, setLoading] = React.useState(false)\n  const [error, setError] = React.useState('')\n  const [registered, setRegistered] = React.useState(false)\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n\n    setLoading(true)\n    setError('')\n\n\n    newUser({username, email, password})\n      .then(() => {\n        setLoading(false)\n        setError('')\n        setRegistered(true)\n      }).catch((error) => {\n        setLoading(false)\n        setError(error)\n      })\n  }\n\n\n  if (registered === true) {\n    return <Redirect to='/dashboard' />\n  }\n\n\n  if (loading === true) {\n    return <Loading />\n  }\n\n\n  return (\n    <React.Fragment>\n      {error && <p>{error}</p>}\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='email'\n          onChange={(e) => setEmail(e.target.value)}\n          value={email}\n        />\n        <input\n          type='text'\n          placeholder='username'\n          onChange={(e) => setUsername(e.target.value)}\n          value={username}\n        />\n        <input\n          placeholder='password'\n          onChange={(e) => setPassword(e.target.value)}\n          value={password}\n          type='password'\n        />\n        <button type='submit'>Submit</button>\n      </form>\n    </React.Fragment>\n  )\n}\n\nFirst, there's nothing wrong with this code. It works just fine. However, it's a pretty imperative approach to solving the problem. We're conforming to the operational model of the machine by describing how we want to accomplish the task. Instead, what if we took a more declarative approach? Instead of describing how we want to accomplish the task, let's describe what we're trying to accomplish. This declarative approach will allow us to conform closer to the mental model of the developer. To accomplish this, we can leverage useReducer.\n\nThe reason useReducer can be more declarative is because it allows us to map actions to state transitions. This means, instead of having a collection of setX invocations, we can simply dispatch the action type that occurred. Then our reducer can encapsulate the imperative, instructional code.\n\nTo see what this looks like, let's assume we've already set up our registerReducer and we're updating our handleSubmit function we saw above.\n\nconst handleSubmit = (e) => {\n  e.preventDefault()\n\n\n  dispatch({ type: 'login' })\n\n\n  newUser({username, email, password})\n    .then(() => dispatch({ type: 'success' }))\n    .catch((error) => dispatch({\n      type: 'error',\n      error\n    }))\n}\n\nNotice that we're describing what we want to do - login. Then, based on that result, success or error.\n\nHere's what all of the code now looks like, including our new registerReducer.\n\nfunction registerReducer(state, action) {\n  if (action.type === 'login') {\n    return {\n      ...state,\n      loading: true,\n      error: ''\n    }\n  } else if (action.type === 'success') {\n    return {\n      ...state,\n      loading: false,\n      error: '',\n      registered: true\n    }\n  } else if (action.type === 'error') {\n    return {\n      ...state,\n      loading: false,\n      error: action.error,\n    }\n  } else if (action.type === 'input') {\n    return {\n      ...state,\n      [action.name]: action.value\n    }\n  } else {\n    throw new Error(`This action type isn't supported.`)\n  }\n}\n\n\nconst initialState = {\n  username: '',\n  email: '',\n  password: '',\n  loading: false,\n  error: '',\n  registered: false\n}\n\n\nfunction Register() {\n  const [state, dispatch] = React.useReducer(\n    registerReducer,\n    initialState\n  )\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n\n    dispatch({ type: 'login' })\n\n\n    newUser({\n      username: state.username,\n      email: state.email,\n      password: state.password\n    })\n    .then(() => dispatch({ type: 'success' }))\n    .catch((error) => dispatch({\n      type: 'error',\n      error\n    }))\n  }\n\n\n  if (state.registered === true) {\n    return <Redirect to='/dashboard' />\n  }\n\n\n  if (state.loading === true) {\n    return <Loading />\n  }\n\n\n  return (\n    <React.Fragment>\n      {state.error && <p>{state.error}</p>}\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='email'\n          onChange={(e) => dispatch({\n            type: 'input',\n            name: 'email',\n            value: e.target.value,\n          })}\n          value={state.email}\n        />\n        <input\n          type='text'\n          placeholder='username'\n          onChange={(e) => dispatch({\n            type: 'input',\n            name: 'username',\n            value: e.target.value,\n          })}\n          value={state.username}\n        />\n        <input\n          placeholder='password'\n          onChange={(e) => dispatch({\n            type: 'input',\n            name: 'password',\n            value: e.target.value,\n          })}\n          value={state.password}\n          type='password'\n        />\n        <button type='submit'>Submit</button>\n      </form>\n    </React.Fragment>\n  )\n}\nUpdate state based on another piece of state\n\nWe've already seen this one in action. From earlier, \"because the reducer function is passed the current state as the first argument, it's simple to update one piece of state based on another piece of state. In fact, I'd go as far as to say whenever updating one piece of state depends on the value of another piece of state, reach for useReducer.\"\n\nWe'll see another example of why this holds true in the next section.\n\nMinimize Dependency Array\n\nPart of mastering the useEffect Hook is learning how to properly manage its second argument, the dependency array.\n\nReact.useEffect(() => {\n  // side effect\n}, [/* dependency array */])\n\nLeave it off and you could run into an infinite loop scenario. Forget to add values your effect depends on and you'll have stale data. Add too many values and your effect won't be re-invoked when it needs to be.\n\nIt may come as a surprise, but useReducer is one strategy for improving the management of the dependency array. The reason for this goes back to what we've mentioned a few times now, useReducer allows you to decouple how the state is updated from the action that triggered the update. In practical terms, because of this decoupling, you can exclude values from the dependency array since the effect only dispatches the type of action that occurred and doesn't rely on any of the state values (which are encapsulated inside of the reducer). That was a lot of words, here's some code.\n\nReact.useEffect(() => {\n  setCount(count + 1)\n}, [count])\nReact.useEffect(() => {\n  dispatch({\n    type: 'increment'\n  })\n}, [])\n\nIn the second code block, we can remove count from the dependency array since we're not using it inside of the effect. When is this useful? Take a look at this code. Notice anything wrong?\n\nReact.useEffect(() => {\n  const id = window.setInterval(() => {\n    setCount(count + 1)\n  }, 1000)\n\n\n  return () => window.clearInterval(id)\n}, [count])\n\nEvery time count changes (which is every second) our old interval is going to be cleared and a new interval is going to be set up. That's not ideal.\n\nInstead, we want the interval to be set up one time and left alone until the component is removed from the DOM. To do this, we have to pass an empty array as the second argument to useEffect. Again, useReducer to the rescue.\n\nReact.useEffect(() => {\n  const id = window.setInterval(() => {\n    dispatch({ type: 'increment' })\n  }, 1000)\n\n\n  return () => window.clearInterval(id)\n}, [])\n\nWe no longer need to access count inside of our effect since it's encapsulated in the reducer. This allows us to remove it from the dependency array.\n\nNow for the record, there is one way to fix the code above without useReducer. You may remember that you can pass a function to the updater function useState gives you. When you do this, that function will be passed the current state value. We can utilize this to clear out our dependency array without having to use useReducer.\n\nReact.useEffect(() => {\n  const id = window.setInterval(() => {\n    setCount((count) => count + 1)\n  }, 1000)\n\n\n  return () => window.clearInterval(id)\n}, [])\n\nThis works fine, but there is one use case where it starts to fall apart. If you'll remember back to our Counter component earlier, the final piece of functionality we added was the ability for the user to control the step via a Slider component. Here's the workable code as a refresher. Once we added step, count was then updated based on that step state. This is the use case where our code above starts to fall apart. By updating count based on step, we've introduced a new value into our effect which we have to add to our dependency array.\n\nReact.useEffect(() => {\n  const id = window.setInterval(() => {\n    setCount((count) => count + step)\n  }, 1000)\n\n\n  return () => window.clearInterval(id)\n}, [step])\n\nNow we're right back to where we started. Anytime step changes, our old interval is going to be cleared and a new interval is going to be set up. Again, not ideal. Luckily for us, the solution is the same, useReducer.\n\nReact.useEffect(() => {\n  const id = window.setInterval(() => {\n    dispatch({ type: 'increment' })\n  }, 1000)\n\n\n  return () => window.clearInterval(id)\n}, [])\n\nNotice the code is still the exact same as we saw earlier. Encapsulated inside of the increment action is the logic for count + step. Again, since we don't need any state values to describe what happened, we can clear everything from our dependency array.\n\nSummary\n\nuseState and useReducer both allow you to add state to function components. useReducer offers a bit more flexibility since it allows you to decouple how the state is updated from the action that triggered the update - typically leading to more declarative state updates.\n\nIf different pieces of state update independently from one another (hovering, selected, etc.), useState should work fine. If your state tends to be updated together or if updating one piece of state is based on another piece of state, go with useReducer.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-hooks course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nQuery Strings with React Router v5\nTyler McGinnis\nUpdated November 3, 2020\n1 minute read\nCheck your version\nThis post assumes you're using React Router v5. If not, find your version below.\nReact Router v4\nReact Router v6\n\nWhen you're building for the web, sometimes you need to pass information via the URL. To do this, you can use a query string.\n\nYou've probably seen them before IRL. Here's an example from Twitter's analytics page.\n\nThis URL has three route parameters and two query strings. Twitter is using query strings to tell its route to filter the Tweets by top (most popular) and that the origin was im (which I'm not sure what that means, TBH).\n\nWith that said, odds are you're not here to learn what query strings are but instead how to use them with React Router v5. The good news is that if you're already comfortable with React Router v5, there are just a few small details you need to know.\n\nLet's say we were Twitter and we were building the Route for the URL above. It would probably look something like this.\n\nconst { path } = useRouteMatch();\n\n\nreturn (\n  <Route path={`${path}/tweets`}>\n    <Tweets />\n  </Route>\n);\n\nNotice at this point there's nothing new. We don't account for the query string when we create the Route. Instead, we parse them inside the component that is being rendered when that path matches - in this case, Tweets.\n\nNow the question becomes, how do we actually do this?\n\nAs of React Router v5.1, React Router comes with a custom useLocation Hook. useLocation returns a location object which has a search property whose value is the query string.\n\nconst { search } = useLocation();\nconsole.log(search); // \"?filter=top&origin=im\"\n\nCool, but this is the literal query string. You'll need to somehow parse it before you can get the actual values.\n\nYou may be surprised to hear that React Router v5 doesn't come with built-in support for parsing query strings. The reason for this is because, over the years, there have been many requests to support different implementations. With that, the team decided it would be best for users to decide what the implementation looks like rather than baking in a \"one size fits all\" solution. Regardless, what that means is that you'll need to bring your own query-string parser.\n\nThere are two common solutions. Either use a browser API (that may not be supported by all the browsers you need) or use an external library for parsing the query string. The library I typically use is the query-string library on NPM.\n\nWith that library installed, all we need to do is call queryString.parse, passing it location.search. That will parse the query string into an object which we can then grab the values off of.\n\nimport queryString from 'query-string'\nimport { useLocation } from 'react-router-dom'\n\n\n...\n\n\nconst { search } = useLocation()\nconst values = queryString.parse(search)\nconsole.log(values.filter) // \"top\"\nconsole.log(values.origin) // \"im\"\n\nThat's it. Go parse those query strings.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nHow to Prevent Transitions with React Router\nTyler McGinnis\nUpdated September 10, 2021\n1 minute read\nCheck your version\nThis post assumes you're using React Router v6. If not, find your version below.\nReact Router v4\nReact Router v5\n\nAs of today, React Router v6 doesn't ship with support for preventing transitions. Once this issue is resolved, we'll update this post with the recommended way to prevent transitions in your app.\n\nFor now, here's a very hacky not \"approved\" approach that \"works\".\n\nimport * as React from \"react\";\nimport { UNSAFE_NavigationContext as NavigationContext } from \"react-router-dom\";\n\n\nexport function useBlocker(blocker, when = true) {\n  const { navigator } = React.useContext(NavigationContext);\n\n\n  React.useEffect(() => {\n    if (!when) return;\n\n\n    const unblock = navigator.block((tx) => {\n      const autoUnblockingTx = {\n        ...tx,\n        retry() {\n          unblock();\n          tx.retry();\n        },\n      };\n\n\n      blocker(autoUnblockingTx);\n    });\n\n\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n\n\nexport default function usePrompt(message, when = true) {\n  const blocker = React.useCallback(\n    (tx) => {\n      if (window.confirm(message)) tx.retry();\n    },\n    [message]\n  );\n\n\n  useBlocker(blocker, when);\n}\n\nNow you can usePrompt in your app. usePrompt receives two arguments – when and message. when is a boolean that if true, will show the user a prompt with the message when they try to navigate away.\n\nfunction Form() {\n  const [name, setName] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [note, setNote] = React.useState(\"\");\n\n\n  const isDirty = () => {\n    return name.length > 0 || email.length > 0 || note.length > 0;\n  };\n\n\n  usePrompt(\"Are you sure you want to leave?\", isDirty());\n\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        alert(\"Submitted!\");\n        setName(\"\");\n        setEmail(\"\");\n        setNote(\"\");\n      }}\n    >\n      ...\n    </form>\n  );\n}\n\nHere's a Codesandbox with the above implementation.\n\nWant to learn more?\nIf you liked this post and want to learn more, check out our free Comprehensive Guide to React Router.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,570 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,570 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nHow to get the current URL in JavaScript\nTyler McGinnis\nUpdated February 10, 2022\n1 minute read\nNo Time to Read - Copy/Paste Solution\nfunction getCurrentURL () {\n  return window.location.href\n}\n\n\n// Example\nconst url = getCurrentURL()\n\n\nurl // https://ui.dev/get-current-url-javascript/\n\nSimple enough. If you're using JavaScript in the browser you can get the full current URL by using window.location.href. I think it's also worth noting that window.location has a bunch of different properties on it that may be of use to you as well.\n\nLet's assume this is the current URL we're on\n\nhttps://ui.dev/get-current-url-javascript/?comments=false\n\nThese are all the properties that window.location gives us.\n\nconst {\n  host, hostname, href, origin, pathname, port, protocol, search\n} = window.location\n\n\nhost // \"ui.dev\"\nhostname // \"ui\"\nhref // \"https://ui.dev/get-current-url-javascript/?comments=false\"\norigin // \"https://ui.dev\"\npathname // \"/get-current-url-javascript/\"\"\nport // \"\"\nprotocol // \"https:\"\nsearch // \"?comments=false\"\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nPreventing transitions with React Router v5\nTyler McGinnis\nUpdated November 17, 2020\n2 minute read\nCheck your version\nThis post assumes you're using React Router v5. If not, find your version below.\nReact Router v4\nReact Router v6\n\nRespecting your user's input is not only a solid business decision, but it also shows you care about little UX details. One of the most frustrating experiences a user can have is when they spend time inputting data into your app, accidentally hit a hotkey to navigate away from the current route, then have to restart the form all over. There are a few different approaches to fixing this bad UX but in this post, we'll focus on how React Router v5 can help by warning before a route transition.\n\nBefore we can see how it's done, we'll need the basic skeleton of an app. Our app will be pretty straight forward. It will have a few different routes - one of which will render a form.\n\nimport * as React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nfunction Form() {\n  return <form></form>;\n}\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Form</Link>\n          </li>\n          <li>\n            <Link to=\"/one\">One</Link>\n          </li>\n          <li>\n            <Link to=\"/two\">Two</Link>\n          </li>\n        </ul>\n\n\n        <Route path=\"/\" exact>\n          <Form />\n        </Route>\n        <Route path=\"/one\">\n          <h3>One</h3>\n        </Route>\n        <Route path=\"/two\">\n          <h3>Two</h3>\n        </Route>\n      </div>\n    </Router>\n  );\n}\n\nNow the goal is to make it so if the form is \"dirty\" and the user tries to navigate away, we verify that's what they're really trying to do.\n\nWhat I love about React Router v5 is its dedication to declarative, \"React like\" code. The fundamental aspect of React is user event -> state change -> re-render. With that in mind, it would make sense that the \"React way\" of preventing transitions follows that same paradigm - a declarative component we can render (or not) based off of the component's state.\n\nFirst, as mentioned, let's add some state to the Form component. The goal here is to have some state which knows if the form is \"dirty\" (meaning the length of the value in the input field is > 0).\n\nfunction Form() {\n  const [isBlocking, setIsBlocking] = React.useState(false);\n\n\n  return (\n    <form>\n      <p>\n        Blocking? {isBlocking ? \"Yes, click a link or the back button\" : \"Nope\"}\n      </p>\n\n\n      <p>\n        <input\n          size=\"50\"\n          placeholder=\"type something to block transitions\"\n          onChange={(event) => setIsBlocking(event.target.value.length > 0)}\n        />\n      </p>\n    </form>\n  );\n}\n\nNow we have a property on our state, isBlocking, which tells us if we should warn the user before they transition away from the current route.\n\nNext, we need to actually make it so the user is prompted if they try to navigate away and isBlocking is true. Conveniently, React Router v5 comes with a Prompt component that serves this exact purpose. It takes in two props - when and message. when needs to be a boolean that when true, will show the user a prompt with the message prop when they try to navigate away.\n\nWe've already added an isBlocking property to our state, so we can pass that to Prompts when prop.\n\n...\n\n\nimport {\n  Prompt,\n} from 'react-router-dom'\n\n\n...\n\n\nfunction Form () {\n  const [isBlocking, setIsBlocking] = React.useState(false)\n\n\n  return (\n    <form>\n      <Prompt\n        when={isBlocking}\n        message={(location) => `Are you sure you want to go to ${location.pathname}`}\n      />\n\n\n      <p>\n        Blocking? {\n          isBlocking\n            ? 'Yes, click a link or the back button'\n            : 'Nope'\n          }\n      </p>\n\n\n      <p>\n        <input\n          size=\"50\"\n          placeholder=\"type something to block transitions\"\n          onChange={(event) => setIsBlocking(\n            event.target.value.length > 0\n          )}\n        />\n      </p>\n    </form>\n  )\n}\n\nNow if the input field if \"dirty\", the Prompt component will warn the user if they try to navigate away from the current route.\n\nLastly, let's finish the example by actually adding a button to our form and resetting isBlocking when the form is submitted.\n\nfunction Form() {\n  const [isBlocking, setIsBlocking] = React.useState(false);\n\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        e.target.reset();\n        setIsBlocking(false);\n      }}\n    >\n      <Prompt\n        when={isBlocking}\n        message={(location) =>\n          `Are you sure you want to go to ${location.pathname}`\n        }\n      />\n\n\n      <p>\n        Blocking? {isBlocking ? \"Yes, click a link or the back button\" : \"Nope\"}\n      </p>\n\n\n      <input\n        size=\"50\"\n        placeholder=\"type something to block transitions\"\n        onChange={(event) => setIsBlocking(event.target.value.length > 0)}\n      />\n\n\n      <br />\n\n\n      <button type=\"submit\">Submit to stop blocking</button>\n    </form>\n  );\n}\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nPass props to React Router v5's Link component\nTyler McGinnis\nUpdated November 6, 2020\n1 minute read\nCheck your version\nThis post assumes you're using React Router v5. If not, find your version below.\nReact Router v4\nReact Router v6\n\nWhen building an app with React Router v5, sometimes you'll need to pass props through the Link component to the new route. In this post, we'll break down how that process works.\n\nThere are two different ways to pass data from the Link component through to the new route. The first is through URL Parameters and the second is through state.\n\nFirst, let's take a look at URL parameters. If you've read our URL Parameters post, you'll be familiar with this example. Say we were in charge of building out the Route that renders Twitter's profile page. If created with React Router v5, that Route would probably look something like this.\n\n<Route path=\"/:handle\">\n  <Profile />\n</Route>\n\nNotice that handle has a : in front of it, that's because it's going to be dynamic. It could be anything from tylermcginnis or dan_abramov to realDonaldTrump.\n\nSo in our app, we may have a Link component that looks like this.\n\n<Link to=\"/tylermcginnis\">Tyler McGinnis</Link>\n\nIf clicked, the user would be taken to /tylermcginnis and the Profile component would be rendered. Profile would be able to access the dynamic URL parameter (tylermcginnis) by using the useParams custom Hook.\n\nfunction Profile () {\n  const { handle } = useParams()\n  const [user, setUser] = React.useState(null)\n\n\n  React.useEffect(() => {\n    fetch(`https://api.twitter.com/user/${handle}`)\n      .then(setUser)\n  }, [handle])\n\n\n  return (\n    ...\n  )\n}\n\nURL parameters are great, but they're not meant to serve as a way to get data from one route to another as they're limited to just strings. What if instead of just a string, we wanted to pass along something a little more complex, like an object or an array? There would be no way to do that with URL parameters. This brings us to the second way to pass data from one route to another and that's with state.\n\nGoing back to our Twitter example from earlier, what if we wanted to pass along if the user is coming from a certain route? For example, say we wanted to know if the user is coming from the /notifications route when they click on the Link. To do this, instead of passing to as a string to Link, we can pass it an object with a pathname and a state property.\n\n<Link\n  to={{\n    pathname: \"/tylermcginnis\",\n    state: {\n      fromNotifications: true,\n    },\n  }}\n>\n  Tyler McGinnis\n</Link>\n\nNow the question becomes, how does the component that's being rendered when the user goes to /tylermcginnis get access to the fromNotifications property? Anytime you pass data along via the state property, that data will be available on location.state which you can get access to by using the custom useLocation Hook that comes with React Router v5.\n\nfunction Profile () {\n  const { handle } = useParams()\n  const location = useLocation()\n  const { fromNotifications } = location.state\n  const [user, setUser] = React.useState(null)\n\n\n  React.useEffect(() => {\n    fetch(`https://api.twitter.com/user/${handle}`)\n      .then(setUser)\n  }, [handle])\n\n\n  return (\n    ...\n  )\n}\n\nTo recap, there are two ways to pass data from a Link through to the new route: URL parameters and state. URL parameters work great for strings, but aren't meant for any other data types. By making the Links to prop an object, you can pass along any sort of data you need under the state property and that data can be accessed via location.state using the custom useLocation Hook.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,561 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,561 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nCustomizing your own Link component in React Router v5\nTyler McGinnis\nUpdated November 12, 2020\n2 minute read\nCheck your version\nThis post assumes you're using React Router v5. If not, find your version below.\nReact Router v4\nReact Router v6\n\nThe most important thing to understand about React Router v5 is how composable it is. React Router doesn't give you a house - it gives you some nails, screws, plywood, and a hammer while trusting that you can do the rest. A more technical way to say that is React Router v5 gives you the routing primitives upon which you can build your app. This concept really shines in the example we're going to build.\n\nWhat we want to do is create our own \"old school\" navbar. Basically what that means is we'll add a \">\" to the front of whatever Link is active. If our two routes were / and /about, the two states of our navbar would look like this\n\n> Home\nAbout\nHome\n> About\n\nFirst, the easy part. Let's build the skeleton of the app by building out our Routes and the components we'll be rendering, Home and About.\n\nimport * as React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nconst Home = () => <h2>Home</h2>;\nconst About = () => <h2>About</h2>;\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        {/* Links */}\n\n\n        <hr />\n\n\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n      </div>\n    </Router>\n  );\n}\n\nBeautiful. Now we need to implement our custom Link component - we'll call it OldSchoolMenuLink. The goal is to make the code below work properly. Notice it's the OldSchoolMenuLink that will be in charge of adding and removing the > but its API is the same as Link.\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <OldSchoolMenuLink exact={true} to=\"/\">\n          Home\n        </OldSchoolMenuLink>\n        <OldSchoolMenuLink to=\"/about\">About</OldSchoolMenuLink>\n\n\n        <hr />\n\n\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n      </div>\n    </Router>\n  );\n}\n\nFirst, let's do the easy part. We know what props OldSchoolMenuLink is going to be taking in, so we can build out the skeleton of the component.\n\nfunction OldSchoolMenuLink({ children, to, exact }) {}\n\nNow the main question is, what is it going to render? Remember, the whole point of this component is to make this navbar UI work (based on the active route)\n\n> Home\n> About\nHome\n\n\n> About\n\nWith that said, we know we're going to render a Link and if the app's current location matches the Links path, we'll pre-pend it with a >.\n\nNow the next question naturally becomes, how do we find out if the \"app's current location matches the Link's path\"? Here's one approach. We know the Links path because we're passing it in as the to prop. We also know the app's location because we can use window.location.pathname. With that said, we might implement OldSchoolMenuLink like this.\n\nfunction OldSchoolMenuLink({ children, to, exact }) {\n  const match = window.location.pathname === to;\n\n\n  return (\n    <div className={match ? \"active\" : \"\"}>\n      {match ? \"> \" : \"\"}\n      <Link to={to}>{children}</Link>\n    </div>\n  );\n}\n\nWell, this seems to work. The problem is it's not really the React or React Router way of doing things. It also feels weird to reach out to the window object to get the app's location. There's a better way and it involves a tool that we already have at our disposal, React Router's useRouteMatch custom Hook.\n\nuseRouteMatch gives you information on how (or if) the Route matched. Typically you invoke it with no arguments to get the app's current path and url. In our case, instead of just getting the current path and url, we want to customize it to see if the app's path matches OldSchoolMenuLink's to prop. If it does we want to pre-pend > and if it doesn't we won't. To tell useRouteMatch what we want to match for, we can pass it an object with a path prop and an exact prop.\n\nfunction OldSchoolMenuLink({ children, to, exact }) {\n  const match = useRouteMatch({\n    exact,\n    path: to,\n  });\n\n\n  return (\n    <div className={match ? \"active\" : \"\"}>\n      {match ? \"> \" : \"\"}\n      <Link to={to}>{children}</Link>\n    </div>\n  );\n}\n\nJust like that, we've created our own Link component and used React Router's useRouteMatch custom Hook to do some path checking for us.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nCreating a Central Route Config with React Router\nTyler McGinnis\nUpdated September 10, 2021\n1 minute read\nCheck your version\nThis post assumes you're using React Router v6. If not, find your version below.\nReact Router v4\nReact Router v5\n\nReact Router has gone through a few different iterations over the years. Though the current API (v6) takes a declarative, component-based, <Route /> as you go approach – this hasn't always been the case.\n\nIn fact, in the first versions of React Router (v1-v3), instead of composing your Routes as you do now throughout your application, you'd declare them up front in a central route config then pass that to ReactDOM.render.\n\nconst routes = (\n  <Router>\n    <Route path=\"/\" component={Main}>\n      <IndexRoute component={Home} />\n      <Route path=\"battle\" component={ConfirmBattle} />\n      <Route path=\"results\" component={Results} />\n    </Route>\n  </Router>\n);\n\n\nReactDOM.render(routes, document.getElementById(\"app\"));\n\nThough React Router has moved away from this central route config approach, it still had its benefits. Namely, when server rendering or doing static analysis.\n\nThe good news is, as of v6, React Router now comes with a useRoutes Hook that makes collocating your routes into a central route config not only possible, but simple with a first class API as well.\n\nSay we had the following paths in our application.\n\n/\n/invoices\n  :id\n  pending\n  complete\n/users\n  :id\n  settings\n\nTypically if you wanted to map those paths to different React components, you'd render something like this.\n\nreturn (\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    <Route path=\"/invoices\" element={<Invoices />}>\n      <Route path=\":id\" element={<Invoice />} />\n      <Route path=\"pending\" element={<Pending />} />\n      <Route path=\"complete\" element={<Complete />} />\n    </Route>\n    <Route path=\"/users/*\" element={<Users />} />\n  </Routes>\n);\n\nNotice that we're rendering the nested routes for invoices/:id, invoices/pending, and invoices/complete here but the nested routes for /users/:id and /users/settings are going to be rendered inside the Users component.\n\nNow what useRoutes allows us to do is, instead of declaring our routes using React elements, we can do it using JavaScript objects all in one location.\n\nuseRoutes takes in an array of JavaScript objects which represent the routes in your application. Similar to the React element API with <Route>, each route has a path, element, and an optional children property.\n\nimport { useRoutes } from \"react-router-dom\";\n\n\nconst routes = useRoutes([\n  { path: \"/\", element: <Home /> },\n  {\n    path: \"/invoices\",\n    element: <Invoices />,\n    children: [\n      { path: \":id\", element: <Invoice /> },\n      { path: \"/pending\", element: <Pending /> },\n      { path: \"/complete\", element: <Complete /> },\n    ],\n  },\n  {\n    path: \"/users\",\n    element: <Users />,\n    children: [\n      { path: \":id\", element: <Profile /> },\n      { path: \"/settings\", element: <Settings /> },\n    ],\n  },\n]);\n\n\nexport default function App() {\n  return (\n    <div>\n      <Navbar />\n      {routes}\n    </div>\n  );\n}\n\nWhat makes useRoutes even more interesting is how React Router uses it internally. In fact, when you use the React element API to create your Routes, it's really just a wrapper around useRoutes.\n\nWant to learn more?\nIf you liked this post and want to learn more, check out our free Comprehensive Guide to React Router.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,561 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,561 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Classic React course with code bnC2e .\n\nLOGIN\nIntroduction to props in React\nTyler McGinnis\nUpdated August 21, 2020\n1 minute read\n\nWhenever you have a system that is reliant upon composition, it's critical that each piece of that system has an interface for accepting data from outside of itself. You can see this clearly illustrated by looking at something you're already familiar with, functions.\n\nfunction getProfilePic (username) {\n  return 'https://photo.fb.com/' + username\n}\n\n\nfunction getProfileLink (username) {\n  return 'https://www.fb.com/' + username\n}\n\n\nfunction getAvatarInfo (username) {\n  return {\n    pic: getProfilePic(username),\n    link: getProfileLink(username)\n  }\n}\n\n\ngetAvatarInfo('tylermcginnis')\n\nWe've seen this code before as our very soft introduction to function composition. Without the ability to pass data, in this case username, to each of our of functions, our composition would break down.\n\nSimilarly, because React relies heavily on composition, there needs to exist a way to pass data into components. This brings us to our next important React concept, props.\n\nProps are to components what arguments are to functions.\n\nAgain, the same intuition you have about functions and passing arguments to functions can be directly applied to components and passing props to components.\n\nThere are two parts to understanding how props work. First is how to pass data into components, and second is accessing the data once it's been passed in.\n\nPassing data to a component\n\nThis one should feel natural because you've been doing something similar ever since you learned HTML. You pass data to a React component the same way you'd set an attribute on an HTML element.\n\n<img src='' />\n\n\n<Hello name='Tyler' />\n\nIn the example above, we're passing in a name prop to the Hello component.\n\nAccessing props\n\nNow the next question is, how do you access the props that are being passed to a component? In a class component, you can get access to props from the props key on the component's instance (this).\n\nclass Hello extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    )\n  }\n}\n\nEach prop that is passed to a component is added as a key on this.props. If no props are passed to a component, this.props will be an empty object.\n\nclass Hello extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.first} {this.props.last}</h1>\n    )\n  }\n}\n\n\n<Hello first='Tyler' last='McGinnis' />\n\nIt's important to note that we're not limited to what we can pass as props to components. Just like we can pass functions as arguments to other functions, we're also able to pass components (or really anything we want) as props to other components.\n\n<Profile\n  username='tylermcginnis'\n  authed={true}\n  logout={() => handleLogout()}\n  header={<h1>👋</h1>}\n/>\n\nIf you pass a prop without a value, that value will be set to true. These are equivalent.\n\n<Profile authed={true} />\n\n\n<Profile authed />\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our classic-react course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nmedia queries for common device breakpoints\nJustin Avery\nUpdated September 29, 2016\n2 minute read\n\nThe @media query is 1/3 of the recipe for responsive design. It is the key ingredient that, in its simplest form, allows specified CSS to be applied depending on the device and whether it matches the media query criteria.\n\nBefore you start copying and pasting below, read why you don't need device specific viewports. If you're looking for details on the iWatch we've got you covered with getting your website ready for apply watch.\n\n/* Smartphones (portrait and landscape) ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n  /* Styles */\n}\n\n\n/* Smartphones (landscape) ----------- */\n@media only screen and (min-width: 321px) {\n  /* Styles */\n}\n\n\n/* Smartphones (portrait) ----------- */\n@media only screen and (max-width: 320px) {\n  /* Styles */\n}\n\n\n/* iPads (portrait and landscape) ----------- */\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {\n  /* Styles */\n}\n\n\n/* iPads (landscape) ----------- */\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) {\n  /* Styles */\n}\n\n\n/* iPads (portrait) ----------- */\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {\n  /* Styles */\n}\n/**********\niPad 3\n**********/\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 2) {\n  /* Styles */\n}\n/* Desktops and laptops ----------- */\n@media only screen and (min-width: 1224px) {\n  /* Styles */\n}\n\n\n/* Large screens ----------- */\n@media only screen and (min-width: 1824px) {\n  /* Styles */\n}\n\n\n/* iPhone 4 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-width: 480px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 320px) and (max-device-width: 480px) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n/* iPhone 5 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n/* iPhone 6, 7, 8 ----------- */\n@media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n/* iPhone 6+, 7+, 8+ ----------- */\n@media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n/* iPhone X ----------- */\n@media only screen and (min-device-width: 375px) and (max-device-height: 812px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 375px) and (max-device-height: 812px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\n\n\n/* iPhone XS Max, XR ----------- */\n@media only screen and (min-device-width: 414px) and (max-device-height: 896px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 414px) and (max-device-height: 896px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\n\n\n/* Samsung Galaxy S3 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2) {\n  /* Styles */\n}\n\n\n/* Samsung Galaxy S4 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\n\n\n/* Samsung Galaxy S5 ----------- */\n@media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\n\n\n@media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 3) {\n  /* Styles */\n}\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Advanced Javascript course with code bnC2e .\n\nLOGIN\nJavaScript Inheritance and the Prototype Chain\nTyler McGinnis\nUpdated November 27, 2018\n8 minute read\n\nThis post is designed to be read after you read JavaScript Private and Public Class Fields.\n\nPreviously we learned how to create an Animal class both in ES5 as well as in ES6. We also learned how to share methods across those classes using JavaScript's prototype. To review, here's the code we saw in an earlier post.\n\nfunction Animal (name, energy) {\n  this.name = name\n  this.energy = energy\n}\n\n\nAnimal.prototype.eat = function (amount) {\n  console.log(`${this.name} is eating.`)\n  this.energy += amount\n}\n\n\nAnimal.prototype.sleep = function (length) {\n  console.log(`${this.name} is sleeping.`)\n  this.energy += length\n}\n\n\nAnimal.prototype.play = function (length) {\n  console.log(`${this.name} is playing.`)\n  this.energy -= length\n}\n\n\nconst leo = new Animal('Leo', 7)\nclass Animal {\n  constructor(name, energy) {\n    this.name = name\n    this.energy = energy\n  }\n  eat(amount) {\n    console.log(`${this.name} is eating.`)\n    this.energy += amount\n  }\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`)\n    this.energy += length\n  }\n  play(length) {\n    console.log(`${this.name} is playing.`)\n    this.energy -= length\n  }\n}\n\n\nconst leo = new Animal('Leo', 7)\n\nNow let's say we wanted to start making individual classes for specific animals. For example, what if we wanted to start making a bunch of dog instances. What properties and methods will these dogs have? Well, similar to our Animal class, we could give each dog a name, an energy level, and the ability to eat, sleep, and play. Unique to our Dog class, we could also give them a breed property as well as the ability to bark. In ES5, our Dog class could look something like this\n\nfunction Dog (name, energy, breed) {\n  this.name = name\n  this.energy = energy\n  this.breed = breed\n}\n\n\nDog.prototype.eat = function (amount) {\n  console.log(`${this.name} is eating.`)\n  this.energy += amount\n}\n\n\nDog.prototype.sleep = function (length) {\n  console.log(`${this.name} is sleeping.`)\n  this.energy += length\n}\n\n\nDog.prototype.play = function (length) {\n  console.log(`${this.name} is playing.`)\n  this.energy -= length\n}\n\n\nDog.prototype.bark = function () {\n  console.log('Woof-Woof!')\n  this.energy -= .1\n}\n\n\nconst charlie = new Dog('Charlie', 10, 'Goldendoodle')\n\nAlright, well... we just recreated the Animal class and added a few new properties to it. If we wanted to create another animal, say a Cat, at this point we'd again have to create a Cat class, duplicate all the common logic located in the Animal class to it, then add on Cat specific properties just like we did with the Dog class. In fact, we'd have to do this for each different type of animal we created.\n\nfunction Dog (name, energy, breed) {}\n\n\nfunction Cat (name, energy, declawed) {}\n\n\nfunction Giraffe (name, energy, height) {}\n\n\nfunction Monkey (name, energy, domesticated) {}\n\nThis work, but it seems wasteful. The Animal class is the perfect base class. What that means is that it has all the properties that each one of our animals has in common. Whether we're creating a dog, cat, giraffe, or monkey, all of them will have a name, energy level, and the ability to eat, sleep, and play. With that said, is there a way we can utilize the Animal class whenever we create the individual classes for each different animal? Let's try it out. I'll paste the Animal class again below for easy reference.\n\nfunction Animal (name, energy) {\n  this.name = name\n  this.energy = energy\n}\n\n\nAnimal.prototype.eat = function (amount) {\n  console.log(`${this.name} is eating.`)\n  this.energy += amount\n}\n\n\nAnimal.prototype.sleep = function (length) {\n  console.log(`${this.name} is sleeping.`)\n  this.energy += length\n}\n\n\nAnimal.prototype.play = function (length) {\n  console.log(`${this.name} is playing.`)\n  this.energy -= length\n}\n\n\nfunction Dog (name, energy, breed) {\n\n\n}\n\nWhat are some things we know about the Dog constructor function above?\n\nFirst, we know it takes 3 arguments, name, energy, and breed.\n\nSecond, we know it's going to be called with the new keyword so we'll have a this object.\n\nAnd third, we know we need to utilize the Animal function so that any instance of dog will have a name, energy level, and be able to eat, sleep, and play.\n\nIt's the third one that's the tricky one. The way you \"utilize\" a function is by calling it. So we know that inside of Dog, we want to call Animal. What we need to figure out though is how we can invoke Animal in the context of Dog. What that means it that we want to call Animal with the this keyword from Dog. If we do that correctly, then this inside of the Dog function will have all the properties of Animal (name, energy). If you remember from a previous section, every function in JavaScript has a .call method on it.\n\n.call is a method on every function that allows you to invoke the function specifying in what context the function will be invoked.\n\nThis sounds like exactly what we need. We want to invoke Animal in the context of Dog.\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nconst charlie = new Dog('Charlie', 10, 'Goldendoodle')\n\n\ncharlie.name // Charlie\ncharlie.energy // 10\ncharlie.breed // Goldendoodle\n\nSolid, we're half-way there. You'll notice in the code above that because of this line Animal.call(this, name, energy), every instance of Dog will now have a name and energy property. Again, the reason for that is because it's as if we ran the Animal function with the this keyword generated from Dog. Then after we added a name and energy property to this, we also added a breed property just as we normally would.\n\nRemember the goal here is to have each instance of Dog have not only all the properties of Animal, but also all the methods as well. If you run the code above, you'll notice that if you try to run charlie.eat(10) you'll get an error. Currently every instance of Dog will have the properties of Animal (name and energy), but we haven't done anything to make sure that they also have the methods (play, eat, sleep).\n\nLet's think about how we can solve this. We know that all the Animal's methods are located on Animal.prototype. What that means is we somehow want to make sure that all instances of Dog will have access to the methods on Animal.prototype. What if we used our good friend Object.create here? If you'll remember, Object.create allows you to create an object which will delegate to another object on failed lookups. So in our case, the object we want to create is going to be Dog's prototype and the object we want to delegate to on failed lookups is Animal.prototype.\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nDog.prototype = Object.create(Animal.prototype)\n\nNow, whenever there's a failed lookup on an instance of Dog, JavaScript will delegate that lookup to Animal.prototype. If this is still a little fuzzy, re-read A Beginner's Guide to JavaScript's Prototype where we talk all about Object.create and JavaScript's prototype.\n\nLet's look at the full code together then we'll walk through what happens.\n\nfunction Animal (name, energy) {\n  this.name = name\n  this.energy = energy\n}\n\n\nAnimal.prototype.eat = function (amount) {\n  console.log(`${this.name} is eating.`)\n  this.energy += amount\n}\n\n\nAnimal.prototype.sleep = function (length) {\n  console.log(`${this.name} is sleeping.`)\n  this.energy += length\n}\n\n\nAnimal.prototype.play = function (length) {\n  console.log(`${this.name} is playing.`)\n  this.energy -= length\n}\n\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nDog.prototype = Object.create(Animal.prototype)\n\nNow we've created our base class (Animal) as well as our subclass (Dog), let's see what it looks like under the hood when we create an instance of Dog.\n\nconst charlie = new Dog('Charlie', 10, 'Goldendoodle')\n\n\ncharlie.name // Charlie\ncharlie.energy // 10\ncharlie.breed // Goldendoodle\n\nNothing fancy so far, but let's look at what happens when we invoke a method located on Animal.\n\ncharlie.eat(10)\n\n\n/*\n1) JavaScript checks if charlie has an eat property - it doesn't.\n2) JavaScript then checks if Dog.prototype has an eat property\n    - it doesn't.\n3) JavaScript then checks if Animal.prototype has an eat property\n    - it does so it calls it.\n*/\n\nThe reason Dog.prototype gets checked is because when we created a new instance of Dog, we used the new keyword. Under the hood, the this object that was created for us delegates to Dog.prototype (seen in comments below).\n\nfunction Dog (name, energy, breed) {\n  // this = Object.create(Dog.prototype)\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n  // return this\n}\n\nThe reason Animal.prototype gets checked is because we overwrote Dog.prototype to delegate to Animal.prototype on failed lookups with this line\n\nDog.prototype = Object.create(Animal.prototype)\n\nNow one thing we haven't talked about is what if Dog has its own methods? Well, that's a simple solution. Just like with Animal, if we want to share a method across all instances of that class, we add it to the function's prototype.\n\n...\n\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nDog.prototype = Object.create(Animal.prototype)\n\n\nDog.prototype.bark = function () {\n  console.log('Woof Woof!')\n  this.energy -= .1\n}\n\n👌 very nice. There's just one small addition we need to make. If you remember back to the Beginner's Guide to JavaScript's Prototype post, we were able to get access to the instances' constructor function by using instance.constructor.\n\nfunction Animal (name, energy) {\n  this.name = name\n  this.energy = energy\n}\n\n\nconst leo = new Animal('Leo', 7)\nconsole.log(leo.constructor) // Logs the constructor function\n\nAs explained in the previous post, \"the reason this works is because any instances of Animal are going to delegate to Animal.prototype on failed lookups. So when you try to access leo.constructor, leo doesn't have a constructor property so it will delegate that lookup to Animal.prototype which indeed does have a constructor property.\"\n\nThe reason I bring this up is because in our implementation, we overwrote Dog.prototype with an object that delegates to Animal.prototype.\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nDog.prototype = Object.create(Animal.prototype)\n\n\nDog.prototype.bark = function () {\n  console.log('Woof Woof!')\n  this.energy -= .1\n}\n\nWhat that means is that now, any instances of Dog which log instance.constructor are going to get the Animal constructor rather than the Dog constructor. You can see for yourself by running this code -\n\nfunction Animal (name, energy) {\n  this.name = name\n  this.energy = energy\n}\n\n\nAnimal.prototype.eat = function (amount) {\n  console.log(`${this.name} is eating.`)\n  this.energy += amount\n}\n\n\nAnimal.prototype.sleep = function (length) {\n  console.log(`${this.name} is sleeping.`)\n  this.energy += length\n}\n\n\nAnimal.prototype.play = function (length) {\n  console.log(`${this.name} is playing.`)\n  this.energy -= length\n}\n\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nDog.prototype = Object.create(Animal.prototype)\n\n\nDog.prototype.bark = function () {\n  console.log('Woof Woof!')\n  this.energy -= .1\n}\n\n\nconst charlie = new Dog('Charlie', 10, 'Goldendoodle')\nconsole.log(charlie.constructor)\n\nNotice it gives you the Animal constructor even though charlie is a direct instance of Dog. Again, we can walk through what's happening here just like we did above.\n\nconst charlie = new Dog('Charlie', 10, 'Goldendoodle')\nconsole.log(charlie.constructor)\n\n\n/*\n1) JavaScript checks if charlie has a constructor property - it doesn't.\n2) JavaScript then checks if Dog.prototype has a constructor property\n    - it doesn't because it was deleted when we overwrote Dog.prototype.\n3) JavaScript then checks if Animal.prototype has a constructor property\n    - it does so it logs that.\n*/\n\nHow can we fix this? Well, it's pretty simple. We can just add the correct constructor property to Dog.prototype once we overwrite it.\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nDog.prototype = Object.create(Animal.prototype)\n\n\nDog.prototype.bark = function () {\n  console.log('Woof Woof!')\n  this.energy -= .1\n}\n\n\nDog.prototype.constructor = Dog\n\nAt this point if we wanted to make another subclass, say Cat, we'd follow the same pattern.\n\nfunction Cat (name, energy, declawed) {\n  Animal.call(this, name, energy)\n\n\n  this.declawed = declawed\n}\n\n\nCat.prototype = Object.create(Animal.prototype)\nCat.prototype.constructor = Cat\n\n\nCat.prototype.meow = function () {\n  console.log('Meow!')\n  this.energy -= .1\n}\n\nThis concept of having a base class with subclasses that delegate to it is called inheritance and it's a staple of Object Oriented Programming (OOP). If you're coming from a different programming language, odds are you're already familiar with OOP and inheritance. Before ES6 classes, in JavaScript, inheritance was quite the task as you can see above. You need to understand now only when to use inheritance, but also a nice mix of .call, Object.create, this, and FN.prototype - all pretty advanced JS topics. Let's see how we'd accomplish the same thing using ES6 classes though.\n\nFirst, let's review what it looks like to go from an ES5 \"class\" to an ES6 class using our Animal class.\n\nfunction Animal (name, energy) {\n  this.name = name\n  this.energy = energy\n}\n\n\nAnimal.prototype.eat = function (amount) {\n  console.log(`${this.name} is eating.`)\n  this.energy += amount\n}\n\n\nAnimal.prototype.sleep = function (length) {\n  console.log(`${this.name} is sleeping.`)\n  this.energy += length\n}\n\n\nAnimal.prototype.play = function (length) {\n  console.log(`${this.name} is playing.`)\n  this.energy -= length\n}\n\n\nconst leo = new Animal('Leo', 7)\nclass Animal {\n  constructor(name, energy) {\n    this.name = name\n    this.energy = energy\n  }\n  eat(amount) {\n    console.log(`${this.name} is eating.`)\n    this.energy += amount\n  }\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`)\n    this.energy += length\n  }\n  play(length) {\n    console.log(`${this.name} is playing.`)\n    this.energy -= length\n  }\n}\n\n\nconst leo = new Animal('Leo', 7)\n\nNow that we've refactored our Animal constructor function into an ES6 class, the next thing we need to do is figure out how to refactor our base class (Dog). The good news is it's much more intuitive. For reference, in ES5, here's what we had.\n\nfunction Dog (name, energy, breed) {\n  Animal.call(this, name, energy)\n\n\n  this.breed = breed\n}\n\n\nDog.prototype = Object.create(Animal.prototype)\n\n\nDog.prototype.bark = function () {\n  console.log('Woof Woof!')\n  this.energy -= .1\n}\n\n\nDog.prototype.constructor = Dog\n\nBefore we get into inheritance, let's refactor Dog to use an ES6 class as we learned in a previous post.\n\nclass Dog {\n  constructor(name, energy, breed) {\n    this.breed = breed\n  }\n  bark() {\n    console.log('Woof Woof!')\n    this.energy -= .1\n  }\n}\n\nLooks great. Now, let's figure out how to make sure that Dog inherits from Animal. The first step we need to make is a pretty straight forward one. With ES6 classes, you can extend a base class with this syntax\n\nclass Subclass extends Baseclass {}\n\nTranslated into our example, that would make our Dog class look like this\n\nclass Animal {\n  constructor(name, energy) {\n    this.name = name\n    this.energy = energy\n  }\n  eat(amount) {\n    console.log(`${this.name} is eating.`)\n    this.energy += amount\n  }\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`)\n    this.energy += length\n  }\n  play(length) {\n    console.log(`${this.name} is playing.`)\n    this.energy -= length\n  }\n}\n\n\nclass Dog extends Animal {\n  constructor(name, energy, breed) {\n    this.breed = breed\n  }\n  bark() {\n    console.log('Woof Woof!')\n    this.energy -= .1\n  }\n}\n\nIn ES5 in order to make sure that every instance of Dog had a name and an energy property, we used .call in order to invoke the Animal constructor function in the context of the Dog instance. Luckily for us, in ES6 it's much more straight forward. Whenever you are extending a base class and you need to invoke that base class' constructor function, you invoke super passing it any arguments it needs. So in our example, our Dog constructor gets refactored to look like this\n\nclass Animal {\n  constructor(name, energy) {\n    this.name = name\n    this.energy = energy\n  }\n  eat(amount) {\n    console.log(`${this.name} is eating.`)\n    this.energy += amount\n  }\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`)\n    this.energy += length\n  }\n  play(length) {\n    console.log(`${this.name} is playing.`)\n    this.energy -= length\n  }\n}\n\n\nclass Dog extends Animal {\n  constructor(name, energy, breed) {\n    super(name, energy) // calls Animal's constructor\n\n\n    this.breed = breed\n  }\n  bark() {\n    console.log('Woof Woof!')\n    this.energy -= .1\n  }\n}\n\nAnd that's it. No using .call, no using Object.create, no worrying about resetting constructor on the prototype - just extends the base class and make sure to call super.\n\nWhat's interesting about JavaScript is the same patterns you've learned these last few posts are directly baked into the language itself. Previously you learned that the reason all instances of Array have access to the array methods like pop, slice, filter, etc are because all of those methods live on Array.prototype.\n\nconsole.log(Array.prototype)\n\n\n/*\n  concat: ƒn concat()\n  constructor: ƒn Array()\n  copyWithin: ƒn copyWithin()\n  entries: ƒn entries()\n  every: ƒn every()\n  fill: ƒn fill()\n  filter: ƒn filter()\n  find: ƒn find()\n  findIndex: ƒn findIndex()\n  forEach: ƒn forEach()\n  includes: ƒn includes()\n  indexOf: ƒn indexOf()\n  join: ƒn join()\n  keys: ƒn keys()\n  lastIndexOf: ƒn lastIndexOf()\n  length: 0n\n  map: ƒn map()\n  pop: ƒn pop()\n  push: ƒn push()\n  reduce: ƒn reduce()\n  reduceRight: ƒn reduceRight()\n  reverse: ƒn reverse()\n  shift: ƒn shift()\n  slice: ƒn slice()\n  some: ƒn some()\n  sort: ƒn sort()\n  splice: ƒn splice()\n  toLocaleString: ƒn toLocaleString()\n  toString: ƒn toString()\n  unshift: ƒn unshift()\n  values: ƒn values()\n*/\n\n\n\nYou also learned that the reason all instances of Object have access to methods like hasOwnProperty and toString is because those methods live on Object.prototype.\n\nconsole.log(Object.prototype)\n\n\n/*\n  constructor: ƒn Object()\n  hasOwnProperty: ƒn hasOwnProperty()\n  isPrototypeOf: ƒn isPrototypeOf()\n  propertyIsEnumerable: ƒn propertyIsEnumerable()\n  toLocaleString: ƒn toLocaleString()\n  toString: ƒn toString()\n  valueOf: ƒn valueOf()\n*/\n\nHere's a challenge for you. With the list of Array methods and Object methods above, why does this code below work?\n\nconst friends = ['Mikenzi', 'Jake', 'Ean']\n\n\nfriends.hasOwnProperty('push') // false\n\nIf you look at Array.prototype, there isn't a hasOwnProperty method. Well if there isn't a hasOwnProperty method located on Array.prototype, how does the friends array in the example above have access to hasOwnProperty? The reason for that is because the Array class extends the Object class. So in our example above, when JavaScript sees that friends doesn't have a hasOwnProperty property, it checks if Array.prototype does. When Array.prototype doesn't, it checks if Object.prototype does, then it invokes it. It's the same process we've seen throughout this blog post.\n\nJavaScript has two types - Primitive types and Reference types.\n\nPrimitive types are boolean, number, string, null, and undefined and are immutable. Everything else is a reference type and they all extend Object.prototype. That's why you can add properties to functions and arrays and that's why both functions and arrays have access to the methods located on Object.prototype.\n\nfunction speak(){}\nspeak.woahFunctionsAreLikeObjects = true\nconsole.log(speak.woahFunctionsAreLikeObjects) // true\n\n\nconst friends = ['Mikenzi', 'Jake', 'Ean']\nfriends.woahArraysAreLikeObjectsToo = true\nconsole.log(friends.woahArraysAreLikeObjectsToo) // true\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our advanced-javascript course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nWhat's new in ES2021\nAlex Anderson\nUpdated June 22, 2021\n6 minute read\nTABLE OF CONTENTS\nLogical Assignment Operators\nNumeric Separators\nString.prototype.replaceAll()\nPromise.any()\nWeakRef and FinalizationRegistry\nFinalizationRegistry\n\nJavaScript is a living language, which means that it's constantly evolving. This process is managed by the TC39 committee — a group of delegates from various large tech companies who oversee the JavaScript language. These delegates meet together a few times a year to decide which proposals will be advanced between the five stages of consideration. Once a proposal reaches Stage 4, it is deemed \"finished\" and added to the ECMAScript specification, ready to be used by JavaScript engines and developers.\n\nThis year, five proposals made the cut. All of these features are included in the latest versions of modern browsers, so feel free to use them in your projects. In this post, we'll dive into what each of these proposals is about and how you can use them to improve your JavaScript code.\n\nLogical Assignment Operators\n\nYou already know about the assignment operator. It lets you put values into variables.\n\nlet postAuthor = \"Tyler\";\npostAuthor = \"Alex\";\n\nYou also likely know about logical operators, which return either true or false based on some logical operation. They include the AND operator (&&), the OR operator (||), and the recently added nullish coalescing operator (??).\n\nFinally, you know about the mathematical assignment operators. These let you perform a mathematical operation on a variable with the value you are assigning, such as currentNum += 5 which adds 5 to the value of currentNum.\n\nTC39 decided it was time to introduce these operators to each other and created Logical Assignment Operators, which do some logic on the value in the variable when deciding whether to assign a value to it. We'll look at each logical assignment operator individually.\n\n&&=\n\nYou can pronounce this as \"And And Equals\". When you use this, it only assigns a new value to the variable if the variable's current value is truthy — the truthiness of the new value doesn't matter. These two statements are roughly equivalent.\n\n// Without Logical Operators\na && (a = b);\n// With Logical Operators\na &&= b;\n\nTo demonstrate this, lets create an object called \"favorites\" and try adding some lists of favorites to it.\n\nlet favorites = {};\n\n\n// Without first creating the property,\n// this won't add the property to the object\nfavorites.favoriteNumbers &&= [5];\nconsole.log(favorites); // {}\n\n\n// We'll add an empty array\nfavorites.favoriteNumbers = [];\n\n\n// Now when we assign to this property,\n// the assignment will work, since it already exists\nfavorites.favoriteNumbers &&= [15];\nconsole.log(favorites); //{favoriteNumbers: [15]}\n\nIn this case, if the property doesn't exist, it doesn't create the property. But if it already exists, it overwrites it with the value we provide.\n\n||=\n\nYou can call this one \"Or Or Equals\". It works similarly to &&=, except instead of checking to see if the existing value is truthy, it only assigns the new value if the existing value is falsy.\n\n// Without Logical Operators\na || (a = b);\n// With Logical Operators\na ||= b;\n\nOnce again, we'll add a property to a \"favorites\" object to demonstrate it's behavior.\n\nlet favorites = {};\n\n\n// Without first creating the property,\n// this will assign it. Useful for initializing the array.\nfavorites.favoriteColors ||= [];\nconsole.log(favorites); // {favoriteColors: []}\n\n\n// Now that the property has been initialized,\n// we can't change it with ||=\nfavorites.favoriteColors ||= [\"red\"];\nconsole.log(favorites); // {favoriteColors: []}\n??=\n\nThis one is pronounced QQ Equals, and it is exactly the same as ||= except it checks if the existing value is nullish, meaning either null or undefined. If it is, it will assign the new value. These two statements work the same.\n\n// Without Logical Operators\na ?? (a = b);\n// With Logical Operators\na ??= b;\n\nWe'll take one more look at how we can use this with a \"favorites\" object.\n\nlet favorites = {};\n\n\n// Since properties are undefined before initialized,\n// we can use ??= to set an initial, or default, value\nfavorites.favoriteColorCount ??= 0;\nconsole.log(favorites); // {favoriteColorCount: 0}\n\n\n// Once we've initialized the property,\n// we can't change it with ??=, even if it's 0\nfavorites.favoriteColorCount ??= 10;\nconsole.log(favorites); // {favoriteColorCount: 0}\n\n\n// If we reset the value by setting it to null\n// we can set it with ??= again\nfavorites.favoriteColorCount = null;\nfavorites.favoriteColorCount ??= 10;\nconsole.log(favorites); // {favoriteColorCount: 10}\n\nNotice that it doesn't assign the property when it's value is 0, because that value isn't nullish.\n\nWhy would you use this? These operators can save you a little bit of effort as you are assigning values to other values or object properties based on the value you are replacing. ||= and ??= can be especially helpful for initializing values without accidentally overriding them later.\n\nNumeric Separators\n\nUntil now, numbers in JavaScript had to be written as a series of digits, without any kind of separator digits allowed. This works fine for small numbers, but once you get to the millions place, it can be hard to tell what number is what. With ES2021, you can now add underscore separators anywhere in the number, ahead or behind the decimal point. This lets it work with different separation formats from different parts of the world.\n\nconst normalNum = 123456.78912;\nconst separatedNum = 123_456.78_9_12;\n\n\nconsole.log(normalNum === separatedNum); // true\n\n\n// Use a separator to differentiate between dollars and cents\nconst moneyInCents = 349_99;\n\nWhy would you use this? Because you want to be able to read numbers that have more than three digits without squinting at your screen and using your cursor to count the digits. Numeric Separators have no performance impact — they works exactly the same as regular numbers, but they're a lot easier to read 🎉.\n\nString.prototype.replaceAll()\n\nThe String.prototype.replace() method only replaces the first occurrence of a string when you use a string as the input. Before ES2021, replacing all of the occurrences of one string in another required using a regular expression with the /g flag on the end.\n\nconst originalString = \"Always give up! Always surrender!\";\n\n\nconst replacedString = originalString.replace(\"Always\", \"Never\");\nconsole.log(replacedString); // \"Never give up! Always surrender!\"\n\n\n// You must use the \"g\" global flag\nconst regexReplaceString = originalString.replace(/Always/g);\nconsole.log(regexReplaceString); // \"Never give up! Never surrender!\"\n\nWhile this works just fine, it is also a little counter-intuitive — I always expect that every string will be replaced without me needing to use a regular expression. Plus, the regular expression makes it a little harder to read.\n\nES2021 adds the String.prototype.replaceAll() method as a convenience to let you pass a string as the input.\n\nconst originalString = \"Always give up! Always surrender!\";\n\n\nconst allReplacedString = originalString.replaceAll(\"Always\", \"Never\");\nconsole.log(allReplacedString); // \"Never give up! Never surrender!\"\n\nThis method still works with regular expressions, however it requires that they use the global /g flag — otherwise it will throw an error. There are also special strings you can use inside your replacement string, such as $& which represents the matched string. I can use this to easily wrap the existing string with other strings, like adding quotes to the matched string.\n\nconst originalString = \"Always give up! Always surrender!\";\n\n\nconst allReplacedString = originalString.replaceAll(\"Always\", '\"$&\"');\nconsole.log(allReplacedString); // '\"Always\" give up! \"Always\" surrender!`\n\nWhy would you use this? String.prototype.replaceAll() makes replacing every instance of a string in some text just a little bit easier, all without needing messy regular expressions.\n\nPromise.any()\n\nWhenever we we need to do something asynchronous in JavaScript, we reach for the trusty Promise. These let us schedule work and provide a way to resume executing our code once the work is done. JavaScript Promises can be in one of three states — \"pending\", \"fulfilled\", or \"rejected\". We'll say that \"fulfilled\" and \"rejected\" are resolved states, meaning the promise is done processing.\n\nThere are a few ways to orchestrate Promises in JavaScript. Promise.all() runs an array of promises and runs them concurrently, resolving once all of the promises fulfill or rejecting when any one of them reject.\n\nimport getBlogPost from \"./utils/getBlogPost\";\n\n\nPromise.all([getBlogPost(1), getBlogPost(3), getBlogPost(4)])\n  .then((blogPosts) => {\n    // Do something with our array of blog posts\n  })\n  .catch((error) => {\n    // If any of the promises rejected, the entire Promise.all call will reject\n  });\n\nPromise.race() also takes an array of promises, but it fulfills or rejects as soon as any one of the promises fulfills or rejects.\n\nimport getBlogPost from \"./utils/getBlogPost\";\nconst wait = (time) => new Promise((resolve) => setTimeout(resolve, time));\n\n\nPromise.race([\n  getBlogPost(1),\n  wait(1000).then(() => Promise.reject(\"Request timed out\")),\n])\n  .then(([blogPost]) => {\n    // If getBlogPost fulfilled first, we'll get it here\n  })\n  .catch((error) => {\n    // If the request timed out, the `Promise.reject` call\n    // above will cause this catch block to execute\n  });\n\nJust last year we were introduced to Promise.allSettled, which runs all of the promises, regardless of whether any of them fulfill or reject. Once all of them are resolved one way or the other, it returns an array describing the results of each promise.\n\nimport updateBlogPost from \"./utils/updateBlogPost\";\n\n\nPromise.allSettled([\n  updateBlogPost(1, {tags:[\"react\",\"javascript\"]})\n  updateBlogPost(3, {tags:[\"react\",\"javascript\"]})\n  updateBlogPost(7, {tags:[\"react\",\"javascript\"]})\n]).then(results => {\n  // Regardless of whether any of the promises reject, all of them\n  // will be executed.\n  console.log(results);\n  // [\n  //   {status: \"fulfilled\", value: {/* ... */}},\n  //   {status: \"fulfilled\", value: {/* ... */}},\n  //   {status: \"rejected\",  reason: Error: 429 Too Many Requests}\n  // ]\n})\n\nPromise.any() is a new Promise function that works a bit like Promise.race(). You pass it a list of promises. It will resolve as soon as one of the promises is fulfilled, but it won't reject until it's done resolving all of the promises. If every single promise in the list rejects, it returns what's called an Aggregate Error, which groups together all of the errors from the promise rejections.\n\nIn this example, we'll do a little bit of web scraping to see which website loads the fastest. We want it to ignore any sites that might be offline too. If you try running this in a browser, you'll get an AggregateError, due to CORS security errors. However, if you run it in NodeJS v16+ with a fetch polyfill, like node-fetch, you'll get a response from one of the sites.\n\nPromise.any([\n  fetch(\"https://google.com/\").then(() => \"google\"),\n  fetch(\"https://apple.com\").then(() => \"apple\"),\n  fetch(\"https://microsoft.com\").then(() => \"microsoft\"),\n])\n  .then((first) => {\n    // Any of the promises was fulfilled.\n    console.log(first);\n  })\n  .catch((error) => {\n    // All of the promises were rejected.\n    console.log(error);\n  });\n\nWhy would you use this? Promise.any() lets you run a list of promises concurrently, ignoring any that reject unless all of the promises reject.\n\nWeakRef and FinalizationRegistry\n\nJavaScript famously uses a garbage collector to manage memory. That means you don't have to de-allocate variables when you are done working with them, which is incredibly convenient. However, it does mean that if you're not careful, variables can hang out in memory for too long, causing memory leaks.\n\nThe job of the garbage collector is to keep track of the references that objects have to other objects – like global variables, variables defined in a function closure, or properties on an object. Any time you assign an existing object to another variable, another reference is created and the garbage collector takes note. These types of references are called \"Strong\" references. The memory for those objects will be retained until there are no more references to the object. At that point the garbage collector will remove the object and clean up the memory.\n\nSometimes, though, you might want to have an object be garbage collected even sooner. For example, we might want to have a cache that we want to have the garbage collector clear out more frequently, just in case that cache fills up with big objects that consume all of the browser's memory. For that, we use a WeakRef.\n\nWe can create a WeakRef with its constructor, which takes an object of some kind.\n\n// This is a regular Object\nconst blogPostCache = {};\n\n\n// This is a WeakRef Object.\nconst weakBlogPostCache = new WeakRef({});\n\nTo access values on our weakBlogPostCache, we need to use the .deref method. This lets us access the underlying object, which we can then mutate.\n\nconst blogPostRecord = {\n  title: \"A really long blog post\",\n  body: \"This blog post takes up lots of space in memory...\",\n};\n// We'll use spread syntax to clone this object to make a new one\nblogPostCache[\"a-really-long-blog-post\"] = { ...blogPostRecord };\nweakBlogPostCache.deref()[\"a-really-long-blog-post\"] = { ...blogPostRecord };\n\n\nconsole.log(weakBlogPostCache.deref()); // {\"a-really-long-blog-post\": {title: ..., body: ...}}\n\nAt this point, there's no telling when weakBlogPostCache will be garbage collected. Each browser engine has a different schedule for running the garbage collector. Usually it will run automatically every couple of minutes, or if the amount of available memory starts getting low. If you are using Google Chrome, you can click the College Garbage icon in the Performance dev tools tab.\n\nOnce the WeakRef is garbage collected, calling .deref will return undefined. It's up to you, the developer, to handle those situations, perhaps by creating a new empty WeakRef and populating it with fresh content.\n\nFinalizationRegistry\n\nIt's possible that checking to see whether weakBlogPostCache.deref() is undefined isn't responsive enough. If we wanted to reinitialize our empty cache the moment it was garbage collected, we would need some kind of callback from the garbage collector.\n\nThe FinalizationRegistry constructor was released alongside WeakRef to register callbacks to be called when a WeakRef is garbage collected. We can create a registry, pass it a callback, and then register our WeakRef with that registry.\n\nSince the WeakRef's contents are gone when our callback is called, we need to pass some other value to the registry to help us know which WeakRef was garbage collected. When we register our WeakRef, we register a proxy value that is passed to the callback function. In the example below, that value is \"Weak Blog Post Cache\".\n\nlet weakBlogPostCache = new WeakRef({});\nconst registry = new FinalizationRegistry((value) => {\n  console.log(\"Value has been garbage collected:\", value);\n  // Reinitialize our cache\n  weakBlogPostCache = new WeakRef({});\n});\nregistry.register(weakRefObject, \"Weak Blog Post Cache\");\n\nIn the above example, once our weakBlogPostCache is garbage collected, the FinalizationRegistry will log Value has been garbage collected: Weak Blog Post Cache.\n\nThis feature is by far the most complicated of all of the features introduced; it's intended only for the most low-level use-cases, so you likely won't be messing with it unless you are writing libraries in JavaScript or applications with complicated memory requirements. Regardless, it opens up some performance optimizations that wouldn't be possible before. If you want a more in-depth explanation, including a few notes of caution, check out the full TC39 proposal.\n\nWhy would you use this? If you need to keep a cache of large objects without running out of memory, WeakRef can make the garbage collector remove those objects a little bit sooner. If you need to know exactly when one of your WeakRef objects has been removed from memory, you can use FinalizationRegistry\n\nLike always, the TC39 committee and browser vendors have given us some excellent new APIs to make writing JavaScript a a little easier, faster, and more fun. And with 12 exciting proposals currently in Stage 3, it looks like we've got some more solid changes to look forward to in future updates.\n\nAlex Anderson\n\nSoftware Architect at ui.dev. Hobby Chef. Spaceship Enthusiast. Serial Optimist.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nAMP is not the issue, it's Google\nJustin Avery\nUpdated March 9, 2018\n2 minute read\n\nJust as I was hitting ‘schedule campaign’ on the RWD Weekly newsletter the Google AMP team published an article about a new announcement.\n\nIt seemed that after a long list of blog posts questioning the ethical existence of AMP and Google's technical application of the AMP results in their search the team were addressing our concerns and trying to put all great performing web pages on a level playing field.\n\nAs I read the article the only real pieces I understood was the overall promise of moving towards equality, however, I could not make any sense of the technical requirements we would need to meet for this parity to occur. From the post:\n\nGoogle’s goal is to extend support in features like the Top Stories carousel to AMP-like content that (1) meets a set of performance and user experience criteria and (2) implements a set of new web standards. Some of the proposed standards in the critical path are Feature Policy, Web Packaging, iframe promotion, Performance Timeline, and Paint Timing.\n\nAs I read the article I opened the links to Feature Policy, Web Packaging, iframe promotion, Performance Timeline, and Paint Timing and began to read through the documentation.\n\nAside from not really understanding how I would be able to make my sites adhere to these things, a lot of them are not even things at the moment or implemented in any browser. That is also ignoring the fact that these are ‘some of the proposed standards’ required to get the glory spot. What else do I need to do, and who decides what that will be and when?\n\nEthan Marcotte, who is far more eloquent and putting his point across, had this to say about it (you should read the full article\n\nUntil such a point as those standards get finalized, and then they’re adopted by a significant number of browsers, AMP’s going to work exactly the way it has. To put a finer point on it, nothing about AMP is changing today, in the short-term, nor in the medium-term. In fact, it’s entirely possible that nothing will change at all. For the time being, web pages written in AMP—and hosted on Google-owned or -approved servers— are going to be the only thing allowed in the carousel.\n\nReading Ethan's article got me to thinking.\n\nIt isn’t AMP that are making these rules and deciding what needs to occur. The AMP team themselves are making a fork of the web as we know it and creating AMP HTML that is designed to work incredibly fast when used in conjunction with Google.\n\nAMP, as proven by Maciej Ceglowski, is actually slower than building a performant website with HTML, CSS, and Javascript. It only becomes faster and more valuable when it is used in conjunction with Google Search.\n\nThe team that is making the rules about who will appear where is Google themselves, the corporate powerhouse and one of the two most influential companies the world has ever seen (the other I see as Facebook).\n\nWhen Microsoft was dominating the market all it took was one amazing man and a couple of brilliantly executed ideas for Apple to win back marketshare.\n\nThis rocked Microsoft.\n\nApple is now facing the same issue as Microsoft are claiming back former users with the Surface Book and endangering Apple's grip on the creative industry.\n\nCompanies live and die by the decisions of the consumers. It is often the early adopters, people like you and I, who make the first move towards something new. Then it’s our family who go next on our recommendation, then our friends, our work colleagues, and then pretty soon it reaches a critical mass adoption.\n\nSo while we, you and I, are in outrage about the stance that Google is taking when it comes to AMP there is one simple solution. Stop. Using. Google.\n\nI remember a time when there was a tonne of web search engines out there. Web Crawler, Ask Jeeves, Alta Vista… I used to use these different search engines depending on the type of result I wanted. Then I started using Google and convinced my family, friends and colleagues to do the same. We did this because Google had the best results, and they were PRO the web… they were one of the catalysts for how far and quickly it came along.\n\nDo you still use Google for search?\n\nWhat about Bing?\n\nWhat about Duck Duck Go?\n\nGoogle’s weight and power come because most of the world use it without knowing there’s an alternative. Perhaps it is time we started voicing our concerns through actions and start using alternative search platforms.\n\nIt has taken all of us to build the web we have, and now it is up to all of us to build the web we want – for everyone. — Sir Tim Berners Lee\n\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Modern Javascript course with code bnC2e .\n\nLOGIN\nvar vs let vs const in JavaScript\nTyler McGinnis\nUpdated January 1, 2019\n5 minute read\n\nES2015 (or ES6) introduced two new ways to create variables, let and const. But before we actually dive into the differences between var, let, and const, there are some prerequisites you need to know first. They are variable declarations vs initialization, scope (specifically function scope), and hoisting.\n\nVariable Declaration vs Initialization\n\nA variable declaration introduces a new identifier.\n\nvar declaration\n\nAbove we create a new identifier called declaration. In JavaScript, variables are initialized with the value of undefined when they are created. What that means is if we try to log the declaration variable, we'll get undefined.\n\nvar declaration\n\n\nconsole.log(declaration) // undefined\n\nSo if we log the declaration variable, we get undefined.\n\nIn contrast to variable declaration, variable initialization is when you first assign a value to a variable.\n\nvar declaration\n\n\nconsole.log(declaration) // undefined\n\n\ndeclaration = 'This is an initialization'\n\nSo here we're initializing the declaration variable by assigning it to a string.\n\nThis leads us to our second concept, Scope.\n\nScope\n\nScope defines where variables and functions are accessible inside of your program. In JavaScript, there are two kinds of scope - global scope, and function scope. According to the official spec,\n\n\"If the variable statement occurs inside a FunctionDeclaration, the variables are defined with function-local scope in that function.\".\n\nWhat that means is if you create a variable with var, that variable is \"scoped\" to the function it was created in and is only accessible inside of that function or, any nested functions.\n\nfunction getDate () {\n  var date = new Date()\n\n\n  return date\n}\n\n\ngetDate()\nconsole.log(date) // ❌ Reference Error\n\nAbove we try to access a variable outside of the function it was declared. Because date is \"scoped\" to the getData function, it's only accessible inside of getDate itself or any nested functions inside of getDate (as seen below).\n\nfunction getDate () {\n  var date = new Date()\n\n\n  function formatDate () {\n    return date.toDateString().slice(4) // ✅\n  }\n\n\n  return formatDate()\n}\n\n\ngetDate()\nconsole.log(date) // ❌ Reference Error\n\nNow let's look at a more advanced example. Say we had an array of prices and we needed a function that took in that array as well as a discount and returned us a new array of discounted prices. The end goal might look something like this.\n\ndiscountPrices([100, 200, 300], .5) // [50, 100, 150]\n\nAnd the implementation might look something like this\n\nfunction discountPrices (prices, discount) {\n  var discounted = []\n\n\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  return discounted\n}\n\nSeems simple enough but what does this have to do with block scope? Take a look at that for loop. Are the variables declared inside of it accessible outside of it? Turns out, they are.\n\nfunction discountPrices (prices, discount) {\n  var discounted = []\n\n\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n\n\n  return discounted\n}\n\nIf JavaScript is the only programming language you know, you may not think anything of this. However, if you're coming to JavaScript from another programming language, specifically a programming language that is blocked scope, you're probably a little bit concerned about what's going on here. It's not really broken, it's just kind of weird. There's not really a reason to still have access to i, discountedPrice, and finalPrice outside of the for loop. It doesn't really do us any good and it may even cause us harm in some cases. However, since variables declared with var are function scoped, you do.\n\nNow that we've discussed variable declarations, initializations, and scope, the last thing we need to flush out before we dive into let and const is hoisting.\n\nHoisting\n\nRemember earlier we said that \"In JavaScript, variables are initialized with the value of undefined when they are created.\". Turns out, that's all that \"Hoisting\" is. The JavaScript interpreter will assign variable declarations a default value of undefined during what's called the \"Creation\" phase.\n\nFor a much more in depth guide on the Creation Phase, Hoisting, and Scopes see \"The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript\"\n\nLet's take a look at the previous example and see how hoisting affects it.\n\nfunction discountPrices (prices, discount) {\n  var discounted = undefined\n  var i = undefined\n  var discountedPrice = undefined\n  var finalPrice = undefined\n\n\n  discounted = []\n  for (i = 0; i < prices.length; i++) {\n    discountedPrice = prices[i] * (1 - discount)\n    finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n\n\n  return discounted\n}\n\nNotice all the variable declarations were assigned a default value of undefined. That's why if you try access one of those variables before it was actually declared, you'll just get undefined.\n\nfunction discountPrices (prices, discount) {\n  console.log(discounted) // undefined\n\n\n  var discounted = []\n\n\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n\n\n  return discounted\n}\n\nNow that you know everything there is to know about var, let's finally talk about the whole point of why you're here, what's the difference between var, let, and const?\n\nvar VS let VS const\n\nFirst, let's compare var and let. The main difference between var and let is that instead of being function scoped, let is block scoped. What that means is that a variable created with the let keyword is available inside the \"block\" that it was created in as well as any nested blocks. When I say \"block\", I mean anything surrounded by a curly brace {} like in a for loop or an if statement.\n\nSo let's look back to our discountPrices function one last time.\n\nfunction discountPrices (prices, discount) {\n  var discounted = []\n\n\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n\n\n  return discounted\n}\n\nRemember that we were able to log i, discountedPrice, and finalPrice outside of the for loop since they were declared with var and var is function scoped. But now, what happens if we change those var declarations to use let and try to run it?\n\nfunction discountPrices (prices, discount) {\n  let discounted = []\n\n\n  for (let i = 0; i < prices.length; i++) {\n    let discountedPrice = prices[i] * (1 - discount)\n    let finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  console.log(i)\n  console.log(discountedPrice)\n  console.log(finalPrice)\n\n\n  return discounted\n}\n\n\ndiscountPrices([100, 200, 300], .5) // ❌ ReferenceError: i is not defined\n\n🙅‍♀️ We get ReferenceError: i is not defined. What this tells us is that variables declared with let are block scoped, not function scoped. So trying to access i (or discountedPrice or finalPrice) outside of the \"block\" they were declared in is going to give us a reference error as we just barely saw.\n\nvar VS let\n\n\nvar: function scoped\n\n\nlet: block scoped\n\nThe next difference has to do with Hoisting. Earlier we said that the definition of hoisting was \"The JavaScript interpreter will assign variable declarations a default value of undefined during what's called the 'Creation' phase.\" We even saw this in action by logging a variable before it was declared (you get undefined)\n\nfunction discountPrices (prices, discount) {\n  console.log(discounted) // undefined\n\n\n  var discounted = []\n\n\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n\n\n  return discounted\n}\n\nI can't think of any use case where you'd actually want to access a variable before it was declared. It seems like throwing a ReferenceError would be a better default than returning undefined. In fact, this is exactly what let does. If you try to access a variable declared with let before it's declared, instead of getting undefined (like with those variables declared with var), you'll get a ReferenceError.\n\nfunction discountPrices (prices, discount) {\n  console.log(discounted) // ❌ ReferenceError\n\n\n  let discounted = []\n\n\n  for (let i = 0; i < prices.length; i++) {\n    let discountedPrice = prices[i] * (1 - discount)\n    let finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n\n\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n\n\n  return discounted\n}\nvar VS let\n\n\nvar:\n  function scoped\n  undefined when accessing a variable before it's declared\n\n\nlet:\n  block scoped\n  ReferenceError when accessing a variable before it's declared\nlet VS const\n\nNow that you understand the difference between var and let, what about const? Turns out, const is almost exactly the same as let. However, the only difference is that once you've assigned a value to a variable using const, you can't reassign it to a new value.\n\nlet name = 'Tyler'\nconst handle = 'tylermcginnis'\n\n\nname = 'Tyler McGinnis' // ✅\nhandle = '@tylermcginnis' // ❌ TypeError: Assignment to constant variable.\n\nThe take away above is that variables declared with let can be re-assigned, but variables declared with const can't be.\n\nCool, so anytime you want a variable to be immutable, you can declare it with const. Well, not quite. Just because a variable is declared with const doesn't mean it's immutable, all it means is the value can't be re-assigned. Here's a good example.\n\nconst person = {\n  name: 'Kim Kardashian'\n}\n\n\nperson.name = 'Kim Kardashian West' // ✅\n\n\nperson = {} // ❌ Assignment to constant variable.\n\nNotice that changing a property on an object isn't reassigning it, so even though an object is declared with const, that doesn't mean you can't mutate any of its properties. It only means you can't reassign it to a new value.\n\nNow the most important question we haven't answered yet, should you use var, let, or const? The most popular opinion, and the opinion that I subscribe to, is that you should always use const unless you know the variable is going to change. The reason for this is by using const, you're signalling to your future self as well as any other future developers that have to read your code that this variable shouldn't change. If it will need to change (like in a for loop), you should use let.\n\nSo between variables that change and variables that don't change, there's not much left. That means you shouldn't ever have to use var again.\n\nNow the unpopular opinion, though it still has some validity to it, is that you should never use const because even though you're trying to signal that the variable is immutable, as we saw above, that's not entirely the case. Developers who subscribe to this opinion always use let unless they have variables that are actually constants like _LOCATION_ = ....\n\nSo to recap, var is function scoped and if you try to use a variable declared with var before the actual declaration, you'll just get undefined. const and let are blocked scoped and if you try to use variable declared with let or const before the declaration you'll get a ReferenceError. Finally the difference between let and const is that once you've assigned a value to const, you can't reassign it, but with let, you can.\n\nvar VS let VS const\n\n\nvar:\n  function scoped\n  undefined when accessing a variable before it's declared\n\n\nlet:\n  block scoped\n  ReferenceError when accessing a variable before it's declared\n\n\nconst:\n  block scoped\n  ReferenceError when accessing a variable before it's declared\n  can't be reassigned\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our modern-javascript course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\n24 Ways to be Responsive\nJustin Avery\nUpdated December 24, 2012\n1 minute read\nTABLE OF CONTENTS\nResponsive Responsive Design\nShould We Be Reactive?\nResponsive Images: What We Thought We Needed\nMore more, gimme more\n\n24 Ways is a web design/development blog that deliver fantastic articles ranging from web strategy to design ideas to development techniques making it the perfect advent calendar for anyone working in the web.\n\nThis year it is no surprise that they've ended up with a huge focus on the responsive nature of web design, and there are some absolute cracking reads to be had.\n\nIn this article we're going to take a look at the responsive articles so that you can quickly find the article that you want to find out more information about.\n\nResponsive Responsive Design\n\nThe first of the responsive articles on 24ways came from the very smart Tim Kadlec. You may know Tim from his very well written book released earlier in the year \"Implementing Responsive Design\".\n\nTim focusses on the performance side of Responsive Design, something which has gone missing in a lot of the recent responsive implementations. He talks about conditional loading, warns about being careful with images and lists a great idea from Steve Sounders when approaching new functionality to an existing site:\n\nOptimize an existing feature or asset on the page\nRemove an existing feature or asset from the page\nDon’t add the new feature or asset\nShould We Be Reactive?\n\nDan Donald takes a look at the evolution of web design and looks at how although the web was once responsive (text on a page sans CSS is pretty responsive), it is now coming full circle.\n\nHe is taking a look at making the web react to the user and their context, which is what a lot of people have mistaken responsive design when they decide to go down that path. Too many people concern themselves with things like \"Well on the ipad the user will be looking to do XYZ, but on the iPhone they will be on the move looking to do....\", and it's a dangerous path to go down with RWD alone.\n\nDan looks at how we might introduce so reactiveness into the mix to hopefully fill in the missing link.\n\nResponsive Images: What We Thought We Needed\n\nPaul Robert Lloyd has recently shared his thoughts in our Responsive Design Interview Series, and in this article he goes through the Responsive Image saga. \n\nHe looks in details at the <picture> and srcset approaches to responsive images.\n\nRather than side with one or the other his point is that we need a better image format, not more or changed markup.  He also shows that the size of the display is not always tied directly to the size of the image, demonstrating an example whereby the images on an tablet are larger than those on the desktop which are in turn smaller than those on a mobile.\n\nIt's a great article to lead us into a responsive images new year.\n\nMore more, gimme more\n\nRather than go through all of them individually you should now see that these articles are individual works of brilliance.  Be sure to also check out:\n\nDesign Systems by Laura Kalbag\nRedesigning the Media Query by Les James\nGiving Content Priority with CSS3 Grid Layout by Rachel Andrew\nInfinite Canvas: Moving beyond the page by Nathan Peretic\n\nI highly recommend reading every one of the 24 Ways articles, but if that's too much the links listed here are an absolute must.\n\nA big thank you to Drew McLellan, Brian Suda, Anna Devenham and Owen Gregory and all the writers for putting together such an amazing online publication.\n\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nContent First Design\nJustin Avery\nUpdated September 29, 2016\n2 minute read\nTABLE OF CONTENTS\nWorking without content\nConstraint: why content is so vital\nA content element inventory\n\nResponsive design is about a single source of content across many viewports and, therefore, requires the content up front for a truly award winning design that spans a million devices.\n\nMark Boulton once said during a workshop...\n\nWeb design is an extention of page design, and page design was all about crafting the perfect paragraph.  To craft the perfect paragraph you need to be working with the content.\n\nMark Boulton\n\nWorking without content\n\nDuring the build of this site I had a really good idea upfront as to what I wanted each of the pages should contains, which modules were to be added to each page and what those content modules were made up from. I consider myself fairly well versed in the art of building websites, I've built more than 30 sites ranging from £500.00 to £500,000.00, and built them across the Charity, Finance, Gambling, Higher Education, Publishing and small business sectors. With all this knowledge I was sure I considered everything for the page layouts and wireframes to provide the designer when designing this site.\n\nIn reality it was a flawed process.  The designs that the designer came back with were great, but they didn't account for the small issues.  Length of headlines that spanned multiple lines, the layout of a page that is too short and conversely one that is longer than most.\n\nWhen you ask a designer to design without the content that will be used for the final site you may as well be asking an architect to design a house without specifying the number of bedrooms, ensuites, kitchens and bathrooms.\n\nMake no mistake, a design constructed without real content may look alright in the end, but it will never be as good or impressive than a design with actual content.\n\nConstraint: why content is so vital\n\nThere are many reasons why it is important to base your design from your actual content, but the most important from the point of the design process is the constraint is offers the designer in an otherwise newly unconstrained world.\n\nSince the beginning of time designer have been working within constraints.  These constraints started off with the availability of tools, the availability of colour, the size of the marble block, the size of the cathedral roof, even the painters canvas was only so big once it was stretched. \n\nFor a long time web designers have been working with the constraints of a fixed width as well. This is one of the reasons why we broke the web to begin with, to allow us some constraints when coming up with a design. With the arrival or responsive design we suddenly had no fixed width to constrain us... however if we look from the content out rather than from the edges in then we can use the content itself as the constraint.\n\nA content element inventory\n\nThe first step in our responsive design workflow is to inventory only the things that need to be on the page, whether or not they exist yet. And by \"inventory,\" I mean make a simple list. This version of the content inventory is not meant to replace traditional content inventories. We're simply borrowing the idea of a content inventory and using it as a starting point for design.\n\nAn excerpt from Stephen Hay's Repsonsive design Workflow\n\nThe first place to start when working on what content you want to bring across to your new responsivve site is a content inventory. The idea is that you identify for each page/content type (think product page, contact form, news lising, news page, article) the types of content elements that should be on that page.  It should be noted that you are identifying what should be on the page, not what you already have on the page.  This is a perfect opportunity to decide if you have wasted content elements or elements that are missing altogether.\n\nThis goes towards understanding how the content will be layed out in your small viewport all the way to your widest viewport.\n\nA simple example is a resource in our resource section. We need to cater for the resource that contains the most content so lets take a look at Swipe.js as our content inventory example.\n\nContent Inventory\nAll Pages\nTop Level Navigation\nSearch\nBreadcrumb navigation\nLogo\nFooter\nResource\nTitle\nIntroduction\nResource Thumbnail\nResource Thumbnail caption\nShort Description\nLong Description (details, explanation)\nCodePen Demo Link/Embed (if available)\nGithub Link (if available)\nDownload Link (if available)\nResource Name (linked)\nResource Creator (linked)\nLinks to sites that use product (if available)\nArticls/News relating to product\nRelated Products\n\nWith this content element inventory I can now start to provide a better description of the types of content the designer will need to work with when laying out the designs. It is still important that you have real content to understand the length of each of these items, but it is a great start.\n\nNow go forth. Identify the types of page templates you have and work out a content inventory for each of those items.\n\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nThe Complete Guide to URL parameters with React Router\nTyler McGinnis\nUpdated September 10, 2021\n2 minute read\nCheck your version\nThis post assumes you're using React Router v6. If not, find your version below.\nReact Router v4\nReact Router v5\n\nIf you're reading this, you're probably familiar with the idea of function parameters. They allow you to declare placeholders when you define a function that will be set when the function is invoked.\n\nfunction getProfile(handle) {\n  // `handle` is a placeholder\n  // for when `getProfile` is invoked\n}\n\n\ngetProfile(\"tylermcginnis\");\ngetProfile(\"cassidoo\");\n\nURL parameters solve a similar problem, except instead of declaring placeholders for a function, you can declare placeholders for a URL. In terms of React and React Router, this means what you render can be dynamic based on the \"placeholder\" portion of the URL.\n\nTake Twitter for example. Instead of defining a route for every user on the platform, they can declare one route with a placeholder of the user's handle. The syntax would look something like this,\n\n<Route path=\":handle\" element={<Profile />} />\n\nNotice that the path has a : in front of it. That's how you tell React Router that this portion of the URL is the \"placeholder\". Instead of matching literally for twitter.com/handle, it's matching for the specific pattern.\n\nNow whenever anyone visits a URL that matches the :handle pattern (/tylermcginnis, /cassidoo, /anything) , the Profile component.\n\nNow the question becomes, how do you access the dynamic portion of the URL – in this case, handle – in the component that's rendered?\n\nAs of v5.1, React Router comes with a useParams Hook that returns an object with a mapping between the URL parameter and its value.\n\nimport * as React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getProfile } from '../utils'\n\n\nfunction Profile () {\n  const [user, setUser] = React.useState(null)\n  const { handle } = useParams()\n\n\n  React.useEffect(() => {\n    getProfile(handle)\n      .then(setUser)\n  }, [handle])\n\n\n  return (\n    ...\n  )\n}\n\nNow that we have the fundamentals out of the way, let's look at an example where we'd need to use URL parameters in an app – building a blog.\n\nOur blog will be simple. On the / page we'll list out and link to all of our blog posts and we'll create a URL parameter for each post at /blog/:id.\n\nWith only that information, we can already render our Routes.\n\nimport * as React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n} from \"react-router-dom\";\n\n\nfunction Home() {\n  return ();\n}\n\n\nfunction Post() {\n  return ();\n}\n\n\nexport default function App() {\n  return (\n    <Router>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={<Home />}\n        />\n        <Route\n          path=\"blog/:id\"\n          element={<Post />}\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nNext let's build out the Home component. As we learned earlier, this component will \"list out and link to all of our blog posts\". To do this, we'll need a way to get all of the ids and titles for our posts. Because this is a post about URL parameters, let's pretend we already had a helper function to give us this info - getPosts.\n\nimport * as React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Link,\n} from \"react-router-dom\";\n\n\nimport { getPosts } from \"./api\";\n\n\nfunction Home() {\n  const posts = getPosts();\n\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      <nav>\n        <ul>\n          {posts.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`blog/${id}`}>{title}</Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\n\n...\n\nThe biggest thing to note in the code above is the <Link> component. Notice we're linking to blog/${id} because that's the pattern that matches our Route we created previously -\n\n<Route path=\"blog/:id\" element={<Post />} />\n\nThe final thing we need is to build out our Post component that gets rendered when a user visits a URL that matches the blog/:id pattern. To do this, we'll need to first, get the id of the post the user is visting (via the URL parameter) and second, use that id to get the contents of the post.\n\nTo get the id of the post (via the URL parameter), we can use React Router's useParams Hook. To then get the post's content, we'll pretend we have a getPost function we can use.\n\nimport * as React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Routes,\n  useParams,\n} from \"react-router-dom\";\n\n\nimport { getPost, getPosts } from \"./api\";\n\n\nfunction Post() {\n  const { id } = useParams();\n  const post = getPost(id);\n\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  );\n}\n\nTo recap, you can think of URL parameters similar to how you think of function parameters. However, instead of creating a placeholder for a function value, you're creating a placeholder for a portion of a URL.\n\nUsing React Router, when you want to create a Route that uses a URL parameter, you do so by including a : in front of the value you pass to Route's path prop.\n\n<Route path=\":id\" element={<Invoice />} />\n\nFinally, to access the value of the URL parameter from inside of the component that is rendered by React Router, you can use React Router's useParams Hook.\n\nimport { useParams } from 'react-router-dom'\n\n\nexport default function Invoice () {\n  const { id } = useParams()\n\n\n  ...\n}\nWant to learn more?\nIf you liked this post and want to learn more, check out our free Comprehensive Guide to React Router.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nA Guide to Query Strings with React Router\nTyler McGinnis\nUpdated September 10, 2021\n2 minute read\nCheck your version\nThis post assumes you're using React Router v6. If not, find your version below.\nReact Router v4\nReact Router v5\n\nIf you've ever jammed with the console cowboys in cyberspace, you've almost certainly run into query strings before. They're the ? and & you see appended onto URLs.\n\nQuery String Example\ntwitter.com/search?q=ui.dev&src=typed_query&f=live\n\nThey're a fundamental aspect of how the Web works as they allow you to pass state via the URL. Above is an example of a query string you'd see if you searched for ui.dev on Twitter.\n\nThe query portion of this URL has three keys, q, src, and f. q represents the text we type into Twitter's search bar, src tells Twitter how we did it (via typing into the search bar), and f filters the results of the query by \"Latest\".\n\nWhat's nice about this is it's sharable. You could copy and paste that URL into your browser right now and it would work. All the data Twitter needs to properly render the UI is right there in the URL.\n\nWith all that said, odds are you're not here to learn what query strings are but instead how to use them with React Router. The good news is that if you're already comfortable with React Router, there are just a few small details you need to know.\n\nLet's say we were Twitter and we were building the Route for the URL above. It would probably look something like this.\n\n<Route path=\"/search\" element={<Results />} />\n\nNotice at this point there's nothing new. We don't account for the query string when we create the Route. Instead, we get and parse it inside the component that is being rendered when that path matches - in this case, Results.\n\nNow the question becomes, how do we actually do this? Before we can answer that question, we first need to learn about the URLSearchParams API.\n\nURLSearchParams\n\nThe URLSearchParams API is built into all browsers (except for IE) and gives you utility methods for dealing with query strings.\n\nWhen you create a new instance of URLSearchParams, you pass it a query string and what you get back is on object with a bunch of methods for working with that query string.\n\nTake our Twitter query string for example,\n\nconst queryString = \"?q=ui.dev&src=typed_query&f=live\";\nconst sp = new URLSearchParams(queryString);\n\n\nsp.has(\"q\"); // true\nsp.get(\"q\"); // ui.dev\nsp.getAll(\"src\"); // [\"typed_query\"]\nsp.get(\"nope\"); // null\n\n\nsp.append(\"sort\", \"ascending\");\nsp.toString(); // \"?q=ui.dev&src=typed_query&f=live&sort=ascending\"\n\n\nsp.set(\"q\", \"bytes.dev\");\nsp.toString(); // \"?q=bytes.dev&src=typed_query&f=live&sort=ascending\"\n\n\nsp.delete(\"sort\");\nsp.toString(); // \"?q=bytes.dev&src=typed_query&f=live\"\nuseSearchParams\n\nAs of v6, React Router comes with a custom useSearchParams Hook which is a small wrapper over the browser's URLSearchParams API.\n\nuseSearchParams returns an array with the first element being an instance of URLSearchParams (with all the properties we saw above) and the second element being a way to update the query string.\n\nGoing back to our example, here's how we would get the values from our query string using useSearchParams.\n\nimport { useSearchParams } from 'react-router-dom'\n\n\nconst Results = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n\n  const q = searchParams.get('q')\n  const src = searchParams.get('src')\n  const f = searchParams.get('f')\n\n\n  return (\n    ...\n  )\n}\n\nThen if we needed to update the query string, we could use setSearchParams, passing it an object whose key/value pair will be added to the url as &key=value.\n\nimport { useSearchParams } from 'react-router-dom'\n\n\nconst Results = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n\n  const q = searchParams.get('q')\n  const src = searchParams.get('src')\n  const f = searchParams.get('f')\n\n\n  const updateOrder = (sort) => {\n    setSearchParams({ sort })\n  }\n\n\n  return (\n    ...\n  )\n}\nWant to learn more?\nIf you liked this post and want to learn more, check out our free Comprehensive Guide to React Router.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nConfiguring HTTP2 Push with Wordpress\nJustin Avery\nUpdated February 24, 2017\n3 minute read\nTABLE OF CONTENTS\nPush every time?\nSetting the Cookie\nServing the right dish to the right person\nSo, no more critical CSS?\nAny drawbacks?\nConclusion\n\nLet's say that you had a site that runs on PHP, which of course your Wordpress instance does, and you wanted to use HTTP2 Server Push to push down two CSS files and your logo.\n\nYou can use the following code which will do just that for you...\n\n<?php\n  header(\"Link: </css/vendor.css>; rel=preload; as=style\", false);\n  header(\"Link: </css/styles.css>; rel=preload; as=style\", false);\n  header(\"Link: </images/site/logo--red.svg>; rel=preload; as=image\", false);\n?>\n\nThis has to be at the very very top of the page being requested, so if you're working with Wordpress then you're going to want to put it into your themes header.php file. The URL of the asset you want needs to go within the brackets and you need to define the type of file you're pushing as well.\n\nThe last argument, false, comes from a PHP header replace function part of the request. By default, if there are two of the same headers the second one will overwrite the first one unless you include the false argument which then allows multiple headers of the same type to be sent.\n\nThe optional replace parameter indicates whether the header should replace a previous similar header, or add a second header of the same type. By default it will replace, but if you pass in FALSE as the second argument you can force multiple headers of the same type. - from PHP Header Manual\n\nPush every time?\n\nThe nice thing about HTTP2 Server Push is that it will stop the request if it knows that the files are already cached on the browser, but it still starts the process of the request before this happens so you're using up a little bit of your visitors battery and bandwidth in the process.\n\nInstead what you would want to do is...\n\nCheck to see if it's the visitors first time to your site\nIf so, HTTP Server Push your files down\nIf not, just serve the regular page because the files will already be in cache\n\nFor this to work you need to work out who's been to your site before and who is a first time visitor. The best approach that I know about when it comes to that is to set a cookie on the user and check to see if it's there.... if it is they've been there before, and if not they haven't.\n\nSetting the Cookie\n\nThis requires a quick update to you functions.php file. The first part creates the function to check to see if a cookie exists, and if not then set one that expires in 30 days.\n\nThe second part add_action allows you to use the function in other PHP files.\n\nfunction is_first_time() {\n  if (isset($_COOKIE['_wp_first_time']) || is_user_logged_in()) {\n      return false;\n  } else {\n      // expires in 30 days.\n      setcookie('_wp_first_time', 1, time() + (WEEK_IN_SECONDS * 4), COOKIEPATH, COOKIE_DOMAIN, false);\n\n\n      return true;\n  }\n}\n\n\nadd_action( 'init', 'is_first_time');\n\nNow you can use is_first_time() in your PHP code as a mustard test.\n\nServing the right dish to the right person\n\nNow that I'm setting a cookie and checking it (twice... gonna find out who's naughty or nice), I can use that as a test and send something different based on the result.\n\nThe below code runs the test, and if it's the first time we push the vendor.css, styles.css and the logo--red.svg file down using the code we looked at in the very first part of this article. You'll notice that I'm also writing an empty div with a first or second class... this is just for debugging purposes so that I know if the cookie is working as expect.\n\n<?php\n  if (is_first_time()) {\n      header(\"Link: </wp-content/themes/rwd-is/vendor.css>; rel=preload; as=style\", false);\n      header(\"Link: </wp-content/themes/rwd-is/styles.css>; rel=preload; as=style\", false);\n      header(\"Link: </images/site/logo--red.svg>; rel=preload; as=image\", false);\n      echo '<div class=\"first\"></div>';  // Just here so I can see an update in the browser.\n  } else {\n     echo '<div class=\"second\"></div>';\n  }\n?>\n\nIn the second visit the CSS and SVG files will already be cached so they don't need to be pushed anymore.\n\n \n\nSo, no more critical CSS?\n\nThat's kind of up to you.  The CSS file should come down at the same time as the HTML document, but looking at the waterfall charts it's always a little bit afterwards. That might be fine, but if you're already controlling whether or not to Push files with a cookie you can always extend that and include some Critical CSS as part of the HTML request and thus having the first paint even faster.\n\nTo do this I've included another if statement to see if the user is on the home page (is_page(2)), if so they get the Critical Home CSS, otherwise they get the rest of the sites critical CSS.\n\n<?php\n  if (is_first_time()) {\n      header(\"Link: </wp-content/themes/rwd-is/vendor.css>; rel=preload; as=style\", false);\n      header(\"Link: </wp-content/themes/rwd-is/styles.css>; rel=preload; as=style\", false);\n      header(\"Link: </images/site/logo--red.svg>; rel=preload; as=image\", false);\n      echo '<div class=\"first\"></div>';  // Just here so I can see an update in the browser.\n      if ( is_page(2) ) {\n         get_template_part( 'template-parts/critical-css-home');\n      } else {\n         get_template_part( 'template-parts/critical-css-site');\n      }\n  } else {\n     echo '<div class=\"second\"></div>';\n  }\n?>\n\nAt the moment I've only got the two versions of the Critical CSS files, but over time I'll split those out to target the different sections of the site (Articles, Examples, Snippets etc).\n\nAny drawbacks?\n\nInitially, I was pretty chuffed with this approach and it was working a dream on my local environment. First visits had 3 files pushed down along with Critical CSS, and the secondary visits had no HTTP2 Server Push or critical CSS.\n\nOnce I pushed it live I checked again and BAM, it still worked! The files were being pushed on the first view and the Critical CSS was there too! It wasn't until I refreshed and got the same page again that I realised something was wrong.\n\nAfter a few minutes I realised it was because the site sits behind Cloudflare which in turn acts like a CDN... well it is a CDN and that's why I use it. Unfortunately, Cloudflare caches the first version of the page from the Origin Server which is always going to be the first visit version... and then because it's cached it is then served to all follow up requests.\n\nNow before you say, \"Surely Cloudflare have taken this into consideration\" the answer is YES, they have. At the moment I'm paying $25 a month to Cloudflare for this site, $20 for Pro and $5 for a dedicated SSL certificate. The COOKIE based caching that can be available in the Page Rules doesn't kick in until you're paying $200 a month for Business which is unfortunately out of my immediate budget.\n\nThis means that for now I have a choice either\n\nKeep using HTTP2 Server Push for every request and rely on the fact that the browser will kill the connection once it realises that I already have the file in cache\nStop using HTTP2 Server Push for the files and go back to using Critical CSS for every page and lazy loading in CSS\nPony up the $200 a month to allow caching via Cookies\nStop using Cloudflare altogether\n\nI haven't decided yet.\n\nConclusion\n\nHopefully that provides you with a few ideas to get you going with using HTTP2 Push. If it's sparked a few more ideas about how you can improve performance with H2 then please write about it and let me know, it would be great to feature more and different ways to approach these new tools we have.\n\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Advanced Javascript course with code bnC2e .\n\nLOGIN\nJavaScript Modules: From IIFEs to CommonJS to ES6 Modules\nTyler McGinnis\nUpdated January 15, 2019\n12 minute read\nTABLE OF CONTENTS\nIIFE\nModule Bundlers\nES Modules\nTree Shaking\n\nI've taught JavaScript for a long time to a lot of people. Consistently the most commonly under-learned aspect of the language is the module system. There's a good reason for that. Modules in JavaScript have a strange and erratic history. In this post, we'll walk through that history and you'll learn modules of the past to better understand how JavaScript modules work today.\n\nBefore we learn how to create modules in JavaScript, we first need to understand what they are and why they exist. Look around you right now. Any marginally complex item that you can see is probably built using individual pieces that when put together, form the item.\n\nLet's take a watch for example.\n\nA simple wristwatch is made up of hundreds of internal pieces. Each has a specific purpose and clear boundaries for how it interacts with the other pieces. Put together, all of these pieces form the whole of the watch. Now I'm no watch engineer, but I think the benefits of this approach are pretty transparent.\n\nReusability\n\nTake a look at the diagram above one more time. Notice how many of the same pieces are being used throughout the watch. Through highly intelligent design decisions centered on modularity, they're able to re-use the same components throughout different aspects of the watch design. This ability to re-use pieces simplifies the manufacturing process and, I'm assuming, increases profit.\n\nComposability\n\nThe diagram is a beautiful illustration of composability. By establishing clear boundaries for each individual component, they're able to compose each piece together to create a fully functioning watch out of tiny, focused pieces.\n\nLeverage\n\nThink about the manufacturing process. This company isn't making watches, it's making individual components that together form a watch. They could create those pieces in house, they could outsource them and leverage other manufacturing plants, it doesn't matter. The most important thing is that each piece comes together in the end to form a watch - where those pieces were created is irrelevant.\n\nIsolation\n\nUnderstanding the whole system is difficult. Because the watch is composed of small, focused pieces, each of those pieces can be thought about, built and or repaired in isolation. This isolation allows multiple people to work individually on the watch while not bottle-necking each other. Also if one of the pieces breaks, instead of replacing the whole watch, you just have to replace the individual piece that broke.\n\nOrganization\n\nOrganization is a byproduct of each individual piece having a clear boundary for how it interacts with other pieces. With this modularity, organization naturally occurs without much thought.\n\nWe've seen the obvious benefits of modularity when it comes to everyday items like a watch, but what about software? Turns out, it's the same idea with the same benefits. Just how the watch was designed, we should design our software separated into different pieces where each piece has a specific purpose and clear boundaries for how it interacts with other pieces. In software, these pieces are called modules. At this point, a module might not sound too different from something like a function or a React component. So what exactly would a module encompass?\n\nEach module has three parts - dependencies (also called imports), code, and exports.\n\nimports\n\n\ncode\n\n\nexports\nDependencies (Imports)\n\nWhen one module needs another module, it can import that module as a dependency. For example, whenever you want to create a React component, you need to import the react module. If you want to use a library like lodash, you'd need import the lodash module.\n\nCode\n\nAfter you've established what dependencies your module needs, the next part is the actual code of the module.\n\nExports\n\nExports are the \"interface\" to the module. Whatever you export from a module will be available to whoever imports that module.\n\nEnough with the high-level stuff, let's dive into some real examples.\n\nFirst, let's look at React Router. Conveniently, they have a modules folder. This folder is filled with... modules, naturally. So in React Router, what makes a \"module\". Turns out, for the most part, they map their React components directly to modules. That makes sense and in general, is how you separate components in a React project. This works because if you re-read the watch above but swap out \"module\" with \"component\", the metaphors still make sense.\n\nLet's look at the code from the MemoryRouter module. Don't worry about the actual code for now, but focus on more of the structure of the module.\n\n// imports\nimport React from \"react\";\nimport { createMemoryHistory } from \"history\";\nimport Router from \"./Router\";\n\n\n// code\nclass MemoryRouter extends React.Component {\n  history = createMemoryHistory(this.props);\n  render() {\n    return (\n      <Router\n        history={this.history}\n        children={this.props.children}\n      />;\n    )\n  }\n}\n\n\n// exports\nexport default MemoryRouter;\n\nYou'll notice at the top of the module they define their imports, or what other modules they need to make the MemoryRouter module work properly. Next, they have their code. In this case, they create a new React component called MemoryRouter. Then at the very bottom, they define their export, MemoryRouter. This means that whenever someone imports the MemoryRouter module, they'll get the MemoryRouter component.\n\nNow that we understand what a module is, let's look back at the benefits of the watch design and see how, by following a similar modular architecture, those same benefits can apply to software design.\n\nReusability\n\nModules maximize reusability since a module can be imported and used in any other module that needs it. Beyond this, if a module would be beneficial in another program, you can create a package out of it. A package can contain one or more modules and can be uploaded to NPM to be downloaded by anyone. react, lodash, and jquery are all examples of NPM packages since they can be installed from the NPM directory.\n\nComposability\n\nBecause modules explicitly define their imports and exports, they can be easily composed. More than that, a sign of good software is that is can be easily deleted. Modules increase the \"delete-ability\" of your code.\n\nLeverage\n\nThe NPM registry hosts the world's largest collection of free, reusable modules (over 700,000 to be exact). Odds are if you need a specific package, NPM has it.\n\nIsolation\n\nThe text we used to describe the isolation of the watch fits perfectly here as well. \"Understanding the whole system is difficult. Because (your software) is composed of small, focused (modules), each of those (modules) can be thought about, built and or repaired in isolation. This isolation allows multiple people to work individually on the (app) while not bottle-necking each other. Also if one of the (modules) breaks, instead of replacing the whole (app), you just have to replace the individual (module) that broke.\"\n\nOrganization\n\nPerhaps the biggest benefit in regards to modular software is organization. Modules provide a natural separation point. Along with that, as we'll see soon, modules prevent you from polluting the global namespace and allow you to avoid naming collisions.\n\nAt this point, you know the benefits and understand the structure of modules. Now it's time to actually start building them. Our approach to this will be pretty methodical. The reason for that is because, as mentioned earlier, modules in JavaScript have a strange history. Even though there are \"newer\" ways to create modules in JavaScript, some of the older flavors still exist and you'll see them from time to time. If we jump straight to modules in 2018, I'd be doing you a disservice. With that said, we're going to take it back to late 2010. AngularJS was just released and jQuery is all the rage. Companies are finally using JavaScript to build complex web applications and with that complexity comes a need to manage it - via modules.\n\nYour first intuition for creating modules may be to separate code by files.\n\n// users.js\nvar users = [\"Tyler\", \"Sarah\", \"Dan\"]\n\n\nfunction getUsers() {\n  return users\n}\n// dom.js\n\n\nfunction addUserToDOM(name) {\n  const node = document.createElement(\"li\")\n  const text = document.createTextNode(name)\n  node.appendChild(text)\n\n\n  document.getElementById(\"users\")\n    .appendChild(node)\n}\n\n\ndocument.getElementById(\"submit\")\n  .addEventListener(\"click\", function() {\n    var input = document.getElementById(\"input\")\n    addUserToDOM(input.value)\n\n\n    input.value = \"\"\n})\n\n\nvar users = window.getUsers()\nfor (var i = 0; i < users.length; i++) {\n  addUserToDOM(users[i])\n}\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Users</title>\n  </head>\n\n\n  <body>\n    <h1>Users</h1>\n    <ul id=\"users\"></ul>\n    <input\n      id=\"input\"\n      type=\"text\"\n      placeholder=\"New User\">\n    </input>\n    <button id=\"submit\">Submit</button>\n\n\n    <script src=\"users.js\"></script>\n    <script src=\"dom.js\"></script>\n  </body>\n</html>\n\nThe full code can be found here.\n\nOK. We've successfully separated our app into its own files. Does that mean we've successfully implemented modules? No. Absolutely not. Literally, all we've done is separate where the code lives. The only way to create a new scope in JavaScript is with a function. All the variables we declared that aren't in a function are just living on the global object. You can see this by logging the window object in the console. You'll notice we can access, and worse, change addUsers, users, getUsers, addUserToDOM. That's essentially our entire app. We've done nothing to separate our code into modules, all we've done is separate it by physical location. If you're new to JavaScript, this may be a surprise to you but it was probably your first intuition for how to implement modules in JavaScript.\n\nSo if file separation doesn't give us modules, what does? Remember the advantages to modules - reusability, composability, leverage, isolation, organization. Is there a native feature of JavaScript we could use to create our own \"modules\" that would give us the same benefits? What about a regular old function? When you think of the benefits of a function, they align nicely to the benefits of modules. So how would this work? What if instead of having our entire app live in the global namespace, we instead expose a single object, we'll call it APP. We can then put all the methods our app needs to run under the APP, which will prevent us from polluting the global namespace. We could then wrap everything else in a function to keep it enclosed from the rest of the app.\n\n// App.js\nvar APP = {}\n// users.js\nfunction usersWrapper () {\n  var users = [\"Tyler\", \"Sarah\", \"Dan\"]\n\n\n  function getUsers() {\n    return users\n  }\n\n\n  APP.getUsers = getUsers\n}\n\n\nusersWrapper()\n// dom.js\n\n\nfunction domWrapper() {\n  function addUserToDOM(name) {\n    const node = document.createElement(\"li\")\n    const text = document.createTextNode(name)\n    node.appendChild(text)\n\n\n    document.getElementById(\"users\")\n      .appendChild(node)\n  }\n\n\n  document.getElementById(\"submit\")\n    .addEventListener(\"click\", function() {\n      var input = document.getElementById(\"input\")\n      addUserToDOM(input.value)\n\n\n      input.value = \"\"\n  })\n\n\n  var users = APP.getUsers()\n  for (var i = 0; i < users.length; i++) {\n    addUserToDOM(users[i])\n  }\n}\n\n\ndomWrapper()\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Users</title>\n  </head>\n\n\n  <body>\n    <h1>Users</h1>\n    <ul id=\"users\"></ul>\n    <input\n      id=\"input\"\n      type=\"text\"\n      placeholder=\"New User\">\n    </input>\n    <button id=\"submit\">Submit</button>\n\n\n    <script src=\"app.js\"></script>\n    <script src=\"users.js\"></script>\n    <script src=\"dom.js\"></script>\n  </body>\n</html>\n\nThe full code can be found here.\n\nNow if you look at the window object, instead of it having all the important pieces of our app, it just has APP and our wrapper functions, usersWrapper and domWrapper. More important, none of our important code (like users) can be modified since they're no longer on the global namespace.\n\nLet's see if we can take this a step further. Is there a way to get rid of our wrapper functions? Notice that we're defining and then immediately invoking them. The only reason we gave them a name was so we could immediately invoke them. Is there a way to immediately invoke an anonymous function so we wouldn't have to give them a name? Turns out there is and it even has a fancy name - Immediately Invoked Function Expression or IIFE for short.\n\nIIFE\n\nHere's what it looks like.\n\n(function () {\n  console.log('Pronounced IF-EE')\n})()\n\nNotice it's just an anonymous function expression that we've wrapped in parens ().\n\n(function () {\n  console.log('Pronounced IF-EE')\n})\n\nThen, just like any other function, in order to invoke it, we add another pair of parens to the end of it.\n\n(function () {\n  console.log('Pronounced IF-EE')\n})()\n\nNow let's use our knowledge of IIFEs to get rid of our ugly wrapper functions and clean up the global namespace even more.\n\n// users.js\n\n\n(function () {\n  var users = [\"Tyler\", \"Sarah\", \"Dan\"]\n\n\n  function getUsers() {\n    return users\n  }\n\n\n  APP.getUsers = getUsers\n})()\n// dom.js\n\n\n(function () {\n  function addUserToDOM(name) {\n    const node = document.createElement(\"li\")\n    const text = document.createTextNode(name)\n    node.appendChild(text)\n\n\n    document.getElementById(\"users\")\n      .appendChild(node)\n  }\n\n\n  document.getElementById(\"submit\")\n    .addEventListener(\"click\", function() {\n      var input = document.getElementById(\"input\")\n      addUserToDOM(input.value)\n\n\n      input.value = \"\"\n  })\n\n\n  var users = APP.getUsers()\n  for (var i = 0; i < users.length; i++) {\n    addUserToDOM(users[i])\n  }\n})()\n\nThe full code can be found here.\n\nchef's kiss. Now if you look at the window object, you'll notice the only thing we've added to it is APP, which we use as a namespace for all the methods our app needs to properly run.\n\nLet's call this pattern the IIFE Module Pattern.\n\nWhat are the benefits to the IIFE Module Pattern? First and foremost, we avoid dumping everything onto the global namespace. This will help with variable collisions and keeps our code more private. Does it have any downsides? It sure does. We still have 1 item on the global namespace, APP. If by chance another library uses that same namespace, we're in trouble. Second, you'll notice the order of the <script> tags in our index.html file matter. If you don't have the scripts in the exact order they are now, the app will break.\n\nEven though our solution isn't perfect, we're making progress. Now that we understand the pros and cons to the IIFE module pattern, if we were to make our own standard for creating and managing modules, what features would it have?\n\nEarlier our first instinct for the separation of modules was to have a new module for each file. Even though that doesn't work out of the box with JavaScript, I think that's an obvious separation point for our modules. Each file is its own module. Then from there, the only other feature we'd need is to have each file define explicit imports (or dependencies) and explicit exports which will be available to any other file that imports the module.\n\nOur Module Standard\n\n\n1) File based\n2) Explicit imports\n3) Explicit exports\n\nNow that we know the features our module standard will need, let's dive into the API. The only real API we need to define is what imports and exports look like. Let's start with exports. To keep things simple, any information regarding the module can go on the module object. Then, anything we want to export from a module we can stick on module.exports. Something like this\n\nvar users = [\"Tyler\", \"Sarah\", \"Dan\"]\n\n\nfunction getUsers() {\n  return users\n}\n\n\nmodule.exports.getUsers = getUsers\n\nThis means another way we can write it is like this\n\nvar users = [\"Tyler\", \"Sarah\", \"Dan\"]\n\n\nfunction getUsers() {\n  return users\n}\n\n\nmodule.exports = {\n  getUsers: getUsers\n}\n\nRegardless of how many methods we had, we could just add them to the exports object.\n\n// users.js\n\n\nvar users = [\"Tyler\", \"Sarah\", \"Dan\"]\n\n\nmodule.exports = {\n  getUsers: function () {\n    return users\n  },\n  sortUsers: function () {\n    return users.sort()\n  },\n  firstUser: function () {\n    return users[0]\n  }\n}\n\nNow that we've figured out what exporting from a module looks like, we need to figure out what the API for importing modules looks like. To keep this one simple as well, let's pretend we had a function called require. It'll take a string path as its first argument and will return whatever is being exported from that path. Going along with our users.js file above, to import that module would look something like this\n\nvar users = require('./users')\n\n\nusers.getUsers() // [\"Tyler\", \"Sarah\", \"Dan\"]\nusers.sortUsers() // [\"Dan\", \"Sarah\", \"Tyler\"]\nusers.firstUser() // [\"Tyler\"]\n\nPretty slick. With our hypothetical module.exports and require syntax, we've kept all of the benefits of modules while getting rid of the two downsides to our IIFE Modules pattern.\n\nAs you probably guessed by now, this isn't a made up standard. It's real and it's called CommonJS.\n\nThe CommonJS group defined a module format to solve JavaScript scope issues by making sure each module is executed in its own namespace. This is achieved by forcing modules to explicitly export those variables it wants to expose to the \"universe\", and also by defining those other modules required to properly work.\n\n- Webpack docs\n\nIf you've used Node before, CommonJS should look familiar. The reason for that is because Node uses (for the most part) the CommonJS specification in order to implement modules. So with Node, you get modules out of the box using the CommonJS require and module.exports syntax you saw earlier. However, unlike Node, browsers don't support CommonJS. In fact, not only do browsers not support CommonJS, but out of the box, CommonJS isn't a great solution for browsers since it loads modules synchronously. In the land of the browser, the asynchronous loader is king.\n\nSo in summary, there are two problems with CommonJS. First, the browser doesn't understand it. Second, it loads modules synchronously which in the browser would be a terrible user experience. If we can fix those two problems, we're in good shape. So what's the point of spending all this time talking about CommonJS if it's not even good for browsers? Well, there is a solution and it's called a module bundler.\n\nModule Bundlers\n\nWhat a JavaScript module bundler does is it examines your codebase, looks at all the imports and exports, then intelligently bundles all of your modules together into a single file that the browser can understand. Then instead of including all the scripts in your index.html file and worrying about what order they go in, you include the single bundle.js file the bundler creates for you.\n\napp.js ---> |         |\nusers.js -> | Bundler | -> bundle.js\ndom.js ---> |         |\n\nSo how does a bundler actually work? That's a really big question and one I don't fully understand myself, but here's the output after running our simple code through Webpack, a popular module bundler.\n\nThe full code can with CommonJS and Webpack can be found here. You'll need to download the code, run \"npm install\", then run \"webpack\".\n\n(function(modules) { // webpackBootstrap\n  // The module cache\n  var installedModules = {};\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    if(installedModules[moduleId]) {\n      return installedModules[moduleId].exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = installedModules[moduleId] = {\n      i: moduleId,\n      l: false,\n      exports: {}\n    };\n    // Execute the module function\n    modules[moduleId].call(\n      module.exports,\n      module,\n      module.exports,\n      __webpack_require__\n    );\n    // Flag the module as loaded\n    module.l = true;\n    // Return the exports of the module\n    return module.exports;\n  }\n  // expose the modules object (__webpack_modules__)\n  __webpack_require__.m = modules;\n  // expose the module cache\n  __webpack_require__.c = installedModules;\n  // define getter function for harmony exports\n  __webpack_require__.d = function(exports, name, getter) {\n    if(!__webpack_require__.o(exports, name)) {\n      Object.defineProperty(\n        exports,\n        name,\n        { enumerable: true, get: getter }\n      );\n    }\n  };\n  // define __esModule on exports\n  __webpack_require__.r = function(exports) {\n    if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n    }\n    Object.defineProperty(exports, '__esModule', { value: true });\n  };\n  // create a fake namespace object\n  // mode & 1: value is a module id, require it\n  // mode & 2: merge all properties of value into the ns\n  // mode & 4: return value when already ns object\n  // mode & 8|1: behave like require\n  __webpack_require__.t = function(value, mode) {\n    if(mode & 1) value = __webpack_require__(value);\n    if(mode & 8) return value;\n    if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n    var ns = Object.create(null);\n    __webpack_require__.r(ns);\n    Object.defineProperty(ns, 'default', { enumerable: true, value: value });\n    if(mode & 2 && typeof value != 'string')\n      for(var key in value)\n        __webpack_require__.d(ns, key, function(key) {\n          return value[key];\n        }.bind(null, key));\n    return ns;\n  };\n  // getDefaultExport function for compatibility with non-harmony modules\n  __webpack_require__.n = function(module) {\n    var getter = module && module.__esModule ?\n      function getDefault() { return module['default']; } :\n      function getModuleExports() { return module; };\n    __webpack_require__.d(getter, 'a', getter);\n    return getter;\n  };\n  // Object.prototype.hasOwnProperty.call\n  __webpack_require__.o = function(object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  // __webpack_public_path__\n  __webpack_require__.p = \"\";\n  // Load entry module and return exports\n  return __webpack_require__(__webpack_require__.s = \"./dom.js\");\n})\n/************************************************************************/\n({\n\n\n/***/ \"./dom.js\":\n/*!****************!*\\\n  !*** ./dom.js ***!\n  \\****************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\neval(`\n  var getUsers = __webpack_require__(/*! ./users */ \\\"./users.js\\\").getUsers\\n\\n\n  function addUserToDOM(name) {\\n\n    const node = document.createElement(\\\"li\\\")\\n\n    const text = document.createTextNode(name)\\n\n    node.appendChild(text)\\n\\n\n    document.getElementById(\\\"users\\\")\\n\n      .appendChild(node)\\n}\\n\\n\n    document.getElementById(\\\"submit\\\")\\n\n      .addEventListener(\\\"click\\\", function() {\\n\n        var input = document.getElementById(\\\"input\\\")\\n\n        addUserToDOM(input.value)\\n\\n\n        input.value = \\\"\\\"\\n})\\n\\n\n        var users = getUsers()\\n\n        for (var i = 0; i < users.length; i++) {\\n\n          addUserToDOM(users[i])\\n\n        }\\n\\n\\n//# sourceURL=webpack:///./dom.js?`\n);}),\n\n\n/***/ \"./users.js\":\n/*!******************!*\\\n  !*** ./users.js ***!\n  \\******************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n\neval(`\n  var users = [\\\"Tyler\\\", \\\"Sarah\\\", \\\"Dan\\\"]\\n\\n\n  function getUsers() {\\n\n    return users\\n}\\n\\nmodule.exports = {\\n\n      getUsers: getUsers\\n\n    }\\n\\n//# sourceURL=webpack:///./users.js?`);})\n});\n\nYou'll notice that there's a lot of magic going on there (you can read the comments if you want to know exactly what's happening), but one thing that's interesting is they wrap all the code inside of a big IIFE. So they've figured out a way to get all of the benefits of a nice module system without the downsides, simply by utilizing our old IIFE Module Pattern.\n\nWhat really future proofs JavaScript is that it's a living language. TC-39, the standards committee around JavaScript, meets a few times a year to discuss potential improvements to the language. At this point, it should be pretty clear that modules are a critical feature for writing scalable, maintainable JavaScript. In ~2013 (and probably long before) it was dead obvious that JavaScript needed a standardized, built in solution for handling modules. This kicked off the process for implementing modules natively into JavaScript.\n\nKnowing what you know now, if you were tasked with creating a module system for JavaScript, what would it look like? CommonJS got it mostly right. Like CommonJS, each file could be a new module with a clear way to define imports and exports - obviously, that's the whole point. A problem we ran into with CommonJS is it loads modules synchronously. That's great for the server but not for the browser. One change we could make would be to support asynchronous loading. Another change we could make is rather than a require function call, since we're talking about adding to the language itself, we could define new keywords. Let's go with import and export.\n\nWithout going too far down the \"hypothetical, made up standard\" road again, the TC-39 committee came up with these exact same design decisions when they created \"ES Modules\", now the standardized way to create modules in JavaScript. Let's take a look at the syntax.\n\nES Modules\n\nAs mentioned above, to specify what should be exported from a module you use the export keyword.\n\n// utils.js\n\n\n// Not exported\nfunction once(fn, context) {\n  var result\n  return function() {\n    if(fn) {\n      result = fn.apply(context || this, arguments)\n      fn = null\n    }\n    return result\n  }\n}\n\n\n// Exported\nexport function first (arr) {\n  return arr[0]\n}\n\n\n// Exported\nexport function last (arr) {\n  return arr[arr.length - 1]\n}\n\nNow to import first and last, you have a few different options. One is to import everything that is being exported from utils.js.\n\nimport * as utils from './utils'\n\n\nutils.first([1,2,3]) // 1\nutils.last([1,2,3]) // 3\n\nBut what if we didn't want to import everything the module is exporting? In this example, what if we wanted to import first but not last? This is where you can use what's called named imports (it looks like destructuring but it's not).\n\nimport { first } from './utils'\n\n\nfirst([1,2,3]) // 1\n\nWhat's cool about ES Modules is not only can you specify multiple exports, but you can also specify a default export.\n\n// leftpad.js\n\n\nexport default function leftpad (str, len, ch) {\n  var pad = '';\n  while (true) {\n    if (len & 1) pad += ch;\n    len >>= 1;\n    else break;\n  }\n  return pad + str;\n}\n\nWhen you use a default export, that changes how you import that module. Instead of using the * syntax or using named imports, you just use import name from './path'.\n\nimport leftpad from './leftpad'\n\nNow, what if you had a module that was exporting a default export but also other regular exports as well? Well, you'd do it how you'd expect.\n\n// utils.js\n\n\nfunction once(fn, context) {\n  var result\n  return function() {\n    if(fn) {\n      result = fn.apply(context || this, arguments)\n      fn = null\n    }\n    return result\n  }\n}\n\n\n// regular export\nexport function first (arr) {\n  return arr[0]\n}\n\n\n// regular export\nexport function last (arr) {\n  return arr[arr.length - 1]\n}\n\n\n// default export\nexport default function leftpad (str, len, ch) {\n  var pad = '';\n  while (true) {\n    if (len & 1) pad += ch;\n    len >>= 1;\n    else break;\n  }\n  return pad + str;\n}\n\nNow, what would the import syntax look like? In this case, again, it should be what you expect.\n\nimport leftpad, { first, last } from './utils'\n\nPretty slick, yeah? leftpad is the default export and first and last are just the regular exports.\n\nWhat's interesting about ES Modules is, because they're now native to JavaScript, modern browsers support them without using a bundler. Let's look back at our simple Users example from the beginning of this tutorial and see what it would look like with ES Modules.\n\nThe full code can be found here.\n\n// users.js\n\n\nvar users = [\"Tyler\", \"Sarah\", \"Dan\"]\n\n\nexport default function getUsers() {\n  return users\n}\n// dom.js\n\n\nimport getUsers from './users.js'\n\n\nfunction addUserToDOM(name) {\n  const node = document.createElement(\"li\")\n  const text = document.createTextNode(name)\n  node.appendChild(text)\n\n\n  document.getElementById(\"users\")\n    .appendChild(node)\n}\n\n\ndocument.getElementById(\"submit\")\n  .addEventListener(\"click\", function() {\n    var input = document.getElementById(\"input\")\n    addUserToDOM(input.value)\n\n\n    input.value = \"\"\n})\n\n\nvar users = getUsers()\nfor (var i = 0; i < users.length; i++) {\n  addUserToDOM(users[i])\n}\n\nNow here's the cool part. With our IIFE pattern, we still needed to include a script to every JS file (and in order, none the less). With CommonJS we needed to use a bundler like Webpack and then include a script to the bundle.js file. With ES Modules, in modern browsers, all we need to do is include our main file (in this case dom.js) and add a type='module' attribute to the script tab.\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Users</title>\n  </head>\n\n\n  <body>\n    <h1>Users</h1>\n    <ul id=\"users\">\n    </ul>\n    <input id=\"input\" type=\"text\" placeholder=\"New User\"></input>\n    <button id=\"submit\">Submit</button>\n\n\n    <script type=module src='dom.js'></script>\n  </body>\n</html>\nTree Shaking\n\nThere's one more difference between CommonJS modules and ES Modules that we didn't cover above.\n\nWith CommonJS, you can require a module anywhere, even conditionally.\n\nif (pastTheFold === true) {\n  require('./parallax')\n}\n\nBecause ES Modules are static, import statements must always be at the top level of a module. You can't conditionally import them.\n\nif (pastTheFold === true) {\n  import './parallax' // \"import' and 'export' may only appear at the top level\"\n}\n\nThe reason this design decision was made was because by forcing modules to be static, the loader can statically analyze the module tree, figure out which code is actually being used, and drop the unused code from your bundle. That was a lot of big words. Said differently, because ES Modules force you to declare your import statements at the top of your module, the bundler can quickly understand your dependency tree. When it understands your dependency tree, it can see what code isn't being used and drop it from the bundle. This is called Tree Shaking or Dead Code Elimination.\n\nThere is a stage 4 proposal for dynamic imports which will allow you to conditionally load modules via import().\n\nI hope diving into the history of JavaScript modules has helped you gain not only a better appreciation for ES Modules, but also a better understanding of their design decisions. For a deeper dive into ES Modules specifically, visit ES Modules in Depth.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our advanced-javascript course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,572 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,572 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nHow to validate an email address in JavaScript (2022)\nTyler McGinnis\nUpdated December 6, 2018\n1 minute read\n\nEmail validation is hard. With the vast amount of complex, but valid email addresses that exist today, the only way to truly tell if an email address is valid is to send the email and see if it bounces. With that said, there are a few things we can do on the front end to make the experience better for everyone. In this post we'll talk about few common approaches for validating email addresses in JavaScript.\n\nFirst, when validating email addresses I believe it's better to error on the permissive side. I'd much rather let pass a few fake email addresses than reject a valid one. Front-end email validation is about figuring out if the syntax is correct, not if the email address is valid. With that said, we'll start off with the most permissive solution and work our way towards the other end.\n\nfunction emailIsValid (email) {\n  return /\\S+@\\S+\\.\\S+/.test(email)\n}\n\nIf you're not familiar with RegEx, /\\S+@\\S+\\.\\S+/ is testing for the most basic email address structure, _@_._. That's typically all I ever assume about an email address. If the email the user types in doesn't follow that structure, odds are they made a typo.\n\nOne issue with the Regex above is it'll fail on this format: _@_@._. To fix that, we can change up our Regex a bit.\n\nfunction emailIsValid (email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n}\n\n\nemailIsValid('tyler@tyler@ui.dev') // false\nemailIsValid('tyler@ui.dev') // true\n\nThat's it. Anything beyond this is going to be too opinionated. You could find some other solutions by googling around but I recommend re-thinking your approach if the above examples don't work for you.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,570 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,570 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nThe printer is a device too!\nJustin Avery\nUpdated August 2, 2012\n1 minute read\n\nBrad Frost created one of the more commonly used photos found on responsive design presentations (see below). This depicts the world we live in today which contains hundreds of devices with internet capabilities.\n\nThe web is available on all these devices, and there's more coming\n\nWith every one of these devices brings the challenge for our websites to respond in a logical, beautiful and above all user friendly way.\n\nThe problem is that we're focusing too much on the future devices and we've forgotten the devices that have been with us for years.\n\nThe Printer\n\nWhile not the snazziest of devices connected to the internet it STILL is a device that can render our web pages, and unfortunately this is probably the most forgotten and least styled of all the devices around.\n\nThe printer has become one of the forgotten devices, yet we've been able to target it well before CSS3 Media Queries\n\nThe Print Stylesheet\n\nIn October 2013 I did a talk at the Squiz User Conference on how to make changes to your website without actually changing anything at all. While preparing the talk I took at leaf out of another talk I had seen during dConstruct by Maciej Cegłowski, creator of PinBoard. The leaf I took was to provide the audience with something that they could use on Monday morning when they got back to work, and pass it off to their boss as it it was their own.  For me this takeaway was the Squiz.io site.\n\nI wanted it to be more than a website so I added some HTML5 editable regions to allow the reader to update the title and description, and then applied a Print Stylesheet so it was nicely formatted for then to print and pass off as their own ideas.\n\nHere's the simple but effective styles.\n\n@media print {\n  section { display: block; page-break-before: always; }\n  pre code {page-break-after: always;}\n  @page {\nmargin-top:0.4cm;\nmargin: 0.5cm;\n}\np a, code, pre {\nword-wrap: break-word;\n}\nimg {display:none;}\n\n\npre a[href]:after {\n    content: \"\"; }\n\n\n\n\npre abbr[title]:after {\n    content: \"\"; }\n\n\npre   .ir a:after,\n  pre a[href^=\"javascript:\"]:after,\n  pre a[href^=\"#\"]:after {\n    content: \"\"; }\n\n\n.no-print {display:none;}\n\n\n}\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Classic React course with code bnC2e .\n\nLOGIN\nJSX Tips and Gotchas for Beginners\nTyler McGinnis\nUpdated July 31, 2020\n2 minute read\n\nFor the most part, JSX should feel pretty natural. There are a few things to be aware of though.\n\nVariables in JSX\n\nWhenever you want to use an expression (something that produces a value) in JSX, you need to wrap the expression in single curly braces, {}.\n\nrender() {\n  const name = 'Tyler'\n\n\n  return (\n    <div>\n      <h1>Hello, {name}</h1>\n      <p>Today is {new Date().toLocaleDateString()}</p>\n      <p>What is 2 + 2? {2 + 2}</p>\n    </div>\n  )\n}\nRendering nothing\n\nIf you want React to render nothing, return null.\n\nrender() {\n  if (isLoading() === true) {\n    return null\n  }\n\n\n  return (\n    ...\n  )\n}\nConditional Rendering\n\nThe ability to conditionally render UI based on a piece of state is pretty foundational to any front-end framework. Typically, this functionality is built natively into the framework.\n\n// Angular\n<h1 *ngIf=\"authed; else elseBlock\">\n  Welcome back!\n</h1>\n<ng-template #elseBlock>\n  <h1>Login to see your dashboard</h1>\n</ng-template>\n\n\n// Vue\n<h1 v-if=\"authed\">Welcome back!</h1>\n<h1 v-else>Login to see your dashboard</h1>\n\nWith React, it's a bit different. Instead of increasing the API surface layer, because JSX is \"Just JavaScript\", React can leverage native JavaScript features to accomplish the same task. There are pros and cons to this approach, but if you're already familiar with conditional rendering in JavaScript, you'll feel pretty comfortable.\n\nIf/else\n\nThe most basic example is just using a simple if/else statement.\n\nrender() {\n  const authed = isAuthed()\n\n\n  if (authed === true) {\n    return <h1>Welcome back!</h1>\n  } else {\n    return <h1>Login to see your dashboard</h1>\n  }\n}\n\nAgain, because we're just writing JavaScript, if we had another conditional, we'd just add an else if case.\n\nrender() {\n  const authed = isAuthed()\n  const firstLogin = isNew()\n\n\n  if (firstLogin === true) {\n    return <h1>👋 Welcome!</hi>\n  } else if (authed === true) {\n    return <h1>Welcome back!</h1>\n  } else {\n    return  <h1>Login to see your dashboard</h1>\n  }\n}\nTernary Operator\n\nIf you're rendering different UI based on a single condition, typically you'd use JavaScript's ternary operator.\n\nrender() {\n  return isAuthed() === true\n    ? <h1>Welcome back!</h1>\n    : <h1>Login to see your dashboard</h1>\n}\n\nWe learned earlier that any expression needs to be wrapped in {}. We can use that knowledge to render a ternary inside of JSX.\n\nrender() {\n  return (\n    <div>\n      <Logo />\n      {isAuthed() === true\n        ? <h1>Welcome back!</h1>\n        : <h1>Login to see your dashboard</h1>}\n    </div>\n  )\n}\n\nEarlier we also learned that we can render null if we want React to render nothing. This is a common pattern when using ternaries.\n\nrender() {\n  return (\n    <div>\n      <Logo />\n      {showWarning() === true\n        ? <Warning />\n        : null}\n    </div>\n  )\n}\nLogical && Operator\n\nIf you're not already familiar with it, JavaScript has an && operator. Typically it's used in conditionals as an \"AND\" statement.\n\nif (user && authed) {}\n\nIn the example above, it's important to note that authed won't be checked if user isn't truthy. Using that logic, we can use the && operator as a more concise ternary that renders null.\n\nrender() {\n  return (\n    <div>\n      <Logo />\n      {showWarning() === true && <Warning />}\n    </div>\n  )\n}\nReact Fragments\n\nCan you spot what's wrong with the following JSX code?\n\nrender() {\n  const name = 'Tyler'\n\n\n  return (\n    <h1>Hello, {name}</h1>\n    <p>Today is {getDay()}</p>\n    <p>What is 2 + 2? {2 + 2}</p>\n  )\n}\n\nIt looks fine, right? Unfortunately, it'll throw an error.\n\nAdjacent JSX elements must be wrapped in an enclosing tag.\n\nThat's a fancy way to say that you can only ever return one top-level element from a component. In our example, we're trying to return 3. We can fix this by wrapping everything in a div.\n\nrender() {\n  const name = 'Tyler'\n\n\n  return (\n    <div>\n      <h1>Hello, {name}</h1>\n      <p>Today is {getDay()}</p>\n      <p>What is 2 + 2? {2 + 2}</p>\n    </div>\n  )\n}\n\nThat fixes the issue, but now we have a semantic problem. We're unnecessarily creating an extra div. This is the exact use case that React.Fragment was created for. If you want to return adjacent elements but don't want to change your markup, wrap them in <React.Fragment>.\n\nrender() {\n  const name = 'Tyler'\n\n\n  return (\n    <React.Fragment>\n      <h1>Hello, {name}</h1>\n      <p>Today is {getDay()}</p>\n      <p>What is 2 + 2? {2 + 2}</p>\n    </React.Fragment>\n  )\n}\n\nMuch better.\n\nThere also exists a shorthand syntax for React Fragment, but I don't use it.\n\nrender() {\n  const name = 'Tyler'\n\n\n  return (\n    <>\n      <h1>Hello, {name}</h1>\n      <p>Today is {getDay()}</p>\n      <p>What is 2 + 2? {2 + 2}</p>\n    </>\n  )\n}\nCapitalization\n\nHow does React know the difference between a custom React component like <User /> and a built-in HTML element like <span>? The answer is probably simpler than you'd expect, it's based on the capitalization. Whenever you create a React component, you need to capitalize it. Otherwise, React will think it's a built-in HTML element.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our classic-react course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nCode Splitting with React, React.lazy, and React Router\nTyler McGinnis\nUpdated September 10, 2021\n4 minute read\nCheck your version\nThis post assumes you're using React Router v6. If not, find your version below.\nReact Router v4\nReact Router v5\n\nIf there's one stereotype of JavaScript developers that holds true more often than it should, it's the lack of care for large bundle sizes. The problem is historically it's been too easy to bloat your JavaScript bundle and too hard to do anything about it.\n\nNaturally, as you build your app, it gets larger. The larger it gets, the larger your bundle gets. The larger your bundle gets, the longer and more resources it takes to download. It's a vicious cycle that has plagued our industry for too long. To make it worse, since most developers have powerful laptops and fast internet connections, they never truly experience the pain they're causing for users with low-powered devices or slow internet.\n\nNow, what if this didn't have to be the case? What if you could build your app without ever having to ship a larger bundle size to your users? Sounds too good to be true, but it's now possible through a feature called \"Code Splitting\".\n\nThe idea is simple, don't download code until the user needs it. Your users shouldn't have to download your entire app when all they need is a piece of it. If a user is creating a new post, it doesn't make sense to have them download all the code for the /registration route. If a user is registering, they don't need the huge rich text editor your app needs on the /settings route. It's wasteful and some would argue disrespectful to those users who don't have the privilege of unlimited bandwidth. Code Splitting has not only gained much more popularity in recent years, but it's also become exponentially easier to pull off.\n\nIf you're familiar with ES modules, you know that they're completely static. This means you must specify what you're importing and exporting at compile time, not run time. This also means that you can't dynamically import a module based on some condition. imports need to be declared at the top of your file or they'll throw an error.\n\n// 🚫 'import' and 'export' may only appear at the top level\n\n\nif (!user) {\n  import * as api from \"./api\";\n}\n\nNow, what if import didn't have to be static? Meaning, what if the code above worked? What benefits would that give us?\n\nFirst, it would mean we could load certain modules on demand. That would be powerful since it would enable us to get closer to the vision of only downloading code the user needs.\n\nif (editingPost === true) {\n  import * as edit from \"./editpost\";\n\n\n  edit.showEditor();\n}\n\nAssuming editpost contained a pretty large rich text editor, we'd make sure we didn't download it until the user was actually ready to use it.\n\nAnother benefit would be better legacy support. You could hold off on downloading specific code until you were certain the user's browser didn't already have it natively.\n\nif (!window.Promise) {\n  import \"./PromisePolyfill\";\n}\n\nHere's the good news (that I kind of already alluded to earlier). This type of functionality does exist, it's supported by default with Create React App, and it's included in the ES2020 spec.\n\nThe difference is that instead of using import as you typically would, you use it like a function that returns a Promise. This Promise will resolve with the module once the module is completely loaded.\n\nif (editingPost === true) {\n  import('./editpost')\n    .then((module) => module.showEditor())\n    .catch((e) => )\n}\n\nBecause Code Splitting allows you to split your code into various bundles, naturally, this is a bundler-level feature.\n\nThough it works with Create React App out of the box, if you're not using CRA, you'll have to add it to your build process with whatever bundler you're using. Here's a guide to using it with Webpack.\n\nNow that we know how to import modules dynamically, the next step is figuring out how to use it with React and React Router.\n\nWe'll start off with a basic React/React Router app. We'll have three components, Home, Topics, Settings, which will map to our three routes, /, /topics, and /settings.\n\nimport * as React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\n\nimport Home from \"./Home\";\nimport Topics from \"./Topics\";\nimport Settings from \"./Settings\";\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n          <li>\n            <Link to=\"/settings\">Settings</Link>\n          </li>\n        </ul>\n\n\n        <hr />\n\n\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/topics\" element={<Topics />} />\n          <Route path=\"/settings\" element={<Settings />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nNow, say the marketing department got ahold of our /settings route and made it super bloated. They put in a rich text editor, an original copy of Super Mario Brothers, and an HD image of Guy Fieri. We don't want the user to have to download all of that when they're not on the /settings route.\n\nWe've already learned how Dynamic Imports can help us here, but there's one more piece to the code splitting puzzle we need to look at and that's React.lazy.\n\nReact.lazy takes in a single argument, a function that invokes a dynamic import, and returns a regular React Component.\n\nconst LazyHomeComponent = React.lazy(\n  () => import('./Home')\n)\n\n\n...\n\n\n<LazyHomeComponent />\n\nWhat's special about LazyHomeComponent is React won't load it until it's needed, when it's rendered. That means, if we combine React.lazy with React Router, we can hold off on loading any component until a user visits a certain path. More on that in a minute.\n\nThere's one more thing you need to remember when you're using React.lazy and it's related to what to show the user when React is loading the module. Because Dynamic Imports are asynchronous, there's an unspecified amount of time the user needs to wait before the component is loaded, rendered, and the UI is displayed.\n\nTo tell React what to show, you can use React's Suspense component passing it a fallback element.\n\nimport * as React from \"react\";\nimport Loading from \"./Loading\";\n\n\nconst Settings = React.lazy(() => import(\"./Settings\"));\n\n\nfunction App() {\n  return (\n    <div>\n      <React.Suspense fallback={<Loading />}>\n        <Settings />\n      </React.Suspense>\n    </div>\n  );\n}\n\nWhat's nice about React.Suspense is that Suspense can take in multiple, lazily loaded components while still only rendering one fallback element.\n\nimport * as React from \"react\";\nimport Loading from \"./Loading\";\n\n\nconst AdDashboard = React.lazy(() => import(\"./AdDashboard\"));\nconst Analytics = React.lazy(() => import(\"./Analytics\"));\nconst Settings = React.lazy(() => import(\"./Settings\"));\n\n\nfunction App() {\n  return (\n    <div>\n      <React.Suspense fallback={<Loading />}>\n        <AdDashboard />\n        <Analytics />\n        <Settings />\n      </React.Suspense>\n    </div>\n  );\n}\n\nNow let's update our app from earlier to utilize our newly found knowledge of Dynamic Imports, React.lazy, and React.Suspense.\n\nimport * as React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\n\nimport Loading from \"./Loading\";\n\n\nconst Home = React.lazy(() => import(\"./Home\"));\nconst Topics = React.lazy(() => import(\"./Topics\"));\nconst Settings = React.lazy(() => import(\"./Settings\"));\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n          <li>\n            <Link to=\"/settings\">Settings</Link>\n          </li>\n        </ul>\n\n\n        <hr />\n\n\n        <React.Suspense fallback={<Loading />}>\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/topics\" element={<Topics />} />\n            <Route path=\"/settings\" element={<Settings />} />\n          </Routes>\n        </React.Suspense>\n      </div>\n    </Router>\n  );\n}\n\nHow do we know this is actually working and code splitting our routes? If you were to run npm run build with an app created by Create React App, you'd see our app's being split into 3 chunks.\n\nEach chunk is a dynamic import() in our app. We have three since we're using React.lazy three times, with Home, Topics, and Settings.\n\nNow it may be easy to fall into the trap of only code splitting your app at the route level, but it's important to understand that that's a false limitation.\n\nCode splitting at the route level only is like brushing your teeth but never flossing. It's better than nothing, but there's still more progress you could make.\n\nInstead of thinking about code splitting as splitting your app up by its routes, you should think of it as splitting your app up by its components (Routes are just components, after all). If you have a rich text editor that lives in a modal, splitting by the route only will still load the editor even if the modal is never opened.\n\nAt this point, it's more of a paradigm shift that needs to happen in your brain rather than any new knowledge. You already know how to dynamically import modules with import(), now you just need to figure out which components in your app you can hold off downloading until your user needs them.\n\nWant to learn more?\nIf you liked this post and want to learn more, check out our free Comprehensive Guide to React Router.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nQuery Strings with React Router v4\nTyler McGinnis\nUpdated March 22, 2018\n1 minute read\nCheck your version\nThis post assumes you're using React Router v4. If not, find your version below.\nReact Router v5\nReact Router v6\n\nWhen you're building for the web, sometimes you need to pass information via the URL. To do this, you can use a query string.\n\nYou've probably seen them before IRL. Here's an example from Twitter's analytics page.\n\nThis URL has three route parameters and two query strings. Twitter is using query strings to tell its route to filter the Tweets by top (most popular) and that the origin was im (which I'm not sure what that means, TBH).\n\nWith that said, odds are you're not here to learn what query strings are but instead how to use them with React Router v4. The good news is that if you're already comfortable with React Router v4, there are just a few small details you need to know.\n\nLet's say we were Twitter and we were building the Route for the URL above. It would probably look something like this.\n\n<Route path={`${match.path}/tweets`} component={Tweets} />\n\nNotice at this point there's nothing new. We don't account for the query string when we create the Route. Instead, we parse them inside the component that is being rendered when that path matches - in this case, Tweets.\n\nNow the question becomes, how do we actually do this?\n\nIf you poke around on the location object that is passed to all components rendered by React Router v4, you'll notice that it has a search property on it.\n\ncomponentDidMount() {\n  console.log(this.props.location.search) // \"?filter=top&origin=im\"\n}\n\nCool, but this is the literal query string. You'll need to somehow parse it before you can get the actual values.\n\nYou may be surprised to hear that React Router v4 doesn't come with built-in support for parsing query strings. The reason for this is because, over the years, there have been many requests to support different implementations. With that, the team decided it would be best for users to decide what the implementation looks like rather than baking in a \"one size fits all\" solution. Regardless, what that means is that you'll need to bring your own query-string parser.\n\nThere are two common solutions. Either use a browser API (that may not be supported by all the browsers you need) or use an external library for parsing the query string. The library I typically use is the query-string library on NPM.\n\nWith that library installed, all we need to do is call queryString.parse passing in our location.search. That will parse the query string into an object which we can then grab the values off of.\n\nimport queryString from 'query-string'\n\n\n...\n\n\ncomponentDidMount() {\n  const values = queryString.parse(this.props.location.search)\n  console.log(values.filter) // \"top\"\n  console.log(values.origin) // \"im\"\n}\n\nThat's it. Go parse those query strings.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Modern Javascript course with code bnC2e .\n\nLOGIN\nCompiling vs Polyfills with Babel (JavaScript)\nTyler McGinnis\nUpdated October 3, 2017\n2 minute read\n\nJavaScript is a living language that's constantly progressing. As a developer, this is great because we're constantly learning and our tools are constantly improving. The downside of this is that it typically takes browsers a few years to catch up. Whenever a new language proposal is created, it needs to go through five different stages before it's added to the official language specification. Once it's part of the official spec, it still actually needs to be implemented into every browser you think your users will use. Because of this delay, if you ever want to use the newest JavaScript features, you need to either wait for the latest browsers to implement them (and then hope your users don't use older browsers) or you need to use a tool like Babel to compile your new, modern code back to code that older browsers can understand. When it's framed like that, it's almost certain that a compiler like Babel will always be a fundamental part of building JavaScript applications, assuming the language continues to progress. Again, the purpose of Babel is to take your code which uses new features that browsers may not support yet, and transform it into code that any browser you care about can understand.\n\nSo for example, code that looks like this,\n\nconst getProfile = username => {\n  return fetch(`https://api.github.com/users/${username}`)\n    .then((response) => response.json())\n    .then(({ data }) => ({\n      name: data.name,\n      location: data.location,\n      company: data.company,\n      blog: data.blog.includes('https') ? data.blog : null\n    }))\n    .catch((e) => console.warn(e))\n}\n\nwould get compiled into code that looks like this,\n\nvar getProfile = function getProfile(username) {\n  return fetch('https://api.github.com/users/' + username).then(function (response) {\n    return response.json();\n  }).then(function (_ref) {\n    var data = _ref.data;\n    return {\n      name: data.name,\n      location: data.location,\n      company: data.company,\n      blog: data.blog.includes('https') ? data.blog : null\n    };\n  }).catch(function (e) {\n    return console.warn(e);\n  });\n};\n\nYou'll notice that most of the ES6 code like the Arrow Functions and Template Strings have been compiled into regular old ES5 JavaScript. There are, however, two features that didn't get compiled: fetch and includes. The whole goal of Babel is to take our \"next generation\" code (as the Babel website says) and make it work in all the browsers we care about. You would think that includes and fetch would get compiled into something native like indexOf and XMLHttpRequest, but that's not the case. So now the question becomes, why didn't fetch or includes get compiled? fetch isn't actually part of ES6 so that one at least makes a little bit of sense assuming we're only having Babel compile our ES6 code. includes, however, is part of ES6 but still didn't get compiled. What this tells us is that compiling only gets our code part of the way there. There's still another step, that if we're using certain new features, we need to take - polyfilling.\n\nWhat's the difference between compiling and polyfilling? When Babel compiles your code, what it's doing is taking your syntax and running it through various syntax transforms in order to get browser compatible syntax. What it's not doing is adding any new JavaScript primitives or any properties you may need to the browser's global namespace. One way you can think about it is that when you compile your code, you're transforming it. When you add a polyfill, you're adding new functionality to the browser.\n\nIf this is still fuzzy, here are a list of new language features. Try to figure out if they are compiled or if they need to be polyfilled.\n\nArrow Functions\nClasses\nPromises\nDestructuring\nFetch\nString.includes\n\nArrow functions: Babel can transform arrow functions into regular functions, so, they can be compiled.\n\nClasses: Like Arrow functions, Class can be transformed into functions with prototypes, so they can be compiled as well.\n\nPromises: There's nothing Babel can do to transform promises into native syntax that browsers understand. More important, compiling won't add new properties, like Promise, to the global namespace so Promises need to be polyfilled.\n\nDestructuring: Babel can transform every destructured object into normal variables using dot notation. So, compiled.\n\nFetch: fetch needs to be polyfilled because, by the definition mentioned earlier, when you compile code you're not adding any new global or primitive properties that you may need. fetch would be a new property on the global namespace, therefore, it needs to be polyfilled.\n\nString.includes: This one is tricky because it doesn't follow our typical routine. One could argue that includes should be transformed to use indexOf, however, again, compiling doesn't add new properties to any primitives, so it needs to be polyfilled.\n\nHere's a pretty extensive list from the Babel website as to what features are compiled and what features need to be polyfilled.\n\nFeatures that need to be compiled\nArrow functions\nAsync functions\nAsync generator functions\nBlock scoping\nBlock scoped functions\nClasses\nClass properties\nComputed property names\nConstants\nDecorators\nDefault parameters\nDestructuring\nDo expressions\nExponentiation operator\nFor-of\nFunction bind\nGenerators\nModules\nModule export extensions\nNew literals\nObject rest/spread\nProperty method assignment\nProperty name shorthand\nRest parameters\nSpread\nSticky regex\nTemplate literals\nTrailing function commas\nType annotations\nUnicode regex\nFeatures that need to be polyfilled\nArrayBuffer\nArray.from\nArray.of\nArray#copyWithin\nArray#fill\nArray#find\nArray#findIndex\nFunction#name\nMap\nMath.acosh\nMath.hypot\nMath.imul\nNumber.isNaN\nNumber.isInteger\nObject.assign\nObject.getOwnPropertyDescriptors\nObject.is\nObject.entries\nObject.values\nObject.setPrototypeOf\nPromise\nReflect\nRegExp#flags\nSet\nString#codePointAt\nString#endsWith\nString.fromCodePoint\nString#includes\nString.raw\nString#repeat\nString#startsWith\nString#padStart\nString#padEnd\nSymbol\nWeakMap\nWeakSet\n\nBecause adding new features to your project isn't done very often, instead of trying to memorize what's compiled and what's polyfilled, I think it's important to understand the general rules behind the two concepts, then if you need to know if you should include a polyfill for a specific feature, check Babel's website.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our modern-javascript course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nProgression, Curiosity, and Burnout with Dan Abramov\nTyler McGinnis\nUpdated August 29, 2017\n23 minute read\nDescription\n\nThere's no one that I know personally who has a more interesting backstory than Dan Abramov. In a matter of years he went from hacking on VBA and C# apps for $200 a week in Russia to building one of the most popular JavaScript libraries (Redux) and working as an engineer at Facebook. I've always been curious about this process and I finally got the chance to ask him all about it. In this episode we talk about his upbringing and what it's like learning to program in Russia, the backstory of how Redux came to be, handling burnout, and much more.\n\nTranscript\nconst Tyler = \"Tyler McGinnis\";\nconst Dan = \"Dan Abramov\";\n\nTyler: Welcome to this podcast where I decode the implementation details of successful Software Engineers. When I first had the idea for this podcast, someone who kept popping into my head over and over to try to interview was Dan Abramov. The problem with that, is that I'm trying to have all of my interview for this podcast just because it feels just a little more geniune that way. Unfortunately, I live in Utah and Dan lives in London so we are no where close to each other. But, luckily for me, Dan attended React Rally last week here in Utah and was kind enough to sit down with me as a last minute request. If by some small chance you don't already know who Dan is, he's the co-author of Redux and now works at Facebook on the React team. I've always been curious how someone from such a humble background as Dan could have such a positive impact in our industry so quickly. What I found in our interview, and I think this attribute can be credited to a lot of his success, is Dan is probably the most curious person I've ever met. He never comes out and explicitly states this, but every story he tells, whether he's a 14 year old in Russia reading bootleg VBA books or a twenty something year old writing Redux to prepare for a conference talk, every story is just engulfed with curiosity. With that said, I am so happy to bring you this interview with one the developers that I look up to the most - Dan Abramov.\n\nTyler: I think what interests me most about you, and this is kind of universally what I've heard is, you have an incredibly interesting backstory. And I don't know if I have ever heard it personally. Everyone kind of knows you are from Russia and they know you are at Facebook. But there's a lot in between there that I don't know that if you've ever talked about or I don't know if it's really been discussed. That's the first question I have for you is, how does someone go from Russia, to now, working at Facebook? Tell me, probably in more detail than you want to, the steps or kind of the history of how you did that.\n\nDan: I think I was about 12 maybe. I did not really intentionally start to program. So I remember I had a book on Pascal actually, which I had no idea what it meant. Like, I didn't understand that it's something you need to input into a computer so it was like a book with code printed in it. And I don't remember it was some kind of database thing. So I remember seeing it, but I didn't make anything of it. I didn't have any like... We had computer classes in school but they did not include programming at all. It was Word, and PowerPoint then Office programs, Microsoft Paint. And so I was just doing, yeah. And I loved PowerPoint. PowerPoint was my favorite program ever because I tried to inspect every feature.\n\nI opened every menu in PowerPoint and tried to test it and it had this crazy features I don't know if you remember, but you can insert all the objects which is like you can insert, so Microsoft had this... its own component model back in the day where you could have applications export different types of content that would be embeddable in other applications. So Iike, if you installed both Excel and PowerPoint, you can embed Excel spreadsheets into PowerPoint slides. And then if you press on it it's going to activate, like the tool bars are going to be replaced by Excel. And I was just fascinated by is kind of like things that you can put into other things and they like do something. And so it also, so apart from this it also had these animations. So you could schedule animations on like some kind of board you could say, \"This thing flies off from like from the right, then it fades in. Then like this thing happens...\" So it was a visual way to design, I guess, not an interaction but like just animations. But then I noticed a really cool menu years so it was called service-micros and what you could do is it would show a tool bar which looked like a tape recorder so it had the, \"Record,\" \"Play,\" and, \"Stop,\" buttons. And I remember that I pressed record and then I just moved somethings on the side. And then I pressed stop.\n\nAnd then if I pressed, \"Play,\" it would do the same thing again automatically. Like, repeat what I did. And I found it really cool and I noticed that if I double click it, it opens up some completely different program with some weird menus and a white screen of text and in the text it says, 'With Picture box One. Dot Left equals something, Dot Top equals something. End With\" And I changed those numbers and I pressed play again and it would move it to a different spot and I am like, \"Wow. Like, these are coordinates.\" And if I press, \"Up,\" so like it let me assigned properties. And if I pressed that again, it would show a list of all the properties that are available. And I would just try every property in there to see what I could do with these pictures and objects. And so this was really fascinating and the thing was called Visual Basic for applications, it's like a small version of Visual Basic . I bought a book on it. And in Russia they would sell technical books in our underground when you go to an underground station, before the entrance to the station there will be a small shop. I am not even sure if it was official licensed or whatever, but they would sell CD's and DVD's everything. It was pirated, of course. And there were some books and some technical books as well, and so I bought a book, like a book by some, it was not even a translation, just some Russian author who wrote about automating stuff with VBA and so I read that, I read another book on VBA and I started just, so my grandmother sure so like to like buy me treats and I stuff and I just asked for books about Visual Basic. So our favorite...\n\nTyler: Which is normal for a 14-year old.\n\nDan: Yeah. Totally. And my favorite way to spend a weekend was to go with my grandma to eat some pizza, something like this, and then go to a bookstore and pick the thickest book about Visual Basics. I had like maybe five or six such books. And I mean as books they were probably not very great because they didn't teach programming, they just described the APIs, and stuff. But I quickly started, so I picked Visual Basic 6, that was the version that was popular at the time. And I don't know, I was just, you could drag and drop things onto like a window, and it would have this Visual Designer and then you could write some code for event handlers. And this really how I got into programming because I could just like put a button. It felt very powerful to see a window, and track a button on it. And press, \"Play,\" and I see this as a real thing, as a real application.\n\nTyler: Was feedback.\n\nDan: Yeah. It was. So there was this talk at, so we are at React Rally, for the context of the conference. And there was this talk today by Preeti. And she talked about how feedback loop was important to how she got into JavaScript. And I now realize that I did not, like JavaScript was not popular at the time when I learned. But for me it was also this visual feedback loop that got me into programming, I would never have gotten into it if, with this book about Pascal this didn't make any sense for me. But just dropping things and running them and seeing them live, I think that made the biggest impression on me.\n\nTyler: When you were learning Fiber, you tweeted how you were building a to-do list or something in order to learn it. Has that always been kind of your path to learning new things is basically just getting as hands-on with that is possible or what's a path? Like, say because back then it was purely your drive, your reading books, all you had were books essentially. Your Grandma, books and pizza, right? Is the process still similar today with newer technology?\n\nDan: I don't learn new technology much.\n\nTyler: Unfortunately. So say when you're learning Fiber, which was I think a year ago or something? What was the path you took to learn that?\n\nDan: For the context, Fiber is a project that, it is like a rewrite of React that Sebastian Marbage has started which is a bit complicated because it's not like the JavasScript code that I have seen before. Yeah. It took me some time to understand the reasoning behind how it's written. I think for me the way I understood it was just by trying to implement a feature in it. So like, we needed to get to feature parity. Yeah. And actually I started work, the first feature that I worked on in Fiber was Error Boundaries, which was actually a new feature. So I would just write some tests, like initial tests for what I was trying to do here, and wrote the hackiest version like, I could write that did what I was trying to do here. And obviously it was violating some principles of how Sebastian wanted it to be done. So Sebastian actually wrote up an issue called, \"Contributing to Fiber,\" where he lists that his constraints, like the things that he, the way that he wants the code to be written like, things to be aware of. And after reading that and talking with him through it, \"I think I got a clearer picture of like what he was trying to do.\" And the like, the invariants, the constraints that I need to follow. And yeah. It kind of went from there. But I mean it wasn't also it wasn't like I'm learning a new thing. It was more like Sebastian started like shaping it. And you know, it's kind of like a sculpture, right? So you have this raw material at first and then you like, work on them and they become something, and he had shared it with us at a very rough stage, like the first stage. And then we just try to learn how to work on this thing together. It changed many times as we were working on it but...\n\nTyler: It worked out.\n\nDan: Yeah, it...\n\nTyler: It shipped. It's working out.\n\nDan: Yeah. I mean it shipped to Facebook. It's just we haven't released 16 yet, but hopefully in a few weeks, it'll be out.\n\nTyler: So let's go back to when you're in Russia with your grandma. She gets you pizza, treats, you'd be reading like these super fat VBA. So what was the path from there to learning JavaScript? Where was that transition?\n\nDan: So it took a long time really. So again I started at about 12. But I stalled a lot I'd been trying to write a single program like for my step-dad. So basically he needed, he worked as a photographer and he needed something like a database for keeping track of like, of photoshoots. Like location, topics, tags, descriptions. Yeah. And it was just a regular it could have been a spreadsheet, but he didn't know how to use Excel.\n\nTyler: Everything can definitely be a spreadsheet.\n\nDan: Yeah. And so I was trying to gather, but I was reading books. So right after Visual Basic I think I never I didn't start reading books about programming fundamentals, but instead I got fascinated by the OOP stuff. So I started I read Gang of Four, I read refactoring, design patterns, I got super fixed on UML for some reason. So I was drawing these crazy diagrams of object oriented things and inheritance hierarchies and all this stuff.\n\nTyler: Was this so you could build a product for your step-dad or was this out of curiosity?\n\nDan: It was kind of both. I was using this project as an excuse to do everything. So like, I was trying to, I was reading a book about how to gather project requirements and like user stories and Agile stuff and all of this. And I was, like 14. And I it made a big impression on me at the time. So I was, yeah, I was just drawing UI mockups and figuring out how to express this in objects. And also at the same time, so I was using this project as a test bed for everything I learned. I was also buying part of the copies of ActiveX controls. Wow. That sounds really funny in 2017. And there was this component abstraction for Windows, which is a way to share comp- like this is like React components now that I think of it. You could just drag and drop them, and decide their properties. And they had events. This is ridiculous, it's like I am working on the same thing now. Yeah, but at the time they were not open source. So like, open source was not a big thing back then, everything was commercial. But in Russia, you could just go to this underground shop and there would be CD-ROMs with 250 ActiveX controls...\n\nTyler: Oh my goodness.\n\nDan: And stuff like this. And I would just like, I was fascinated by toolbars. So there were a lot of controls that implemented Microsoft Office style tool bars, that are not native to windows. Like, you actually have to implement them and I would like, try every single one of them and I would change like the tool bar implementation every week and try to give it abstracts so I could swap them up. And like, this project was ridiculous, and I never really shipped it, so I think it kept going for like, two years for me. I was just tweaking random things I mean he was using it at some point because like, it kind of worked but I think I never really finished all the features I wanted to finish. And yeah. It took me a long time just to I think it's gotten to a point where so, .NET came out and VB6 was kind of deprecated. I was trying to migrate to VB.NET and I started learning C# around the same time because like everybody was using C#. And I think the project kind of just sunk like, I couldn't change anything without introducing a bug. Because like, the code was such a mess that like talk to database and do everything in a single place, in the event handlers and forms that I would like, fix one bug and introduce three other bugs. And at some point I just abandoned it. But that's, I think that was the longest project I had at the time and then I kind of stopped programming for a few years.\n\nTyler: Do you know remember what year this was when you finished the program?\n\nDan: So I think I was about 15, so that was 2007. And I stopped programming for a couple of years after that.\n\nTyler: What made you stop?\n\nDan: I just didn't have any I was just frustrated after this first project, and I also had the school was getting more demand. And although I hated school so I just copied my homework. And I don't know, I just wasn't in a good place to like, do something like this. I wasn't really very interested, but I got into a programming forum so I started to spend a lot of time online. I had a smartphone with Opera mini as a browser which was super efficient in terms of network, and I would just spend days there. There was a forum. Like a Russian programming forum where I tried to, StackOverflow didn't exist back then. So I was trying to just answer questions even if I didn't know the answer, I would just google them and try to get better at googling things for other people. And I became a moderator of VB .NET subsection and later I think, of the whole .NET subsection. And yeah, it was kind of fun. So I think, I spent most of my time just on the on the forum back then, without any real projects. But I was learning a little bit about windows API's, and interfacing with Windows native APIs from managed C# code. Yeah. So, that's the way I remember it.\n\nTyler: So that was 2000, you said 2007ish you finished the project. So took a little break for the next few years doing school stuff. I don't know what, is there a high school in Russia? I don't know the equivalent of...\n\nDan: Yeah.\n\nTyler: So did you go to college for a little bit or?\n\nDan: No. It's a bit different. So in Russia you have, I'm actually not sure how it works now but when I was there it was, so the school was ten years and then you either go to there is something I'm not sure how American system works either, to be honest, but like you could go through a thing that last two years, but it's not preparing you for any kind of high-tech job, it's just like, If you want to be a plumber you could go there, but you could also go to a university. So I actually did that, I went to a university that I thought would teach me programming because. Like, I don't know why I thought that. There were supposed, I think there was something related to programming there but they actually turned out that the first three years are the same for everyone...\n\nTyler: Okay. Yeah. It's same here.\n\nDan: Which means it's super generic. There is one programming course, where the course work is to write two functions that print a table to the console. So it's, like... the good part was that they gave free Macbooks while we were there. That was one of the reasons that I joined. But I dropped out of the second year, and I got a job at the same time.\n\nTyler: Okay. It was at the...\n\nDan: I got a job and I realized that I don't want to do the university.\n\nTyler: And that was a developer job?\n\nDan: Yeah.\n\nTyler: Okay.\n\nDan: So I was 17. I was 17, I finished school and it was my first year in university. And when I was 17 I started doing freelance stuff. So there was a website, like Russian website, with freelance jobs. They were super low paying but I would try to build a, like a small portfolio there. On just random things somebody needs to fix their ASP website or there was a project I worked on which is like to build some kind of thing to enter data and like visualize it or something like this. Also, all this was windows programming. I didn't know anything about the web at all. Yeah. And it like paid, suddenly I got $200 for two weeks of work. Yeah. And I mean it wasn't too bad for a Russian teenager at the time. Yeah, considering it people who, even people who got paid, like well in Russia, I think like $2,000 a month is considered like a really good wage.\n\nTyler: Interesting.\n\nDan: And I mean housing expenses are pretty small there compared to U.S. and stuff. Yeah. So I was just doing this freelance small things and tried to build a brand on this website. I would look at people who are successful there and like mimic them. So I would, I don't know, make beautiful screenshots of my stuff. And put beautiful descriptions there and try to explain what I did. And so a guy contacted me. He was copywriter so he was padding some ad texts on his website and he had an idea for a joint project. So the thing that he needed was... so in this industry people write just ad texts for some very small money, and they need to be optimized for SEO so that they match Google keywords and stuff, but you need to make sure that the keywords are not too dense in the text, otherwise it's penalized. It's at the time between 2 and 5% was considered to be a good, I don't know how to say it in English but yeah. So ...\n\nTyler: The ratio basically.\n\nDan: Yeah. So you needed to be careful about that and there were, the tools that existed to measure it were not very good. And he wanted me to build a tool that would display like, let people enter the keywords and display them. So that they can see if it's working well or not. And I think, I spent also, I think two weeks on it. I think I got $100 for it. But I put my name in the status bar. Like, I put his name and my name. And I got a like, I kept getting orders from this. So like, people would just, because like everybody in this free lancing community started using this tool. People like, I don't know, word of mouth would come that, \"Hey.Here's a person who can do some like coding stuff.\" And so I kept getting orders. And it was pretty good like, for my age. Yeah. And actually I googled this program, it's called, \"TextTrust Pro.\" I googled it a few years ago. And there are like a lot of Youtube videos about it, it still exists and a lot of people still seem to use it.\n\nTyler: We got to find that. That's awesome. So is this, so I know Stampsy is coming up, right? So was this after university or like during university?\n\nDan: The freelance stuff was during the first year of university when I was just trying my skills to see if I can actually do something real. And I think it finished when I, So I implemented Linux support for fun in this project like it has this Plot abstraction UI abstraction that would you spot for specific views and stuff and I figured that, \"Okay like, if I did that and it works, maybe I'm ready for like a real job.\" And I went to a meetup that was hosted by some, basically it was a talk by some guy who was a, I think he was a co-founder maybe, of a local outsourcing company, so it was like a company that wrote Windows line of business apps basically for finance companies. It was just general Enterprise outsourcing stuff. And I just came up to him and said, \"Are you looking for somebody who can do C#?\" and he said, \"Yeah, sure. Drop me an email. \"\n\nAnd I dropped an email and I went to the interview and like I showed the thing that like the program that, it was a really cool program. Like I used free text input for, so you could copy and paste your text there, and I use windows API's to actually highlighted those keywords, right in-line so that... it sounds trivial today. But like it was really hard for me back then. Yeah, so I showed this thing and I showed they did a test where I would,like, write a program that showed running processes and stuff like this. It wasn't hard and yeah. They just hired me and I started working there as a C# developer there. And so at that point, I realized that I'm just wasting time in the university not because I'm smart or something but just because like there was barely any programming at all. And there was a lot of stuff that I didn't care about not in the least. So I quit the university and I worked about two years at that company, it's called DataArt. It's like a joint Russian-American company and I gained some experience with enterprisey stuff there. And then I quit.\n\nTyler: Where does Stampsy come into play? Because I'm assuming Stampsy was your introduction to JavaScript.\n\nDan: Yeah.\n\nTyler: Like where you really started using it in production.\n\nDan: Yeah. After I quit, I think I quit DataArt when we were hired to do a project that was something, like eBay. Like a startup but outsourced and was really silly because, like they were, they wanted us to like micro optimize anything but they didn't have a real product they didn't have any users at all. So it just collapsed. And I just felt like I'm wasting my time doing, like stuff for contract stuff like this. So I quit my job. And I moved back with my mom because I didn't have any income for like three or four months. And so I moved back in with my mom. But I, so I found a new thing on the internet. There was this guy, Yury Lifshits, he worked at Yahoo for awhile and then he came back to Russia. He was running a workshop thing that, so the way he phrased it is that it would teach you web development. And I was really scared about that because I spent all my life doing desktop development. And I didn't know anything about the web. And I was frankly terrified. Because like, it seemed like the web is picking up traction. And you can't really, I'm just out of touch. And so I went to the thing and it turned out that the way it works is that I don't pay anything, he doesn't pay me anything, but like, there is 20 of us. We have root access to like servers, servers with his projects. And we just implement things that he needed to build for this project. So like, he didn't have any formal educational thing, it was just voluntary.\n\nTyler: Building stuff. Yeah.\n\nDan: Yeah. We just learned. I guess he just taught us how. He basically gave everyone Django tutorial and said like, \"Go through this tutorial and then build this feature.\" And we were just trying to do that. And it was fun. And I learned Git, and CSS, and some HTML and some super basic JavaScript built with JQuery. And I kept going till I programmed for a few months maybe, and I felt like, yeah, like I get it, I understand the web more or less. I didn't really like learning JavaScript at the time, I was just like comfortable enough to write this simple jQuery thing. But then I decided to apply for the coolest, at the time, company in Russia. So there was, I mean there still is, VK it's a Russian clone of Facebook. Yeah, but I mean it had a nicer UI you know, it was based on a version of I think Facebook of 2005 or something like this, when it was uncluttered and I think VK really paid high paid attention to not cluttering it. They didn't have a lot of features but it was really neatly designed and super fast.\n\nAt the time, everybody wanted to work there and they had like super solid team of maybe ten people maintaining the whole website with millions of users. So I went to an interview there and they told me to build in all the complete component, that like worked the same way that theirs worked. And I did that. And yeah. But they did not really look at the code. It was more like how does it handle the balancing and caching and I didn't really think about some of these things, and in the end I didn't pass the interview and I was really frustrated and I didn't know what to do so I just went to Coursera and I joined two courses, \"Machine Learning,\" and, \"Compilers.\" Because those were like two topics that seemed absolutely magical to me. And I thought like, \"Maybe I want to do something like this.\" And at the same time, I got a call from some, so some guy was emailing me asking if I, oh right, so I missed a part. I organized, I mean I didn't really like do anything I just messaged a few people. But a few people from that group that did those projects with Yury Lifshits, so few people were into watching educational videos.\n\nAs I was going through this Coursera courses, I messaged a few people, \"Let's like spend a day just watching educational videos. You know like, why not? This sounds fun.\" And we went to this working space that Yury rented, we just stayed there until like 5:00 a.m. or something because I needed to get the homework for Coursera done by the deadline which was like 7:00 in the morning in Russian time. And I had a friendly chat with somebody who also stayed with me. And then this person, it turned out that this person recommended me to someone who lived in Moscow. So some guy from Moscow was messaging me if I would be interested in chatting about working his startup potentially. And I was still kind of frustrated about the whole VK thing that didn't work out and I was also, ill I think I had mononucleosis. So I looked awful and I didn't want to talk to anyone and I also googled this guy and he looked like some kind of fashion guy he had like a slick haircut, and he was appearing in GQ Russia something like this. I thought what the hell does this person have to do with software development. And so I kind of ignored him. And then I really looked like I'm not truly like interested right now. Like maybe in a few weeks. But he was super persistent and he actually messaged me again in a few weeks. And I said \"Okay. Like let's Skype.\" Because like I am in St. Petersburg and he was in Moscow.\n\nTyler: How far is that?\n\nDan: It's like four hours by a train, by a really fast train. Or a night, you know, on a slow train. And so he messaged, yeah, we Skyped and he showed me, so they made a video about a product that didn't even exist. It was like a flash mockup. But it was a really slick production.\n\nTyler: Yeah. It was a great, great video, I'm sure.\n\nDan: Yeah. It was like, \"Wow. This was beautiful.\" And so the idea of the product was like a thing to create DIY magazines on the web. Like the format that would be like, not like real magazines but more like Zines. Maybe adapting Zines to web format and it was really magical. It was like a button that you pressed and it would change the layout beautifully, and, that button is ridiculous. When we tried to implement it, it was crazy. We got it in the end. Yeah, but I was fascinated by it and like, aesthetically it felt like it's something I want to try doing. And so, I went to Moscow to meet him and the other folks and, he was really trying to give a good impression, and yeah, I decided to join Stampsy. So that was I think 2012 maybe, or 2013.\n\nTyler: When did you leave Stampsy? Was it after React Europe?\n\nDan: It was before, a few months before React Europe.\n\nTyler: Yeah. That's right. You did a few months. So you worked with Stampsy for the next few years doing Backbone initially, right?\n\nDan: Not exactly. Initially it wasn't even a web app. We started with an iPad app so it was Xamarin and C# just because like we knew C#. And after, so we released the iPad app. It was even featured by Apple. Like Apple folks wrote to us saying that, \"Hey. The design is great and stuff.\" But the product didn't really make sense because it was it was a compromise between two visions. It was like in part, one of the co-founders was pose like in part one of the co founders was...So Roman, he was more like a visionary. But he had this like idea for Stampsy. And like he always wanted to make Zines. Like he used to make Zines when he was a teenager and he had this art project where he would create several web magazines with by hiring like graphic designers. And JS developers that would look pretty cool with like glitch effects and stuff like this. But it was pretty expensive, so he just wanted other people like him to have a tool to express themselves. And the other co founder was like more pragmatic, I guess. And more of a, he was a designer and so he was, the result was like a tool that pretended to be the thing that Roman wanted. But it was like just an editor I guess. Like a drag and drop editor.\n\nAnd so if you don't know how to design pages you just like drag headings and text and it just looks awful. Because you don't know how to beautifully position something, you don't know how to automate... like how to lay things out. So it was like a fancy drag and drop tool but it was too simple for designers but not restricting enough for beginners. So people just created a lot of, like really shit content. And so that was pretty frustrating and we figured that nobody has good content on iPad anyways because like people usually have pictures, like very low-quality pictures of their family. And this is what they post then, instead of like, beautiful editorials. So we scrapped the iPad app and we started building a web app. And this was, so the iPad app was a hybrid app. It was like parts of it were native. I mean C# but still it used native APIs. But the drag and drop editor was built with WAP because we wanted to have the same exact experience in the editor. And in the viewer part like, when you view a piece of content and since you can view it on the internet it follows that it has to be a web thing otherwise the fonts are going to be different. The layouts are going to be slightly different, so we implemented that as hybrid thing. That was really cohesive, I'd say. I'm pretty proud of how we did. And it wasn't noticeable that it was a hybrid thing. I mean even like Apple agreed. So yeah. And the web part was built with Backbone at the time. And I kind of, I mean, I knew like MVC paradigm. So it wasn't hard.\n\nAlthough, the logic was kind of messy in some places. And so we started with building the web app from scratch. Completely from scratch because they had a different, design slightly different like target audience it was more, supposed to be more automatic, and so on. And so we had to choose between Backbone and Angular at the time. Angular won. Or Angular.js I'm not sure what's the right way. And so we picked Angular for a prototype of this, and we didn't have a good experience with it. Like, we had cryptic errors. Like, not the js, middle of the js or something. We just decided to go with backbone because like we understood was going on there. So yeah. We started building a complex single page app in Backbone. And at some point we just hit the limits. Like, it's not dynamic enough and we had this custom system where like a custom data binding system which would try to re-render a template if there's any change. And like replace the poorest of poor marks especially. I even remember looking at some library that diff'ed the DOM nodes. So there was like a diff node or something like this but it never occurred to me that those could have been plain objects. So I was like thinking what if we have Backbone call the render method and the render method creates the DOM nodes but then we diff'ed them and applied the changes from the diff to the regional nodes but we never made it...\n\nTyler: So close.\n\nDan: Yeah. So close. But we never made it work. And then a coworker of mine he showed, so he showed React to me and I was like, \"What the hell? This doesn't make sense.\" and I just forgot about it. And then in a few months he showed it again and he said, \"Actually this might be good.\" and so I tried, and at the time I was , so I needed a like button that would show 'Liked by... and three other people.\" And like, it had to be dynamic and feel light and personal. What if like there's like two people and it comes to just one person and like, there is a few combinations there? And it was the same text was used in several different places so like this label would be online. But it was also be on top of the page and they needed to like sync with each other? Yeah. And so I tried to implement this React component and it took me just one evening. I would just write a switch case that says, \"If like we have these many people we do that. Otherwise like we are going to do that.\" And it just worked. And we just got it like going up from the like button to like, the whole panel.\n\nAnd then to the whole page and like to the feed like in the middle of the feed units and then the whole feed and React-Wrapper didn't exist back then. So we used, we tried to use some React-wrapper component by Andrew Bolt. But we didn't understand the API fully so it was the routing was managed by Backbone. And later React-wrapper came out and we just migrated to that. And then it was 100% React but with Backbone models. But then we had these problems where they would get out of sync all the time. And nested entities are very hard. And like pagination is hard and it caching is hard. It's like everything was hard. And then Facebook release Flux and I was like, \"This is the solution to the exact problem that we are having with duplicated data.\" So we adopted Flux. And it took, I think it took about nine months to migrate but we were shipping features all the time. While, so like, we never stopped to rewrite anything. Like, as we started to introduce React and Flux we've been able to ship features along, while we were migrating.\n\nTyler: At this point, you have obviously a lot of experience, Backbone, React, Flux. Then comes this is like, this is right before Redux is about a thing, right? So what, and I know you have a lot of opinions on like obviously Redux, how Redux is being used today, how that's kind of a little bit different maybe than your initial vision. I want to hear about, why does Redux exist? Like what were the things that you were trying to solve, initially, with Flux, basically?\n\nDan: So I was trying to solve the problem of promising something for a conference talk. I...\n\nTyler: Which is a great way to, like make something, right?\n\nDan: Yeah. I was just...\n\nTyler: A stressful way probably. But a great way.\n\nDan: Yeah. So I just, the thing is I wanted to talk about hot reloading. But Brad Simmons already here, so he mentioned it at React conference. But didn't do a demo because Wi-Fi didn't work or something. Some reason I felt that it was mentioned already, so like if I just submit a proposal about hot reloading like, that won't interest anyone. That's not cool. So, and I was really fascinated by Bret Victor vidoes. I know that like I want to add a disclaimer that I know that Bret probably hates everything people do with after watching his videos. Because like they never, they implement like 5% of his vision and like the 95% of really the hard part. And is like just cherry picking the stuff that's easy to do. But I mean I did, I thought of the same thing. I was fascinated by this idea of changing the past, like changing the past and the future. Like when you have this Mario like game where he would show the trajectory, like he would go in the past after in the game. And he would show the trajectory of like the character. And then he would change the code and the trajectory of the character has changed. This is like this thing's already happened but here's what would have happened if the code was different.\n\nAnd this really fascinated me and I was thinking about Flux and actions. And how if like, if you separate the data from the logic you could hot reload the logic and reapply the same actions on the top, moving the problem into a different state. So there's [00:43:15] I think I do have a think about Flux at that time so I was thinking about some kind of what if I just add time travel to React state itself, and I just did that because I was scared that if the talk was just about hot reloading it would not be accepted. So I said partial loading on time travel and I got some buzz words in it like the talk proposals said that, \"In this talk, Dan will demonstrate how like ideas from all Elm and Om or if...\" But I never tried Elm or Om. It was just that this post by David Nolan was super influential for me so I figured that, \"Yeah. Like, immutability might actually work.\" And I mentioned Elm, I don't remember why. So we still mention it in Redux with me. Because I think that I probably read Elm architecture at some point. I'm pretty sure that I did not understand it. Because the first version of Redux did not follow Elm architecture at all. It's something Andrew came up with. And he's saying he also probably also read Elm architecture and did not understand it because of the syntax.\n\nTyler: And now it's just part of the history, yeah.\n\nDan: But it was part of the subconscious kind of thing. But anyway at that time I didn't try Elm or Om. But I made this proposal and it was accepted and then I had like six months to prepare. But I was like Stampsy was running out of funding at the same time I was trying to polish a drag and drop library. So I kind of just like did not think about the talk for a long time, I was trying to implement a Flux hot loader, like React hot loader but for Flux, and I realized it's really hard because the state has captured the local variables that there is no access to so you can't really like transplant it when you change a module, you can't really put those into the new version. But what if we separated the state from the logic. Like that would allow us to do that. So I think Redux was just like an attempt to actually make a proof of concept of, \"There is a Gist, like really old Gist about time travel in Flux. Which if you scroll my Gist far enough maybe you'll find it.\" I was trying to figure out what is the minimal version of Flux that would work with hot reloading and it's pretty crazy like it's funny. It's naive. We were chatting with, I don't remember who I was chatting with, but I was chatting with someone and they said that I'm not even sure, it was my idea.\n\nYeah. I don't remember who suggested it but basically, we had this idea that Redux would be a cool name because we have these Reducer functions and it is Flux. And it sounds really good, Redux. I was watching I think, Jeremy Morrel if I'm not mistaken, I was watching his talk where he was explaining Flux conceptually as a reduce operation over time. And I was thinking what if it was actually like a reduce operation like literally. And so yeah. and after a while, Redux is a really good name, I like it. Maybe I should like turn it into a proper library, and so I think somebody gave me the name from, like the npm name. Yeah. And I just, I was trying to make a proof of concept of Flux where I could change the logic. And it would let me time travel. And it would let me reapply the future actions on the code change. So that was like, the goal. And I know people kind of liked it even before it was released. And like they started saying, \"Do you use it in production?\" I was like, \"Wait. I'm not sure if it's actually like usable in production.\" So I was trying to like write a proper, the readme was ridiculous it was super long and you had like decorators syntax. And like all explain everything in a very rude way. Yeah. It was incomprehensible to anyone who wasn't already in the middle of all of it. But then it exploded after the conference and I spent some time writing the docs.\n\nTyler: So how was, this all happened just like incredibly fast. Like from your perspective, how was it going from someone who's like even like pre-Stampsy, right? Like even to that you were doing like C# stuff to all of a sudden Redux. It's like the thing that every web app like uses, right? Like it's just so popular, how was managing that, both from a personal standpoint you now have issues you're dealing with like Github issues? And you going to have like this like fame that's like put upon you, whether you ask for it or not, like how is that?\n\nDan: I don't know, I think it was so bit overwhelming at first, and I've just learned to deal with it. So like I think I spend an unhealthy amount of time on like managing issues and pull requests and stuff. But I also didn't have a full-time job so it was like, I really didn't have a work life balance at all. Eventually, I kind of learned to onboard contributors and just like, if somebody's motivated and they seem talented just give them like commit rights. I think this is all kind of from the program I was talking about where Yury just said, like here is the keys to the root users. Try not to screw up my websites, please. I kind of follow the same way though. People are going to make mistakes anyway and like you're going to make mistakes anyway so you might as well like, if they don't have, at least like I have this kind of influence and visibility. Might then just like let them do their thing and I get there. But it's also, it's not entirely altruistic or something. Because like, in a way I'm making them core maintainers and co-contributors is important for making them more visible but it also means that they're going to get into this potentially unhealthy situation where they take the project too seriously and can't manage work life balance and stuff like this. In a way it feels like, you know, in Tom Sawyer in the first chapter there is this guy who is painting the fence. And he's like, \"Wow. This is so amazing.\" and the other guy just believes it and picks it up. It's just a trick and I kind of feel this way about open source, is that yes, there are some good things. But there are also bad things. And, \"Hey. Take the whole package and yeah. Pass it on.\"\n\nTyler: What have you managed, what you've done too, because I know in the last year things have gotten better as far as it seems you're going on more vacations. Is there anything that you've done to help that? Or it's literally just like, \"Go on vacations and don't bring your computer charger.\"\n\nDan: I just voted contributors to the projects that I don't intend to maintain actively. Yeah. And I just am watched everything. And I mean I have a full time job working on open source now, I have to focus like on specific things. And it's just now that I'm not going to do these things that I maybe want to do. And t it's just competing for my attention and I'm just not doing it.\n\nTyler: Yeah. Makes sense.\n\nDan: And I stopped writing code at home.\n\nTyler: Oh yeah. That's probably a big one too.\n\nDan: Yeah. I was just tired. Like if you do this full time it's not as much fun to like do it\n\nTyler: At home too.\n\nDan: Yeah.\n\nTyler: Yeah, exactly you're not a 17-year-old kid in Russia anymore. All right so what I'm going to do now is, thanks again for telling that story I think I think a lot of people will find it interesting. what I want to do is I saw questions here and we don't have a lot of time left, so it's kind of like rapid fire. I'll ask you and you have like anywhere from a sentence to like 30 seconds to answer them. [00:51:40] we'll be done. So the first one I have is, you mentioned this one before. This is kind of random, Thomas , you have mentioned is an incredible manager and a few people Christopher S_ has mentioned the same thing. What makes Tom so effective at that role?\n\nDan: I think he just like trusts people. In my experience is hard very good people and he just trusts them. So like he doesn't get in their way he doesn't dictate what to do and just like he is doing everything he can to empower you basically. And get things out of the way And if there are any like people issues. He's going to handle them so like he's going to talk to somebody, he's going to talk to you he's just very good at supporting people. What's your favorite open source project right now?\n\nDan: React.\n\nTyler: Besides React.\n\nDan: Yes. It's still React.\n\nTyler: All right. I'll take it. I'll let that one slide.\n\nDan: I'm sorry. It's true.\n\nTyler: No. You're good. I mean if that's the answer, that's the answer.\n\nDan: I'm honest.\n\nTyler: What does building for the web look like in three to five years?\n\nDan: I've no idea. But I hope that there's less configuration.\n\nTyler: Knowing what you know now, if you had to learn to program all over again, how would you do it?\n\nDan: I wouldn't do it.\n\nTyler: Really?\n\nDan: I don't imagine what it's like to do it again. I don't have the mental energy anymore.\n\nTyler: Yeah. To go through...\n\nDan: Yeah. I don't know how I'll do it. Like it was too hard.\n\nTyler: How do you measure success?\n\nDan: Success of what?\n\nTyler: Anything.\n\nDan: It feels good. Like if something gives you good vibes then it's probably a success.\n\nTyler: What's been your favorite memory throughout this whole process?\n\nDan: So I mean, it's again like unhealthy open-source. But I remember...so when I was 14, I read a book about Erlang. Which is like super random, I don't why I did that. I just remember reading about functional stuff and how Erlang can replace modules upon time while the program runs, and it seemed pretty cool. And then there was this Brad Victor video where he changed code ...And I had this idea that, \"Wouldn't it be cool if we could do that in web development?\" And and then like I was playing with React for a long time and it was really good at like, it was really the declarative and then I was porting the project to Webpack as RequireJS was super slow and the RequireJS optimizer produced a single bundle so it was too large. I was migrating the project to Webpack and I saw the page about Hot module Replacement. I had no idea what it means so I asked on StackOverflow, \"What is Hot Module Replacement in Webpack?\"\n\nAnd Tobias Koppers, creator of Webpack, he answered like, \"Here's what it means from a compiler's point of view. From a user's point of view, Webpack's point of view....\" A lot of information but some of it made sense and I was like, \"Can I use this to Hot reload React components?\" And this felt like, \"Wow. I can put these two different things together to produce something valuable.\" And I started like I couldn't resist prototyping this, and I started doing it. And then I sat until like maybe it might 6:00 a.m And I got it working and just enough to record a video And I recorded that video where, \"Hey. I'm editing in JSX while the page reloads. Like I can write expressions there and everything still works.\" And I recorded this video and I tweeted it out and I think Christopher Chedeau retweeted it. And then like I had twenty followers at the time and like it went viral. And I was like, \"Wow. This is something. Like I'm not a weird person who cares about this. People want a quick feedback loop.\" And I think this was one of the most pleasant moments for me.\n\nTyler: Well, that is all I have for you, thank you so much. I think you've been, whether you want it or not, I think you have been an incredible ambassador for React both myself personally and also the community. Thank you.\n\nDan: Thank you\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,564 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nCustomizing your own Link component in React Router v4\nTyler McGinnis\nUpdated January 5, 2018\n2 minute read\nCheck your version\nThis post assumes you're using React Router v4. If not, find your version below.\nReact Router v5\nReact Router v6\n\nThe most important thing to understand about React Router v4 is how composable it is. React Router doesn't give you a house - it gives you some nails, screws, plywood, and a hammer while trusting that you can do the rest. A more technical way to say that is React Router v4 gives you the routing primitives upon which you can build your app. This concept really shines in the example we're going to build.\n\nWhat we want to do is create our own \"old school\" navbar. Basically what that means is we'll add a \">\" to the front of whatever Link is active. If our two routes were / and /about, the two states of our navbar would look like this\n\n> Home\nAbout\nHome\n> About\n\nFirst, the easy part. Let's build the skeleton of the app by building out our Routes and the components we'll be rendering, Home and About.\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nconst Home = () => (\n  <div>\n    <h2>Home</h2>\n  </div>\n);\n\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n  </div>\n);\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          {/* Links */}\n\n\n          <hr />\n\n\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\n\n\nexport default App;\n\nBeautiful. Now we need to implement our custom Link component - we'll call it OldSchoolMenuLink. The goal is to make the code below work properly. Notice it's the OldSchoolMenuLink that will be in charge of adding and removing the > but its API is the same as Link.\n\nrender() {\n  return (\n    <Router>\n      <div>\n        <OldSchoolMenuLink exact={true} to=\"/\">\n          Home\n        </OldSchoolMenuLink>\n        <OldSchoolMenuLink to=\"/about\">\n          About\n        </OldSchoolMenuLink>\n\n\n        <hr/>\n\n\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/about\" component={About}/>\n      </div>\n    </Router>\n  )\n}\n\nFirst, let's do the easy part. We know what props OldSchoolMenuLink is going to be taking in, so we can build out the skeleton of the component.\n\nconst OldSchoolMenuLink = ({ children, to, exact }) => (\n\n\n)\n\nNow the main question is, what is it going to render? Remember, the whole point of this component is to make this navbar UI work (based on the active route)\n\n> Home\nAbout\nHome\n> About\n\nWith that said, we know we're going to render a Link and if the app's current location matches the Links path, we'll pre-pend it with a >.\n\nNow the next question naturally becomes, how do we find out if the \"app's current location matches the Link's path\"? Here's one approach. We know the Links path because we're passing it in as the to prop. We also know the app's location because we can use window.location.pathname. With that said, we might implement OldSchoolMenuLink like this.\n\nconst OldSchoolMenuLink = ({ children, to, exact }) => {\n  const match = window.location.pathname === to;\n\n\n  return (\n    <div className={match ? \"active\" : \"\"}>\n      {match ? \"> \" : \"\"}\n      <Link to={to}>{children}</Link>\n    </div>\n  );\n};\n\nWell, this seems to work. The problem is it's not really the React or React Router way of doing things. It also feels weird to reach out to the window object to get the app's location. There's a better way and it involves a tool that we already have at our disposal, React Router's Route component.\n\nBuilt into it, Route has a location checker - we should utilize it. Just as we did above, if there's a match between the app's location and the Links path, we want to pre-pend >. If you're already familiar with React Router v4, your first instinct might be to use Routes render prop. The problem with this is, by design, a Route using render will only match if the path matches. That means we'd only ever get a Link if the Routes path prop matched the app's current location. We're building a navbar. We need to always get a Link and then only get a > if the path matches. The good news is the React Router team predicted this shortcoming and Route has another (rarely used) prop that is exactly what we need - children. children will \"render whether the path matches the location or not ... It works exactly like render except that it gets called whether there is a match or not.\" That's exactly what we need. Even better, \"The children render prop receives all the same route props as the component and render methods, except when a route fails to match the URL, then match is null\". What that means is that we can use match to see if we should render a > or not.\n\nconst OldSchoolMenuLink = ({ children, to, exact }) => (\n  <Route\n    path={to}\n    exact={exact}\n    children={({ match }) => (\n      <div className={match ? \"active\" : \"\"}>\n        {match ? \"> \" : \"\"}\n        <Link to={to}>{children}</Link>\n      </div>\n    )}\n  />\n);\n\nJust like that, we've created our own Link component and used React Router's Route component to do some path checking for us.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nAmbiguous Matches with React Router v4\nTyler McGinnis\nUpdated June 19, 2018\n1 minute read\nCheck your version\nThis post assumes you're using React Router v4. If not, find your version below.\nReact Router v5\nReact Router v6\n\nHere's the scenario. It's February 2020. There's an excess of venture capital and you've managed to snag some by pitching your \"Twitter for minimalists\" app. You're a long time contributor to Hacker News so you're confident you can knock it out in a weekend.\n\nThe app is simple with only three routes - /, /notifications, and /:handle.\n\nYou're a few hours in and you hit a snag. You run rm -rf node_modules && npm install, no luck. You check Twitter. You come back to your app. It's still broken.\n\nYou take a look at your Routes.\n\n<Route exact path='/' component={Home} />\n<Route path='/notifications' component={Notifications} />\n<Route path='/:handle' component={Profile} />\n\nThe issue you're running into is that every time you navigate to /notifications, not only does the Notifications component render, but so does the Profile component since /:handle is also matching. What you need is a way to tell React Router to not match on /:handle if /notifications already matched. You decide to google \"ambiguous matches\" and you find this post, meta.\n\nFirst, let's create our navbar to navigate between our three routes. We'll use /tylermcginnis and /dan-abramov to represent our dynamic user links.\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/notifications\">Notifications</Link>\n            </li>\n            <li>\n              <Link to=\"/tylermcginnis\">Tyler (dynamic)</Link>\n            </li>\n            <li>\n              <Link to=\"/dan_abramov\">Dan (dynamic)</Link>\n            </li>\n          </ul>\n        </div>\n      </Router>\n    );\n  }\n}\n\nNow that we have our navbar setup, let's create our components that we'll be rendering. We'll have Home, Notifications, and Profile.\n\nconst Home = () => <h2>Home</h2>;\nconst Notifications = () => <h2>Notifications</h2>;\nconst Profile = ({ match }) => (\n  <div>\n    <h2>Profile: {match.params.handle}</h2>\n  </div>\n);\n\nNow comes the point of this post. Earlier we mentioned that our Routes looked like this -\n\n<Route exact path='/' component={Home} />\n<Route path='/notifications' component={Notifications} />\n<Route path='/:handle' component={Profile} />\n\nThe problem, as mentioned earlier, is every time you navigate to /notifications, not only does the Notifications component render, but so does the Profile component since /:handle is also matching. What we need is a way to tell React Router v4 to not match on /:handle if /notifications already matched. Another way to put that is we only want to render the first Route that matches, not every Route that matches which is the default behavior.\n\nTo do this, you can wrap your Routes inside of the Switch component that comes with React Router v4.\n\n<Switch>\n  <Route exact path=\"/\" component={Home} />\n  <Route path=\"/notifications\" component={Notifications} />\n  <Route path=\"/:handle\" component={Profile} />\n</Switch>\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Classic React course with code bnC2e .\n\nLOGIN\nImperative vs Declarative Programming\nTyler McGinnis\nUpdated July 13, 2016\n5 minute read\n\nYou won't get very far into learning React until you hear it – \"React is \ndeclarative\". But, what does that even mean? If you try to dive deeper, you inevitably come across a definition that looks something like this, comparing it to imperative programming.\n\n👁\nImperative vs Declarative Programming\n\nImperative programming is how you do something, and declarative programming is more like what you do.\n\nThat definition makes perfect sense... once you actually know the difference between imperative and declarative programming — but you don’t, which is why you're here.\n\nIt’s like trying to answer What came first, the chicken or the egg? except everyone seems to think the chicken did, but you don’t even like eggs, and you’re confused. Combine this frustration with the bastardization of the actual word “declarative” to basically just mean good and all of a sudden your imposter syndrome is tap dancing on your confidence, and you realize you don’t even like programming that much.\n\nThe hard part about this topic is, as my friend Merrick has observed, it's one of those things you have an intuition about, but can’t seem to explain. Vibe driven development, if you will.\n\nSo now, after years of teaching this topic, I've found that the most effective way to explain it seems to be with a combination of metaphors and code samples.\n\nFirst, let’s go back to the initial definition we made fun of.\n\n👁\nImperative vs Declarative Programming\n\nImperative programming is how you do something, and declarative programming is more like what you do.\n\nThere’s actually some good information hidden in here. Let’s first see the merit in this definition by taking it out of the context of programming and look at a \nreal life example.\n\nYou decide that you’ve been spending too much time arguing about JavaScript Fatigue™ and your husband deserves a nice date. You choose to go to Red Lobster since you’ve been listening to a lot of Beyoncé lately. You arrive at Red Lobster, approach the front desk and say…\n\nIMPERATIVE (HOW)\n\nI see that table located under the Gone Fishin’ sign is empty. My husband and I are going to walk over there and sit down.\n\nDECLARATIVE (WHAT)\n\nTable for two, please.\n\nThe imperative approach is concerned with how you’re actually going to get a seat. You need to list out the steps to be able to show how you’re going to get a table. The declarative approach is more concerned with what you want, a table for two.\n\n🤨\n\n...ok let's try another metaphor.\n\nI’m going to ask you a question. I want you to think of both an imperative response and a declarative response.\n\n“I’m right next to Wal-Mart. How do I get to your house from here?”\n\nIMPERATIVE\n\nGo out of the north exit of the parking lot and take a left. Get on I-15 going North until you get to the 12th street exit. Take a right off the exit like you’re going to Ikea. Go straight and take a right at the first light. Continue through the next light then take your next left. My house is #298.\n\nDECLARATIVE\n\nMy address is 298 West Immutable Alley, Eden, Utah 84310\n\nRegardless of how I get to your house, what really matters is the car I drive. Am I going to drive an imperative stick shift car or a declarative automatic car? Enough metaphors?\n\nBefore we dive into the code, it’s important to realize that many declarative approaches have some sort of imperative abstraction layer.\n\nLook at all of our examples:\n\n1. The declarative response to the Red Lobster employee (\"table for two, please\") is assuming that the Red Lobster employee knows all of the imperative steps to get us to the table.\n2. Knowing the address assumes you have some sort of GPS that knows the imperative steps of how to get to your house.\n3. An automatic car has some sort of abstraction layer over shifting gears.\n\nNow, we’re going to attempt to take the leap from metaphorical happy land to real-world code land. To make the jump more graceful, let’s look at some programming languages that are inherently declarative versus those which are more imperative by nature.\n\nIMPERATIVE\nC\nC++\nJava\nDECLARATIVE\nHTML\nSQL\n~BOTH\nJavaScript\nC#\nPython\n\nThink about your typical SQL or HTML code,\n\nSELECT * FROM Users WHERE Country='Mexico';\n\n<article>\n  <header>\n    <h1>Declarative Programming</h1>\n    <p>Sprinkle Declarative in your verbiage to sound smart</p>\n  </header>\n</article>\n\nBy glancing at both examples, you have a clear understanding of what is going on. They’re both declarative. They’re concerned with what you want to be done, rather than how you want it done.\n\nYou’re describing what you’re trying to achieve, without instructing how to do it. The implementation of selecting all of the users who live in Mexico has been abstracted from you. You’re not concerned with how the web browser is parsing your article element and displaying it to the screen.\n\nYour what is Mexican users or a new header and paragraph on your website.\n\nSo far, so good. Let’s dive into more some practical JavaScript examples now.\n\nHere are 3 interview type questions. We're going to answer them imperatively, as if we're focused on how.\n\n1.\n\nWrite a function called double which takes in an array of numbers and returns a new array after doubling every item in that array – double([1,2,3]) // [2,4,6].\n\nfunction double(arr) {\n  let results = [];\n  for (let i = 0; i < arr.length; i++) {\n    results.push(arr[i] * 2);\n  }\n  return results;\n}\n2.\n\nWrite a function called add which takes in an array and returns the result of adding up every item in the array – add([1,2,3]) // 6\n\nfunction add(arr) {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += arr[i];\n  }\n  return result;\n}\n3.\n\nUsing jQuery (or vanilla JavaScript), add a click event handler to the element which has an id of btn. When clicked, toggle (add or remove) the highlight class as well as change the text to Add Highlight or Remove Highlight depending on the current state of the element.\n\n$(\"#btn\").click(function () {\n  $(this).toggleClass(\"highlight\");\n  $(this).text() === \"Add Highlight\"\n    ? $(this).text(\"Remove Highlight\")\n    : $(this).text(\"Add Highlight\");\n});\n\nBy examining what all three of these imperative examples have in common, we’ll be able to better identify what actually makes them imperative.\n\n1. The most obvious commonality is that they’re describing HOW to do something. In each example, we’re either explicitly iterating over an array or explicitly laying out steps for how to implement the functionality we want.\n2. This one might not be as obvious if you’re not used to thinking in the declarative or even more specifically functional way. In each example, we’re mutating some piece of state.\n3. This one is a bit subjective, but to me, the code above isn’t very readable. I can’t just glance at the code and understand what’s going on. My brain needs to step through the code just as an interpreter would while also taking into account the context in which the code lives (another negativity of mutable data).\n\nNow, let's take a look at some declarative examples. The goal is to fix all the problems from above. So each example needs to describe what is happening, can’t mutate state, and should be readable at a glance.\n\n1.\n\nWrite a function called double which takes in an array of numbers and returns a new array after doubling every item in that array – double([1,2,3]) // [2,4,6].\n\nfunction double(arr) {\n  return arr.map((item) => item * 2);\n}\n2.\n\nWrite a function called add which takes in an array and returns the result of adding up every item in the array – add([1,2,3]) // 6\n\nfunction add(arr) {\n  return arr.reduce((prev, current) => prev + current, 0);\n}\n3.\n\nAdd a click event handler to the element which has an id of btn. When clicked, toggle (add or remove) the highlight class as well as change the text to Add Highlight or Remove Highlight depending on the current state of the element.\n\n<Btn\n  onToggleHighlight={handleToggle}\n  highlight={highlight}>\n    {buttonText}\n</Btn>\n\nNotice that in the first two examples we’re leveraging JavaScript’s built-in map and reduce methods. This goes back to what we saw earlier – most declarative solutions are an abstraction over some imperative implementation.\n\nIn every example we’re describing what we want to happen rather than how (we don’t know how map and reduce are implemented, we also probably don’t care). We’re not mutating any state. All of the mutations are abstracted inside of map and reduce. It’s also more readable (once you get used to map and reduce, of course).\n\nNow, what about the last example?\n\nWell, I cheated a little bit and am using React — but note that all three imperative mistakes are still fixed. The real beauty of React is that you can create declarative user interfaces – simply by describing what you want your UI to look like based on your state.\n\nAnother less-spoken-of benefit to declarative code is that your program can be context-independent. This means that because your code is concerned with what the ultimate goal is— rather than the steps it takes to accomplish that goal — the same code can be used in different programs, and work just fine.\n\nLook at all three of our examples above. We can consume both functions and component in any program we want. They’re program agnostic. This is hard to do with imperative code because often times, by definition, imperative code relies on the context of the current state.\n\n🫶\nFunctional Programming\n\nOne thing that I didn’t go too far into is how functional programming is a subset of declarative programming.\n\nIf you haven’t already, I highly recommend getting more familiar with functional programming techniques in JavaScript. Start with .map, .reduce, .filter and work your way up from there. Odds are there isn’t a lower hanging fruit to improve your codebase than making it more functional.\n\nBefore we end, here are some other definitions that I've found from around the web regarding Imperative vs Declarative programming that may be helpful.\n\n📢\n\nDeclarative programming is “the act of programming in languages that conform to the mental model of the developer rather than the operational model of the machine.”\n\n📢\n\nThe declarative property is where there can exist only one possible set of statements that can express each specific modular semantic. The imperative property is the dual, where semantics are inconsistent under composition and/or can be expressed with variations of sets of statements.\n\n📢\n\nDeclarative languages contrast with imperative languages which specify explicit manipulation of the computer’s internal state; or procedural languages which specify an explicit sequence of steps to follow.\n\n📢\n\nIn computer science, declarative programming is a programming paradigm that expresses the logic of a computation without describing its control flow.\n\n📢\n\nI draw the line between declarative and non-declarative at whether you can trace the code as it runs. Regex is 100% declarative, as it’s untraceable while the pattern is being executed.\n\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our classic-react course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nHow To Create a Location Aware Sidebar with React Router\nTyler McGinnis\nUpdated September 10, 2021\n2 minute read\nCheck your version\nThis post assumes you're using React Router v6. If not, find your version below.\nReact Router v4\nReact Router v5\n\nOne thing I love about React Router is how composable and \"React like\" it is. If you're familiar with the mental model of React, then you're probably already familiar with the mental model of React Router. This is demonstrated perfectly in the example we're going to walk through – building a sidebar with React Router.\n\nSpecifically, here's an example of what we'll be building.\n\nIt's a fairly basic app. We'll have three components – Home, Profile, and Settings – which will map nicely to our three paths – /, /profile, and /settings.\n\nWhat I want you to notice though is the text inside the sidebar. Just like the body of the app, it's also dynamic based on the app's current location. You're probably used to seeing React Router dynamically swap out single components based on the app's current location, but you usually don't see it happen in multiple places. Let's walk through how to do it.\n\nFirst, we'll start with the basics – our simple components and navbar.\n\nimport { Link } from \"react-router-dom\";\n\n\nconst Home = () => <h1>Home</h1>;\nconst Profile = () => <h1>Profile</h1>;\nconst Settings = () => <h1>Settings</h1>;\n\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"sidebar\">\n        <ul className=\"nav\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/profile\">Profile</Link>\n          </li>\n          <li>\n            <Link to=\"/settings\">Settings</Link>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nNext, we need to render some Routes so React Router can know which component to render when the user visits certain a location. Before we worry about the sidebar, let's render the main Routes for the body of the app.\n\nimport { Link, Routes, Route } from \"react-router-dom\";\n\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"sidebar\">\n        <ul className=\"nav\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/profile\">Profile</Link>\n          </li>\n          <li>\n            <Link to=\"/settings\">Settings</Link>\n          </li>\n        </ul>\n      </div>\n\n\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/profile\" element={<Profile />} />\n        <Route path=\"/settings\" element={<Settings />} />\n      </Routes>\n    </div>\n  );\n}\n\nAt this point our app is working fine, but we haven't really done anything special. We've simply mapped our app's location to a few components using React Router. Now we need to figure out the sidebar. Any ideas?\n\nRemember, the goal here is, just like we did with the main body of our app, to make our sidebar dynamic based on the app's location. Well, what if we just render another Routes component inside the navbar itself? Then we could create another set of Route components, mapping the app's current location to the text we want to show in the navbar.\n\nCan we do that...? Why not?\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"sidebar\">\n        <ul className=\"nav\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/profile\">Profile</Link>\n          </li>\n          <li>\n            <Link to=\"/settings\">Settings</Link>\n          </li>\n        </ul>\n\n\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <p>\n                This is your home page. You'll see your feed which is made up of\n                the people you follow.\n              </p>\n            }\n          />\n          <Route\n            path=\"/profile\"\n            element={\n              <p>\n                This is your profile page. You'll be able to see all your\n                profile information as well as the people you follow.\n              </p>\n            }\n          />\n          <Route\n            path=\"/settings\"\n            element={\n              <p>\n                This is your settings page. You can change your name, image, and\n                anything else associated with your account.\n              </p>\n            }\n          />\n        </Routes>\n      </div>\n\n\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/profile\" element={<Profile />} />\n        <Route path=\"/settings\" element={<Settings />} />\n      </Routes>\n    </div>\n  );\n}\n\nYour brain might be thinking there's something magic going on here but there's really not. With React Router, we can render as many Routes as we'd like and the outcome is the same. Whenever the app's location changes, any Routescomponent will look through all its children Route elements to find the best match to render. This proces is true whether we have 1 Routes or 20.\n\nWe can even clean this up a bit if you'd like. Right now we're having to duplicate our paths in multiple places. It's not a huge deal, but as our app grows larger, this might become an inconvenience later on.\n\nBecause React is \"Just JavaScript™\", there's nothing stopping us from encapsulating all our routing logic into its own array.\n\nconst routes = [\n  {\n    path: \"/\",\n    main: () => <Home />,\n    sidebar: () => (\n      <p>\n        This is your home page. You'll see your feed which is made up of the\n        people you follow.\n      </p>\n    ),\n  },\n  {\n    path: \"/profile\",\n    main: () => <Profile />,\n    sidebar: () => (\n      <p>\n        This is your profile page. You'll be able to see all your profile\n        information as well as the people you follow.\n      </p>\n    ),\n  },\n  {\n    path: \"/settings\",\n    main: () => <Settings />,\n    sidebar: () => (\n      <p>\n        This is your settings page. You can change your name, image, and\n        anything else associated with your account.\n      </p>\n    ),\n  },\n];\n\nNow that we have our routes array, we can map over it whenever we want to create a new collection of Routes.\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"sidebar\">\n        <ul className=\"nav\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/profile\">Profile</Link>\n          </li>\n          <li>\n            <Link to=\"/settings\">Settings</Link>\n          </li>\n        </ul>\n\n\n        <Routes>\n          {routes.map(({ path, sidebar }) => (\n            <Route key={path} path={path} element={sidebar()} />\n          ))}\n        </Routes>\n      </div>\n\n\n      <Routes>\n        {routes.map(({ path, main }) => (\n          <Route key={path} path={path} element={main()} />\n        ))}\n      </Routes>\n    </div>\n  );\n}\n\nBecause React Router allows us to render as many Routes as we'd like, and because we abstracted our routes to their own array, we can render different components at different sections of our page whenever the app's location matches the Route's path.\n\nWant to learn more?\nIf you liked this post and want to learn more, check out our free Comprehensive Guide to React Router.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,571 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nHandling 404 pages (catch all routes) with React Router v4\nTyler McGinnis\nUpdated January 18, 2018\n1 minute read\nCheck your version\nThis post assumes you're using React Router v4. If not, find your version below.\nReact Router v5\nReact Router v6\n\nA common use case for when you're building a web app is to have a \"catch all\" route that will be rendered if none of your other routes match. A common example of this would be a 404 page.\n\nTo see how this works with React Router v4, let's first render a navbar with the following paths - /, /will-match, /will-not-match, and /also/will/not/match.\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/will-match\">Will Match</Link>\n            </li>\n            <li>\n              <Link to=\"/will-not-match\">Will Not Match</Link>\n            </li>\n            <li>\n              <Link to=\"/also/will/not/match\">Also Will Not Match</Link>\n            </li>\n          </ul>\n        </div>\n      </Router>\n    );\n  }\n}\n\n\nexport default App;\n\nNow that we have the navbar set up, let's create three different components to render - Home, which will match on /, WillMatch which will match on /will-match, and NoMatch, which will be the catch-all component which will render only if none of the other Route's match.\n\nconst Home = () => <h1>Home</h1>;\n\n\nconst WillMatch = () => <h3>Matched!</h3>;\n\n\nconst NoMatch = ({ location }) => (\n  <h3>\n    No match for <code>{location.pathname}</code>\n  </h3>\n);\n\nNow that we have the components which are going to be rendered, we need to actually render some Routes. Home and WillMatch are straight forward, you just render them as you normally would.\n\nrender() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/will-match\">Will Match</Link></li>\n          <li><Link to=\"/will-not-match\">Will Not Match</Link></li>\n          <li><Link to=\"/also/will/not/match\">Also Will Not Match</Link></li>\n        </ul>\n\n\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/will-match\" component={WillMatch}/>\n      </div>\n    </Router>\n  )\n}\n\nNow the question becomes, how do we render NoMatch? Remember, we only want to render NoMatch if both the / and /will-match Routes don't match. There are two parts to accomplishing this - the first is that if you render a Route but don't specify a path prop, that route will always match and render the component. Let's do that for our NoMatch component.\n\n<Route path=\"/\" exact component={Home}/>\n<Route path=\"/will-match\" component={WillMatch}/>\n<Route component={NoMatch} />\n\nThat's closer, but if you play around with the app, you know we're not done yet. Now the app renders the Home and WillMatch components properly but it also always renders the NoMatch component no matter what path we're on.\n\nWhat we need is a way to tell React Router v4 that we only want to render the first Route that matches - even if there's more than one match. By doing this, our NoMatch component will only get rendered if the two Routes above it, / and /will-match aren't matched.\n\nThe good news is React Router v4 comes with a component that does exactly this and it's called Switch. By wrapping your Routes inside of Switch, React Router will only render the first Route that matches.\n\nrender() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/will-match\">Will Match</Link></li>\n          <li><Link to=\"/will-not-match\">Will Not Match</Link></li>\n          <li><Link to=\"/also/will/not/match\">Also Will Not Match</Link></li>\n        </ul>\n\n\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/will-match\" component={WillMatch}/>\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nNow if the user isn't at / or /will-match, the NoMatch component will be rendered.\n\nYou can utilize this same pattern to render a client-side 404 page if none of your other Routes match.\n\n<Switch>\n  <Route exact path=\"/\" component={Home} />\n  <Route exact path=\"/profile\" component={Profile} />\n  <Route component={FourZeroFour} />\n</Switch>\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,566 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nFlexible Images and Media\nJustin Avery\nUpdated November 13, 2016\n2 minute read\nTABLE OF CONTENTS\nThe main problem with flexible media\nFlexible Images\nFlexible iframes\nFlexible Video\n\nWhen the web first came about all of the pages were just text with hyperlinks. It was a fluid web of information. Then we added images to the mix, and then embeds, and then iframes and videos.... and by this point, the web had translated to tables and CSS with fixed widths.\n\nWith the advent of responsive design we are now back to our fluid web of information, but when a lot of the interactive elements\n\nTo take a look at some of the ways you can handle flexible media we will break them down into their individual elements\n\nImages — <img>\nIframes — <iframe>\nFlexible Video — <video>\nThe main problem with flexible media\n\nThere are a few issues that crop up with flexible media but the biggest issue is around ratio which is a knock on effect from defining width and height on the element itself. As the viewport grows larger the contained image/video/iframe grows wider as well, which means that it needs to grow taller as well.\n\nBy setting elements to width: 100%; solves one part of the equation, but we can not do the same for the height because we don't want it to be as tall as the container, it needs to be as tall as its ratio will allow depending on its width.\n\nConfusing?  Lets do a quick example.\n\nLets say that we have a screen that is 800x600 (old school, right?) and on that screen we have an image that is 200px wide and 100px tall (200x100). In the old days that would be fine and the image would always be 200x100, but now we want that image to grow with the viewport.  For simplicity lets say that the image needs to fill the width of the container, and the container is 100% (or 800px).\n\nThe flexible image would scale from 200px to 800px width to reach the width of the container, which is a 600px increase.  Conversely the image height would only need to scale from 100px to 400px — an increase of just 300px.\n\nIf we set the width of the image to 100% we get the right width of 800px, but if we did the same thing to the height the image would be 600px.\n\nYou should note that this is an issue only because we apply height and width against the image itself. If you do not set the width and height against the image on the element then as long as you define the width it will grow as expected. This is more often the case when you have a CMS that controls the inserting of images. There is another issue here though (there always is).\n\nThe browser understands the img and video elements because it has access to those file elements directly, however when it comes to an iframe the browser is literally loading another webpage inside the item and therefore has no concept of how tall or wide the elements contained within the iframe might be.\n\nLet's take a look at each of those elements one-by-one.\n\nFlexible Images\n\nFlexible images fairly straight forward to get running responsively when compared with getting the iframes going.\n\nWe've already discussed possible issues with ratio's when the image width and height is explicitly set on the image element itself so lets take a look at how that appears within the browser itself.\n\nLet's check that out with this boat image which has the height and width defined as per the image size:\n\nThe markup we will be using looks like this, a typical CMS output for an image.\n\n<img width=\"300\" height=\"195\" class=\"width-100\" \nsrc=\"https://responsivedesign.is/wp-content/uploads/2017/02/HAML-HTML-Preprocessor-300x195.jpg\" alt=\"Boat\" />\n\nFor the CSS we're going to apply the width at 100% to get the image to become flexible within the container itself. Remember that if an image is set to width: 100% on a container that occupies 70% of the viewport, then the image will occupy 70% of the viewport (but 100% of the container).\n\nLet's apply the class of .width-100 and see how that affects the image....\n\n.width-100 {\n width: 100%;\n}\n\nThis image is using the .width-100 class, see how it keeps its defined height.\n\nYou might initially think that we need to do the same thing to the height, but that would cause the image height to become 100% of the viewport rather than keeping within the image aspect ratio as you can see below with the class .width-height-100 applied.\n\n.width-height-100 {\n  width: 100%;\n  height: 100%;\n}\n\nThe image is using the .width-height-100 class, see how it's too tall\n\nThe answer for this is to set the height:auto, which allows the browser to automatically set the height of the element to the required ratio given the flexible width.\n\n.width-height-100 {\n  width: 100%;\n  height: auto;\n}\n\nThe image is using the .width-100-height-auto class, see how it's too tall\n\nNow we have some lovely responsive flexible images, however let's take a look at what happens when we drop in a really large image...\n\nNow we're using an uncropped version of the image, the original image at around 1200px. Because the width is 100% is grows to 100% of the image.\n\nThat's WAAAAY too big for our container because we're telling the image to be 100% and the size of the image is wider than that of the container. To make sure this is fixed we can change width to max-width which will ensure that the image will not grow beyond its own width or the width of the container. Back when responsive design came to the foray we were supporting IE6 which did not support max-width, however since then IE6 has gone by the way side and we can just go with max-width only and stay safe.\n\n.max-width-100-height-auto {\n  max-width: 100%;\n  height: auto;\n}\n\nHooray, now we have a flexible image at any width.\n\nFlexible iframes\nFlexible Video\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,565 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the Advanced Javascript course with code bnC2e .\n\nLOGIN\nUnderstanding the \"this\" keyword, call, apply, and bind in JavaScript\nTyler McGinnis\nUpdated March 26, 2018\n7 minute read\nTABLE OF CONTENTS\nImplicit Binding\nExplicit Binding\nnew Binding\nLexical Binding\nwindow Binding\n\nBefore diving into the specifics of the this keyword in JavaScript, it's important to take a step back and first look at why the this keyword exists in the first place. The this keyword allows you to reuse functions with different contexts. Said differently, the \"this\" keyword allows you to decide which object should be focal when invoking a function or a method. Everything we talk about after this will build upon that idea. We want to be able to reuse functions or methods in different contexts or with different objects.\n\nThe first thing we'll look at is how to tell what the this keyword is referencing. The first and most important question you need to ask yourself when you're trying to answer this question is \"Where is this function being invoked?\". The only way you can tell what the this keyword is referencing is by looking at where the function using the this keyword was invoked.\n\nTo demonstrate this with an example you're already familiar with, say we had a greet function that took in a name an alerted a welcome message.\n\nfunction greet (name) {\n  alert(`Hello, my name is ${name}`)\n}\n\nIf I were to ask you exactly what greet was going to alert, what would your answer be? Given only the function definition, it's impossible to know. In order to know what name is, you'd have to look at the function invocation of greet.\n\ngreet('Tyler')\n\nIt's the exact same idea with figuring out what the this keyword is referencing. You can even think about the this keyword as you would a normal argument to a function - it's going to change based on how the function is invoked.\n\nNow that you know the first step to figuring out what the this keyword is referencing is to look at where the function is being invoked, what's next? To help us with the next step, we're going to establish 5 rules or guidelines.\n\nImplicit Binding\nExplicit Binding\nnew Binding\nLexical Binding\nwindow Binding\nImplicit Binding\n\nRemember, the goal here is to be able to look at a function definition using the this keyword and tell what this is referencing. The first and most common rule for doing that is called the Implicit Binding. I'd say it'll tell you what the this keyword is referencing about 80% of the time.\n\nLet's say we had an object that looked like this\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  greet() {\n    alert(`Hello, my name is ${this.name}`)\n  }\n}\n\nNow, if you were to invoke the greet method on the user object, you'd do so be using dot notation.\n\nuser.greet()\n\nThis brings us to the main key point of the implicit binding rule. In order to figure out what the this keyword is referencing, first, look to the left of the dot when the function is invoked. If there is a \"dot\", look to the left of that dot to find the object that the this keyword is referencing.\n\nIn the example above, user is to \"the left of the dot\" which means the this keyword is referencing the user object. So, it's as if, inside the greet method, the JavaScript interpreter changes this to user.\n\ngreet() {\n  // alert(`Hello, my name is ${this.name}`)\n  alert(`Hello, my name is ${user.name}`) // Tyler\n}\n\nLet's take a look at a similar, but a slightly more advanced example. Now, instead of just having a name, age, and greet property, let's also give our user object a mother property which also has a name and greet property.\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  greet() {\n    alert(`Hello, my name is ${this.name}`)\n  },\n  mother: {\n    name: 'Stacey',\n    greet() {\n      alert(`Hello, my name is ${this.name}`)\n    }\n  }\n}\n\nNow the question becomes, what is each invocation below going to alert?\n\nuser.greet()\nuser.mother.greet()\n\nWhenever we're trying to figure out what the this keyword is referencing we need to look to the invocation and see what's to the \"left of the dot\". In the first invocation, user is to the left of the dot which means this is going to reference user. In the second invocation, mother is to the left of the dot which means this is going to reference mother.\n\nuser.greet() // Tyler\nuser.mother.greet() // Stacey\n\nAs mentioned earlier, about 80% of the time there will be an object to the \"left of the dot\". That's why the first step you should take when figuring out what the this keyword is referencing is to \"look to the left of the dot\". But, what if there is no dot? This brings us to our next rule -\n\nExplicit Binding\n\nNow, what if instead of our greet function being a method on the user object, it was just its own standalone function.\n\nfunction greet () {\n  alert(`Hello, my name is ${this.name}`)\n}\n\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n}\n\nWe know that in order to tell what the this keyword is referencing we first have to look at where the function is being invoked. Now, this brings up the question, how can we invoke greet but have it be invoked with the this keyword referencing the user object. We can't just do user.greet() like we did before because user doesn't have a greet method. In JavaScript, every function contains a method which allows you to do exactly this and that method is named call.\n\n\"call\" is a method on every function that allows you to invoke the function specifying in what context the function will be invoked.\n\nWith that in mind, we can invoke greet in the context of user with the following code -\n\ngreet.call(user)\n\nAgain, call is a property on every function and the first argument you pass to it will be the context (or the focal object) in which the function is invoked. In other words, the first argument you pass to call will be what the this keyword inside that function is referencing.\n\nThis is the foundation of rule #2 (Explicit Binding) because we're explicitly (using .call), specifying what the this keyword is referencing.\n\nNow let's modify our greet function just a little bit. What if we also wanted to pass in some arguments? Say along with their name, we also wanted to alert what languages they know. Something like this\n\nfunction greet (l1, l2, l3) {\n  alert(\n    `Hello, my name is ${this.name} and I know ${l1}, ${l2}, and ${l3}`\n  )\n}\n\nNow to pass arguments to a function being invoked with .call, you pass them in one by one after you specify the first argument which is the context.\n\nfunction greet (l1, l2, l3) {\n  alert(\n    `Hello, my name is ${this.name} and I know ${l1}, ${l2}, and ${l3}`\n  )\n}\n\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n}\n\n\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\n\ngreet.call(user, languages[0], languages[1], languages[2])\n\nThis works and it shows how you can pass arguments to a function being invoked with .call. However, as you may have noticed, it's a tad annoying to have to pass in the arguments one by one from our languages array. It would be nice if we could just pass in the whole array as the second argument and JavaScript would spread those out for us. Well good news for us, this is exactly what .apply does. .apply is the exact same thing as .call, but instead of passing in arguments one by one, you can pass in a single array and it will spread each element in the array out for you as arguments to the function.\n\nSo now using .apply, our code can change into this (below) with everything else staying the same.\n\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\n\n// greet.call(user, languages[0], languages[1], languages[2])\ngreet.apply(user, languages)\n\nSo far under our \"Explicit Binding\" rule we've learned about .call as well as .apply which both allow you to invoke a function, specifying what the this keyword is going to be referencing inside of that function. The last part of this rule is .bind. .bind is the exact same as .call but instead of immediately invoking the function, it'll return a new function that you can invoke at a later time. So if we look at our code from earlier, using .bind, it'll look like this\n\nfunction greet (l1, l2, l3) {\n  alert(\n    `Hello, my name is ${this.name} and I know ${l1}, ${l2}, and ${l3}`\n  )\n}\n\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n}\n\n\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\n\nconst newFn = greet.bind(user, languages[0], languages[1], languages[2])\nnewFn() // alerts \"Hello, my name is Tyler and I know JavaScript, Ruby, and Python\"\nnew Binding\n\nThe third rule for figuring out what the this keyword is referencing is called the new binding. If you're unfamiliar with the new keyword in JavaScript, whenever you invoke a function with the new keyword, under the hood, the JavaScript interpreter will create a brand new object for you and call it this. So, naturally, if a function was called with new, the this keyword is referencing that new object that the interpreter created.\n\nfunction User (name, age) {\n  /*\n    Under the hood, JavaScript creates a new object\n    called `this` which delegates to the User's prototype\n    on failed lookups. If a function is called with the\n    new keyword, then it's this new object that interpreter\n    created that the this keyword is referencing.\n  */\n\n\n  this.name = name\n  this.age = age\n}\n\n\nconst me = new User('Tyler', 27)\nLexical Binding\n\nAt this point, we're on our 4th rule and you may be feeling a bit overwhelmed. That's fair. The this keyword in JavaScript is arguably more complex than it should be. Here's the good news, this next rule is the most intuitive.\n\nOdds are you've heard of and used an arrow function before. They're new as of ES6. They allow you to write functions in a more concise format.\n\nfriends.map((friend) => friend.name)\n\nEven more than conciseness, arrow functions have a much more intuitive approach when it comes to this keyword. Unlike normal functions, arrow functions don't have their own this. Instead, this is determined lexically. That's a fancy way of saying this is determined how you'd expect, following the normal variable lookup rules. Let's continue with the example we used earlier. Now, instead of having languages and greet as separate from the object, let's combine them.\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {}\n}\n\nEarlier we assumed that the languages array would always have a length of 3. By doing so we were able to use hardcoded variables like l1, l2, and l3. Let's make greet a little more intelligent now and assume that languages can be of any length. To do this, we'll use .reduce in order to create our string.\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {\n    const hello = `Hello, my name is ${this.name} and I know`\n\n\n    const langs = this.languages.reduce(function (str, lang, i) {\n      if (i === this.languages.length - 1) {\n        return `${str} and ${lang}.`\n      }\n\n\n      return `${str} ${lang},`\n    }, \"\")\n\n\n    alert(hello + langs)\n  }\n}\n\nThat's a lot more code but the end result should be the same. When we invoke user.greet(), we expect to see Hello, my name is Tyler and I know JavaScript, Ruby, and Python.. Sadly, there's an error. Can you spot it? Grab the code above and run it in your console. You'll notice it's throwing the error Uncaught TypeError: Cannot read property 'length' of undefined. Gross. The only place we're using .length is on line 9, so we know our error is there.\n\nif (i === this.languages.length - 1) {}\n\nAccording to our error, this.languages is undefined. Let's walk through our steps to figure out what that this keyword is referencing cause clearly, it's not referencing user as it should be. First, we need to look at where the function is being invoked. Wait? Where is the function being invoked? The function is being passed to .reduce so we have no idea. We never actually see the invocation of our anonymous function since JavaScript does that itself in the implementation of .reduce. That's the problem. We need to specify that we want the anonymous function we pass to .reduce to be invoked in the context of user. That way this.languages will reference user.languages. As we learned above, we can use .bind.\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {\n    const hello = `Hello, my name is ${this.name} and I know`\n\n\n    const langs = this.languages.reduce(function (str, lang, i) {\n      if (i === this.languages.length - 1) {\n        return `${str} and ${lang}.`\n      }\n\n\n      return `${str} ${lang},`\n    }.bind(this), \"\")\n\n\n    alert(hello + langs)\n  }\n}\n\nSo we've seen how .bind solves the issue, but what does this have to do with arrow functions. Earlier I said that with arrow functions \"this is determined lexically. That's a fancy way of saying this is determined how you'd expect, following the normal variable lookup rules.\"\n\nIn the code above, following just your natural intuition, what would the this keyword reference inside of the anonymous function? For me, it should reference user. There's no reason to create a new context just because I had to pass a new function to .reduce. And with that intuition comes the often overlooked value of arrow functions. If we re-write the code above and do nothing but use an anonymous arrow function instead of an anonymous function declaration, everything \"just works\".\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {\n    const hello = `Hello, my name is ${this.name} and I know`\n\n\n    const langs = this.languages.reduce((str, lang, i) => {\n      if (i === this.languages.length - 1) {\n        return `${str} and ${lang}.`\n      }\n\n\n      return `${str} ${lang},`\n    }, \"\")\n\n\n    alert(hello + langs)\n  }\n}\n\nAgain the reason for this because with arrow functions, this is determined \"lexically\". Arrow functions don't have their own this. Instead, just like with variable lookups, the JavaScript interpreter will look to the enclosing (parent) scope to determine what this is referencing.\n\nwindow Binding\n\nFinally is the \"catch-all\" case - the window binding. Let's say we had the following code\n\nfunction sayAge () {\n  console.log(`My age is ${this.age}`)\n}\n\n\nconst user = {\n  name: 'Tyler',\n  age: 27\n}\n\nAs we covered earlier, if you wanted to invoke sayAge in the context of user, you could use .call, .apply, or .bind. What would happen if we didn't use any of those and instead just invoked sayAge as you normally would\n\nsayAge() // My age is undefined\n\nWhat you'd get is, unsurprisingly, My age is undefined because this.age would be undefined. Here's where things get a little weird. What's really happening here is because there's nothing to the left of the dot, we're not using .call, .apply, .bind, or the new keyword, JavaScript is defaulting this to reference the window object. What that means is if we add an age property to the window object, then when we invoke our sayAge function again, this.age will no longer be undefined but instead, it'll be whatever the age property is on the window object. Don't believe me? Run this code,\n\nwindow.age = 27\n\n\nfunction sayAge () {\n  console.log(`My age is ${this.age}`)\n}\n\nPretty gnarly, right? That's why the 5th rule is the window Binding. If none of the other rules are met, then JavaScript will default the this keyword to reference the window object.\n\nAs of ES5, if you have \"strict mode\" enabled, JavaScript will do the right thing and instead of defaulting to the window object will just keep \"this\" as undefined.\n\n'use strict'\n\n\nwindow.age = 27\n\n\nfunction sayAge () {\n  console.log(`My age is ${this.age}`)\n}\n\n\nsayAge() // TypeError: Cannot read property 'age' of undefined\n\nSo putting all of our rules into practice, whenever I see the this keyword inside of a function, these are the steps I take in order to figure out what it's referencing.\n\nLook to where the function was invoked.\nIs there an object to the left of the dot? If so, that's what the \"this\" keyword is referencing. If not, continue to #3.\nWas the function invoked with \"call\", \"apply\", or \"bind\"? If so, it'll explicitly state what the \"this\" keyword is referencing. If not, continue to #4.\nWas the function invoked using the \"new\" keyword? If so, the \"this\" keyword is referencing the newly created object that was made by the JavaScript interpreter. If not, continue to #5.\nIs \"this\" inside of an arrow function? If so, its reference may be found lexically in the enclosing (parent) scope. If not, continue to #6.\nAre you in \"strict mode\"? If yes, the \"this\" keyword is undefined. If not, continue to #7.\nJavaScript is weird. \"this\" is referencing the \"window\" object.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our advanced-javascript course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nadapt.js\nJustin Avery\nUpdated June 16, 2012\n1 minute read\n\nAdapt.js is a lightweight (848 bytes minified) JavaScript file that determines which CSS file to load before the browser renders a page. If the browser tilts or resizes, Adapt.js simply checks its width, and serves only the CSS that is needed, when it is needed.\n\nA potential drawback of Adapt.js is the possibility of a brief flash of unstyled content as a new stylesheet is being fetched (think of it as \"Ajax\" for CSS). I have done my best to mitigate this by keeping CSS files small (3 KB). It is worth noting this is a proposed, not prescribed, approach to a problem with multiple solutions.v\n\nConfiguration\n// Edit to suit your needs.\nvar ADAPT_CONFIG = {\n  // Where is your CSS?\n  path: 'assets/css/',\n\n\n  // false = Only run once, when page first loads.\n  // true = Change on window resize and page tilt.\n  dynamic: true,\n\n\n  // Optional callback... myCallback(i, width)\n  callback: myCallback,\n\n\n  // First range entry is the minimum.\n  // Last range entry is the maximum.\n  // Separate ranges by \"to\" keyword.\n  range: [\n    '0px    to 760px  = mobile.css',\n    '760px  to 980px  = 720.css',\n    '980px  to 1280px = 960.css',\n    '1280px to 1600px = 1200.css',\n    '1600px to 1920px = 1560.css',\n    '1940px to 2540px = 1920.css',\n    '2540px           = 2520.css'\n  ]\n};\n\nFor all possible options — Read moreAdapt.js, accepts a few parameters: path is where your stylesheets reside, dynamic is a boolean (true or false) that says whether to watch the window for its resize event, also triggered by tablet or phone tilt. Widths and optional CSS files are specified in range. The defaults are shown in the adjacent code example. You can also specify an optional callback function, that will pass range index and width.\n\nOpen Source\n\nJust like the 960 Grid System itself, Adapt.js is licensed underGPL and MIT. That means it is free, as in speech. If you want to use it in a product that is already licensed under the GPL, you can. Or, if you want to use it in a commercial product, you can choose the MIT license instead. No strings attached. The code is available via GitHub.\n\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,569 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off a subscription with code bnC2e .\n\nLOGIN\nWhy you don’t need device specific breakpoints\nJustin Avery\nUpdated October 28, 2014\n2 minute read\nTABLE OF CONTENTS\nDesire to upgrade\nResponsive Design at its best\nForm Factor\nHigh DPI\nNew viewport dimensions\nThe Future\n\nRecently I was fortunate to spend some time with Brad Frost. One of our conversations — most of which weren't anything to do with the industry — was around the need to upgrade to the latest round of devices (the iPhone 6 had recently been released).\n\nI was joking about coming across my first iPad (2011 iPad 2) and how comically large it seemed after using the iPad Mini. With so many new devices that were now hitting the shelves and the fact that we're no longer wowed that there's a new bigger and skinnier phone has meant that for some the upgrade to the latest version isn't something that is as vital as it once was.\n\nDesire to upgrade\n\nOne of the reasons behind wanting to upgrade to the latest device was the need to start testing our own and our client websites to see what we needed to fix.\n\nWith the iPhone 6 new larger screen, and it's companions 6+ even bigger screen this would surely introduce a new set of design problems for all the sites we only launched since the iPhone 5 resize.\n\nSurely this, along with the High DPI Screen was going to warrant us to head out and upgrade to the latest bit of hardware.\n\nResponsive Design at its best\n\nThe fact is that we didn't need to do anything.\n\nNothing. Nada. Zip.\n\nOver the past 4 years (that's right, the idea has been around for that long and it's not going anywhere) we've been moving towards a more responsive web. We have flexible grids, we have flexible images, and we use media queries to rearrange our layouts when the viewport dictates.\n\nOver the 4 years we have slowly moved away from device specific breakpoints in favour of content specific breakpoints, i.e. adding a breakpoint when the content is no longer easy to consume.\n\nWith this fundamental shift in thinking we no longer have to fear a new device — a new iPhone width — because we've already fixed our sites to work everywhere.\n\nLets take a look at three of the most common issues with new widths and why they no longer matter.\n\nForm Factor\n\nThis is actually a good reason for testing. The size of the phone has increased and therefore the way we interface with the phone will change. Luke Wroblewski has written about the form factor and possible solutions to navigation.\n\nThis is nothing new though. There have been larger phones on the market since the Samsung Note was released so many of the issues faced will have already been overcome.\n\nApple have released a double tap on the home button to move the top of the screen closer for tapping elements, but this form factor is not available across all devices so not something that provides a well rounded solution.\n\nForm factor doesn't matter because you've already taken these screen sizes into consideration with other devices.\n\nHigh DPI\n\nWhen the retina display (Apples marketing name for high DPI screens) was released it caused a world wide panic. First there was 1.5 high dpi which meant you needed a 38px icon to render nice and crisp when displayed at 25px. Then we had the 2x icon sizes and we needed a 50px icon to render nice and crisp when displayed at 25px.\n\nAt some point we got bored or resizing icons and worked out that if we used Font Icons or SVG icons then it didn't matter how good the screen would become because the vector looks beautiful and crisp EVERYWHERE.\n\nHigh DPI/Retina doesn't matter because you've already updated all your logo's and icons to SVG and that scales to work on any device.\n\nNew viewport dimensions\n\nFor a little while we lost site of what Responsive Design really meant — and I mean the underlying theory of Responsive Design where we respond our content to fit any viewport — and we began to use device widths to target particular layouts towards.\n\nWe knew that browser and device sniffing was frowned upon and thought that we could achieve the same approach using only media queries. This spurred the 320, 480, and 768px media queries that kept with the iPhone 3/4 and iPad viewport dimensions. When the iPhone 5 was released a handful of use updated the 480px query to 568px to accommodate the slightly larger screen. Strangely we never looked at Android phone dimensions (probably because there's far too many of them).\n\nFortunately at some point we all became aware we were doing it wrong and fell back to allowing the content dictate our breakpoints. This has the greatest benefit of all, the ability to still serve our sites content perfectly regardless of the device sizes released to market.\n\nNew device size don't matter because you've already based your media query breakpoints on the content.\n\nThe Future\n\nThis won't be the last iPhone to be released, and it certainly won't be the last smart phone released with a new dimension.\n\nFortunately it no longer matters the size of the devices that are coming in the future because we're already prepared for them with our flexible grids, flexible images, and content focussed breakpoints.\n\nThe picture proposal has meant that in the future image sizes are no longer an issue either, although we do need to become better at setting the sizes attribute.\n\nThe biggest issue we're going to have now will be producing content for smaller screens. Screens that fit on your wrist. This is a problem less for responsive design to solve, after all we can't reduce the content to less than a single column.\n\nInstead the solution will be in the format we serve our content. Making it available not just in between <html>..</html> tags, but also in formats like <xml> <rss> and json.\n\nJustin Avery\n\nCore Team at nftx.io. Creator of responsivedesign.is.\n\nShare this post\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,563 developers every Monday and Thursday\nGet Bytes Today"
  },
  {
    "pageOutput": "🇮🇳 We noticed you’re in India. Get 50% off the React Router course with code bnC2e .\n\nLOGIN\nThe Guide to Nested Routes with React Router\nTyler McGinnis\nUpdated September 10, 2021\n6 minute read\nCheck your version\nThis post assumes you're using React Router v6. If not, find your version below.\nReact Router v4\nReact Router v5\n\nA solid understanding of how, when, and why to create nested routes is foundational to any developer using React Router. However, in order to help us better answer those questions, there are some topics we need to cover first. Namely, you need to be comfortable with two of React Router's most foundational components – Route and Routes.\n\nLet's start with Route. Put simply, Route allows you to map your app's location to different React components. For example, say we wanted to render a Dashboard component whenever a user navigated to the /dashboard path. To do so, we'd render a Route that looked like this.\n\n<Route path=\"/dashboard\" element={<Dashboard />} />\n\nThe mental model I use for Route is that it always has to render something – either its element prop if the path matches the app's current location or null, if it doesn't.\n\nSlow and steady wins the race\n\nI realize we're starting off off slow here, but in doing so we'll set the proper foundation that we can build off of later. Pinky promise.\n\nWith Route out of the way, lets look at its friend – Routes.\n\n<Routes>\n  <Route path=\"/\" element={<Home />} />\n  <Route path=\"/messages\" element={<Messages />} />\n  <Route path=\"/settings\" element={<Settings />} />\n</Routes>\n\nYou can think of Routes as the metaphorical conductor of your routes. Its job is to understand all of its children Route elements, and intelligently choose which ones are the best to render. It's also in charge of constructing the appropriate urls for any nested Links and the appropriate paths for any nested Routes – but more on that in a bit.\n\nPlaying off our <Routes> above, say not only do we want a /messages page, but we also want a page for each individual conversation, /messages/:id. There are a few different approaches to accomplish this. Your first idea might be to just create another Route.\n\n<Routes>\n  <Route path=\"/\" element={<Home />} />\n  <Route path=\"/messages\" element={<Messages />} />\n  <Route path=\"/messages/:id\" element={<Chat />} />\n  <Route path=\"/settings\" element={<Settings />} />\n</Routes>\n\nAssuming the UI for <Chat> had nothing to do with <Messages>, this would work. However, this is a post about nested routes, not just rendering normal routes.\n\nTypically with nested routes, the parent Route acts as a wrapper over the child Route. This means that both the parent and the child Routes get rendered. In our example above, only the child Route is being rendered.\n\nroute style:\nnested\n\nSo to make a truly nested route, when we visit a URL that matches the /messages/:id pattern, we want to render Messages which will then be in charge of rendering Chat.\n\nReal world example\n\nA real-life example of this UI could look similar to Twitter's /messages route. When you go to /messages, you see all of your previous conversations on the left side of the screen. Then, when you go to /messages/:id, you still see all your messages, but you also see your chat history for :id.\n\nSo how could we adjust our code to do this? Well, what's stopping us from just rendering another Routes component inside our Messages component? Something like this:\n\n// App.js\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/messages\" element={<Messages />} />\n      <Route path=\"/settings\" element={<Settings />} />\n    </Routes>\n  );\n}\n// Messages.js\nfunction Messages() {\n  return (\n    <Container>\n      <Conversations />\n\n\n      <Routes>\n        <Route path=\"/messages/:id\" element={<Chat />} />\n      </Routes>\n    </Container>\n  );\n}\n\nNow when the user navigates to /messages, React Router renders the Messages component. From there, Messages shows all our conversations via the Conversations component and then renders another Routes with a Route that maps /messages/:id to the Chat component.\n\nLooks good, but there's one subtle issue. Can you spot it?\n\nMessages only gets rendered when the user is at /messages. When they visit a URL that matches the /messages/:id pattern, Messages no longer matches and therefore, our nested Routes never gets rendered.\n\nTo fix this, naturally, we need a way to tell React Router that we want to render Messages both when the user is at /messages or any other location that matches the /messages/* pattern.\n\nWait. What if we just update our path to be /messages/*?\n\n// App.js\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/messages/*\" element={<Messages />} />\n      <Route path=\"/settings\" element={<Settings />} />\n    </Routes>\n  );\n}\n\nMuch to our delight, that'll work. By appending a /* to the end of our /messages path, we're essentially telling React Router that Messages has a nested Routes component and our parent path should match for /messages as well as any other location that matches the /messages/* pattern. Exactly what we wanted.\n\nThere's even one small improvement we can make to our nested Routes. Right now inside of our Messages component, we're matching for the whole path – /messages/:id.\n\n<Routes>\n  <Route path=\"/messages/:id\" element={<Chat />} />\n</Routes>\n\nThis seems a bit redundant. The only way Messages gets rendered is if the app's location is already at /messages. It would be nice if we could just leave off the /messages part all together and have our path be relative to where it's rendered. Something like this.\n\nfunction Messages() {\n  return (\n    <Container>\n      <Conversations />\n\n\n      <Routes>\n        <Route path=\":id\" element={<Chat />} />\n      </Routes>\n    </Container>\n  );\n}\n\nAs you probably guessed, you can do that as well since Routes supports relative paths. Notice we also didn't do /:id. Leaving off the / is what tells React Router we want the path to be relative.\n\nAt this point, we've looked at how you can create nested routes by appending /* to our Route's path and rendering, literally, a nested Routes component. This works when you want your child Route in control of rendering the nested Routes, but what if we didn't want that?\n\nMeaning, what if we wanted our App component to contain all the information it needed to create our nested routes rather than having to do it inside of Messages?\n\nBecause this is a common preference, React Router supports this way of creating nested routes as well. Here's what it looks like.\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/messages\" element={<Messages />}>\n        <Route path=\":id\" element={<Chats />} />\n      </Route>\n      <Route path=\"/settings\" element={<Settings />} />\n    </Routes>\n  );\n}\n\nYou declaratively nest the child Route as a children of the parent Route. Like before, the child Route is now relative to the parent, so you don't need to include the parent (/messages) path.\n\nNow, the last thing you need to do is tell React Router where in the parent Route (Messages) should it render the child Route (Chats).\n\nTo do this, you use React Router's Outlet component.\n\nimport { Outlet } from \"react-router-dom\";\n\n\nfunction Messages() {\n  return (\n    <Container>\n      <Conversations />\n\n\n      <Outlet />\n    </Container>\n  );\n}\n\nIf the app's location matches the nested Route's path, this Outlet component will render the Route's element. So based on our Routes above, if we were at /messages, the Outlet component would render null, but if we were at /messages/1, it would render the <Chats /> component.\n\nCool... but which one is better?\n\nOpinion Time: Though there's no objective benefit to one approach over the other, I'd probably favor using the latter approach with <Outlet /> over the former nested Routes approach as it feels a little cleaner, IMO.\n\nAt this point, there's nothing new about nested routes with React Router that you need to learn. However, it may be beneficial to see it used in a real app.\n\nHere's what we'll be building. As you navigate around, keep an eye on the navbar. You'll notice that we have the following URL structure.\n\n/\n/topics\n  :topicId\n    :resourceId\n\nNow before we get started, let's get a few housekeeping items out of the way first.\n\nWe'll have an \"API\" which is responsible for getting us our data. It has three methods we can use, getTopics, getTopic, and getResource.\n\nexport function getTopics() {\n  return topics;\n}\n\n\nexport function getTopic(topicId) {\n  return topics.find(({ id }) => id === topicId);\n}\n\n\nexport function getResource({ resourceId, topicId }) {\n  return topics\n    .find(({ id }) => id === topicId)\n    .resources.find(({ id }) => id === resourceId);\n}\n\nIf you'd like to see what topics looks like, you can do so here - spoiler alert, it's just an array of objects which maps closely to our routes.\n\nNext, our Home component for when the user is at the / route. Nothing fancy here either.\n\nfunction Home() {\n  return (\n    <React.Fragment>\n      <h1>Home</h1>\n      <p>\n        Welcome to our content index. Head over to{\" \"}\n        <Link to=\"/topics\">/topics</Link> to see our catalog.\n      </p>\n    </React.Fragment>\n  );\n}\nPor qué no los dos?\n\nBecause we've seen both patterns for creating nested routes, let's see them both in our example as well. We'll start out with the nested Routes pattern, then we'll refactor to use the <Outlet /> pattern.\n\nNext, we'll build out our top level App component which will have our main navbar as well as Routes for / and /topics.\n\nLooking at our final app, we know that / is going to map to our Home component and /topics is going to map to a component that shows our top level topics (which we can get from calling getTopics).\n\nWe'll name this component Topics and since it'll contain a nested Routes, we'll make sure to append /* to the parent path.\n\nfunction Topics() {\n  return null;\n}\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n\n        <hr />\n\n\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/topics/*\" element={<Topics />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nNow we need to build out the Topics component. As I just mentioned, Topics needs to show our top level topics which it can get from getTopics. Let's do that before we worry about its nested routes.\n\nimport { Link } from \"react-router-dom\";\nimport { getTopics } from \"./api\";\n\n\nfunction Topics() {\n  const topics = getTopics();\n\n\n  return (\n    <div>\n      <h1>Topics</h1>\n      <ul>\n        {topics.map(({ name, id }) => (\n          <li key={id}>\n            <Link to={id}>{name}</Link>\n          </li>\n        ))}\n      </ul>\n\n\n      <hr />\n    </div>\n  );\n}\n\nNotice that because we're using nested routes, our Link is relative to the location it's rendered – meaning we can just do to={id} rather than having to do to={'/topics/${id}'}\n\nNow that we know we're linking to={id} (which is really /topics/react, /topics/typescript, or /topics/react-router), we need to render a nested Route that matches that same pattern.\n\nWe'll call the component that gets rendered at the route Topic and we'll build it out in the next step.\n\nThe only thing we need to remember about Topic is it's going to also render a nested Routes, which means we need to append /* to the Route's path we render in Topics.\n\nfunction Topic() {\n  return null;\n}\n\n\nfunction Topics() {\n  const topics = getTopics();\n\n\n  return (\n    <div>\n      <h1>Topics</h1>\n      <ul>\n        {topics.map(({ name, id }) => (\n          <li key={id}>\n            <Link to={id}>{name}</Link>\n          </li>\n        ))}\n      </ul>\n\n\n      <hr />\n\n\n      <Routes>\n        <Route path=\":topicId/*\" element={<Topic />} />\n      </Routes>\n    </div>\n  );\n}\n\nWe're one level deeper and a pattern is starting to emerge.\n\nLet's build out our Topic component now. Topic will show the topic's name, description, and then link its resources. We can get the topic by passing our topicId URL parameter we set up in the previous step to getTopic.\n\nimport { useParams } from \"react-router-dom\";\nimport { getTopic } from \"./api\";\n\n\nfunction Topic() {\n  const { topicId } = useParams();\n  const topic = getTopic(topicId);\n\n\n  return (\n    <div>\n      <h2>{topic.name}</h2>\n      <p>{topic.description}</p>\n\n\n      <ul>\n        {topic.resources.map((sub) => (\n          <li key={sub.id}>\n            <Link to={sub.id}>{sub.name}</Link>\n          </li>\n        ))}\n      </ul>\n\n\n      <hr />\n    </div>\n  );\n}\n\nNotice that even though we're a few layers deep, our nested Links are still smart enough to know the current location so we can just link to={sub.id} rather than to={/topics/${topicId}/${sub.id}}\n\nWe're almost there. Now we need to render our last nested Routes that matches the pattern we just saw. Again, because Routes is smart and supports relative paths, we don't need to include the whole /topics/:topicId/ path.\n\nfunction Resource() {\n  return null;\n}\n\n\nfunction Topic() {\n  const { topicId } = useParams();\n  const topic = getTopic(topicId);\n\n\n  return (\n    <div>\n      <h2>{topic.name}</h2>\n      <p>{topic.description}</p>\n\n\n      <ul>\n        {topic.resources.map((sub) => (\n          <li key={sub.id}>\n            <Link to={sub.id}>{sub.name}</Link>\n          </li>\n        ))}\n      </ul>\n\n\n      <hr />\n\n\n      <Routes>\n        <Route path=\":resourceId\" element={<Resource />} />\n      </Routes>\n    </div>\n  );\n}\n\nFinally, we need to build out the Resource component. We're all done with nesting, so this component is as simple as grabbing our topicId and resourceId URL parameters, using those to grab the resource from getResource, and rendering some simple UI.\n\nfunction Resource() {\n  const { topicId, resourceId } = useParams();\n\n\n  const { name, description, id } = getResource({ topicId, resourceId });\n\n\n  return (\n    <div>\n      <h3>{name}</h3>\n      <p>{description}</p>\n      <a href={`https://ui.dev/${id}`}>Read Post</a>\n    </div>\n  );\n}\n\nWell, that was fun. You can find all the final code here.\n\nNow, let's throw all that out the window and refactor our app using the Outlet component. First, instead of having nested Routes sprinkled throughout our app, we'll put all of them inside of our App component.\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n\n        <hr />\n\n\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/topics\" element={<Topics />}>\n            <Route path=\":topicId\" element={<Topic />}>\n              <Route path=\":resourceId\" element={<Resource />} />\n            </Route>\n          </Route>\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nNow, we need to swap out the nested Routes inside of Topics and Topic for the <Outlet /> component.\n\nfunction Topic() {\n  const { topicId } = useParams();\n  const topic = getTopic(topicId);\n\n\n  return (\n    <div>\n      <h2>{topic.name}</h2>\n      <p>{topic.description}</p>\n\n\n      <ul>\n        {topic.resources.map((sub) => (\n          <li key={sub.id}>\n            <Link to={sub.id}>{sub.name}</Link>\n          </li>\n        ))}\n      </ul>\n\n\n      <hr />\n\n\n      <Outlet />\n    </div>\n  );\n}\n\n\nfunction Topics() {\n  const topics = getTopics();\n\n\n  return (\n    <div>\n      <h1>Topics</h1>\n      <ul>\n        {topics.map(({ name, id }) => (\n          <li key={id}>\n            <Link to={id}>{name}</Link>\n          </li>\n        ))}\n      </ul>\n\n\n      <hr />\n\n\n      <Outlet />\n    </div>\n  );\n}\n\nAnd with that, we're done. You can find the final code for using <Outlet> here.\n\nTo recap, nested routes allow you to, at the route level, have a parent component control the rendering of a child component. Twitter's /messages route is the perfect example of this.\n\nWith React Router, you have two options for creating nested routes. The first is using the /* with nested <Routes> pattern and the second is using the <Outlet /> pattern.\n\nWant to learn more?\nIf you liked this post and want to learn more, check out our free Comprehensive Guide to React Router.\nTyler McGinnis\n\nCEO of ui.dev. Obsessed with teaching, writing, swimming, biking, and running.\n\nShare this post\nWant more\n?\n\nThis is part of our react-router course.\n\nBefore you leave\n\nI know, another newsletter pitch - but hear me out. Most JavaScript newsletters are terrible. When’s the last time you actually looked forward to getting one? Even worse, when’s the last time you actually read one? We wanted to change that.\n\nWe call it Bytes, but others call it their favorite newsletter.\n\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today\n\nSdu\n\n@sduduzo_g\n\nThis is the first ever newsletter that I open a music playlist for and maximize my browser window just to read it in peace. Kudos to @uidotdev for great weekly content.\n\nBrandon Bayer\n\n@flybayer\n\nThe Bytes newsletter is a work of art! It’s the only dev newsletter I’m subscribed too. They somehow take semi boring stuff and infuse it with just the right amount of comedy to make you chuckle.\n\nJohn Hawley\n\n@johnhawly\n\nBytes has been my favorite newsletter since its inception. It’s my favorite thing I look forward to on Mondays. Goes great with a hot cup of coffee!\n\nGarrett Green\n\n@garrettgreen\n\nI subscribe to A LOT of dev (especially JS/TS/Node) newsletters and Bytes by @uidotdev is always such a welcomed, enjoyable change of pace to most (funny, lighthearted, etc) but still comprehensive/useful.\n\nMuhammad\n\n@mhashim6_\n\nLiterally the only newsletter I’m waiting for every week.\n\nGrayson Hicks\n\n@graysonhicks\n\nBytes is the developer newsletter I most look forward to each week. Great balance of content and context! Thanks @uidotdev.\n\nMitchell Wright\n\n@mitchellbwright\n\nI know I’ve said it before, but @tylermcginnis doesn’t miss with the Bytes email. If you’re a developer, you really need to subscribe\n\nAli Spittel\n\n@aspittel\n\nCan I just say that I giggle every time I get the @uidotdev email each week? You should definitely subscribe.\n\nChris Finn\n\n@thefinnomenon\n\nEvery JavaScript programmer should be subscribed to the newsletter from @uidotdev. Not only do they manage to succinctly cover the hot news in the JavaScript world for the week but it they manage to add a refreshing humor to it all.\n\nSTUFF\nLogin\nReviews\nTerms\nPrivacy\nCode of Conduct\nMORE STUFF\nBlog\nnpmtrends\nuseHooks\nBytes\nReact Newsletter\nSIGN UP FOR BYTES\nDelivered to 170,568 developers every Monday and Thursday\nGet Bytes Today"
  }
]